@@onCampaignLoad
@PROPS@ fontColor=pink ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=black ; playerEditable=false ; applyToSelected=false ; group= ; tooltip= ; minWidth=120
[r,code:{

[defineFunction("SiguienteToken", "SiguienteToken@Lib:asaltos")]

[defineFunction("mantenerOportunidad", "mantenerOportunidad@Lib:asaltos")]

[defineFunction("mantenerOportunidad", "mantenerOportunidad@Lib:asaltos")]

[defineFunction("ActuarActual", "ActuarActual@Lib:asaltos")]

[defineFunction("BatallaMovPoints", "BatallaMovPoints@Lib:asaltos")]

[defineFunction("guardarAccion", "guardarAccion@Lib:asaltos")]

[defineFunction("SelCambioAccion", "SelCambioAccion@Lib:asaltos")]
[defineFunction("SelAccion", "SelAccion@Lib:asaltos")]

[defineFunction("gastarAccion", "gastarAccion@Lib:asaltos")]
[defineFunction("accionActual", "accionActual@Lib:asaltos")]
[defineFunction("getCantiAcciones", "getCantiAcciones@Lib:asaltos")]

[defineFunction("getValIniciativeToken", "getValIniciativeToken@Lib:asaltos")]

[defineFunction("AccionToString", "AccionToString@Lib:asaltos")]
[defineFunction("getAccionText", "getAccionText@Lib:asaltos")]

[defineFunction("getAccion", "getAccion@Lib:asaltos")]

[defineFunction("traerSortilegios", "traerSortilegios@Lib:asaltos")]
[defineFunction("CuentaCargas", "CuentaCargas@Lib:asaltos")]
[defineFunction("CuentaCargasProy", "CuentaCargasProy@Lib:asaltos")]
[defineFunction("selector", "selector@Lib:asaltos")]

<!-- combate -->
[defineFunction("definirAtaque", "definirAtaque@Lib:asaltos")]
[defineFunction("definirDefensa", "definirDefensa@Lib:asaltos")]
[defineFunction("showResultadoCombate", "showResultadoCombate@Lib:asaltos")]

<!-- para carga de tablas desde json -->
[defineFunction("crearTablaFromJson", "crearTablaFromJson@Lib:asaltos")]
[defineFunction("crearTablaFromJsonDos", "crearTablaFromJsonDos@Lib:asaltos")]
[defineFunction("leerJsonDeTabla", "leerJsonDeTabla@Lib:asaltos")]

<!-- Ataques con tablas -->
[defineFunction("resultadoAtaque", "resultadoAtaque@Lib:asaltos")]
[defineFunction("DeclararAtaque", "DeclararAtaque@Lib:asaltos")]
[defineFunction("DeclararAtaqueProyectil", "DeclararAtaqueProyectil@Lib:asaltos")]
[defineFunction("tokenRango", "tokenRango@Lib:asaltos")]

[defineFunction("DeclararAtaqueMultiple", "DeclararAtaqueMultiple@Lib:asaltos")]

[defineFunction("DeclaroDefensa", "DeclaroDefensa@Lib:asaltos")]
[defineFunction("DefensaFireBallV3", "DefensaFireBallV3@Lib:asaltos")]
[defineFunction("CalculoDanio", "CalculoDanio@Lib:asaltos")]
[defineFunction("DadoAbierto", "dadoabierto@Lib:asaltos")]
[defineFunction("DadoAbiertoArriba", "DadoAbiertoArriba@Lib:asaltos")]
[defineFunction("BuscarCritico", "BuscarCritico@Lib:asaltos")]
[defineFunction("SetearCritico", "SetearCritico@Lib:asaltos")]

[defineFunction("Golpear", "Golpear@Lib:asaltos")]

[defineFunction("SetearCriticoEnDanio", "SetearCriticoEnDanio@Lib:asaltos")]

[defineFunction("ResetTokens", "ResetTokens@Lib:asaltos")]

[defineFunction("finAsalto", "finAsalto@Lib:asaltos")]
[defineFunction("bonoKataArmas", "bonoKataArmas@Lib:asaltos")]
[defineFunction("postDanios", "postDanios@Lib:asaltos")]
[defineFunction("lanzarMovManiobra", "lanzarMovManiobra@Lib:asaltos")]
[defineFunction("lanzarCorrer", "lanzarCorrer@Lib:asaltos")]

[defineFunction("lanzarPELEA", "lanzarPELEA@Lib:asaltos")]

[defineFunction("puntoMuertoFrame", "puntoMuertoFrame@Lib:asaltos")]

[defineFunction("SelectorMasterAccion", "SelectorMasterAccion@Lib:asaltos")]
[defineFunction("DeclararAtaque1v1", "DeclararAtaque1v1@Lib:asaltos")]
[defineFunction("DeclararAtaqueArrojadizo", "DeclararAtaqueArrojadizo@Lib:asaltos")]
[defineFunction("DeclararAtaqueV3", "DeclararAtaqueV3@Lib:asaltos")]
[defineFunction("DeclararAtaqueMultipleV3", "DeclararAtaqueMultipleV3@Lib:asaltos")]
[defineFunction("DeclararAtaqueFireBall", "DeclararAtaqueFireBall@Lib:asaltos")]
[defineFunction("AtaqueFireBallV3", "AtaqueFireBallV3@Lib:asaltos")]
[defineFunction("ResolverAtaqueProyectilV3", "ResolverAtaqueProyectilV3@Lib:asaltos")]
[defineFunction("DeclararAtaqueProyectilV3", "DeclararAtaqueProyectilV3@Lib:asaltos")]

[defineFunction("DeclaroDefensaV3", "DeclaroDefensaV3@Lib:asaltos")]
[defineFunction("DeclaroDefensaProyectilV3", "DeclaroDefensaProyectilV3@Lib:asaltos")]

[defineFunction("ProgressRoundFrame", "ProgressRoundFrame@Lib:asaltos")]
[defineFunction("puntoMuertoProgressRoundFrame", "puntoMuertoProgressRoundFrame@Lib:asaltos")]

[defineFunction("treeAccionsProgressRoundFrame", "treeAccionsProgressRoundFrame@Lib:asaltos")]

[defineFunction("puntoMuertoProgressRoundFrame", "puntoMuertoProgressRoundFrame@Lib:asaltos")]
[defineFunction("puntoAutoMoveFrame", "puntoAutoMoveFrame@Lib:asaltos")]

[defineFunction("puntoAutoMoveFrame", "puntoAutoMoveFrame@Lib:asaltos")]

[defineFunction("showCargasSortilInRow", "showCargasSortilInRow@Lib:asaltos")]
[defineFunction("showCargasProyInRow", "showCargasProyInRow@Lib:asaltos")]
[defineFunction("showAlcancesInRow", "showAlcancesInRow@Lib:asaltos")]

[defineFunction("pre_cargarSort", "pre_cargarSort@Lib:asaltos")]
[defineFunction("cargarSort", "cargarSort@Lib:asaltos")]
[defineFunction("pre_disparaSor", "pre_disparaSor@Lib:asaltos")]
[defineFunction("traerSortielgios", "traerSortielgios@Lib:asaltos")]

[defineFunction("disparaSortilegio", "disparaSortilegio@Lib:asaltos")]
[defineFunction("pre_cargarSort", "pre_cargarSort@Lib:asaltos")]
[defineFunction("actuar", "actuar@Lib:asaltos")]

[defineFunction("ResolverAutoAtaque", "ResolverAutoAtaque@Lib:asaltos")]
[defineFunction("AutoCombatir", "AutoCombatir@Lib:asaltos")]

[defineFunction("AskForAutoCombat", "AskForAutoCombat@Lib:asaltos")]

[defineFunction("getTokensAuto", "getTokensAuto@Lib:asaltos")]

[r: defineFunction("DeclararAtaqueFireBallSEL", "DeclararAtaqueFireBallSEL@Lib:asaltos")]

[r: defineFunction("AtaqueFireBallSELV3", "AtaqueFireBallSELV3@Lib:asaltos")]

[r: defineFunction("fixCeros", "fixCeros@Lib:asaltos")]

[r: defineFunction("AutomaticMissilesMacro", "AutomaticMissilesMacro@Lib:asaltos")]

[r: defineFunction("CastigarConCritico", "CastigarConCritico@Lib:asaltos")]

[r: defineFunction("resetGolpeActual", "resetGolpeActual@Lib:asaltos")]

[r: defineFunction("ResolverAutoAtaqueProy", "ResolverAutoAtaqueProy@Lib:asaltos")]

[r: defineFunction("AllResolverAutoAtaqueProy", "AllResolverAutoAtaqueProy@Lib:asaltos")]

[r: defineFunction("multipleAttakDialog", "multipleAttakDialog@Lib:asaltos")]

[r: defineFunction("selectAutoDefensa", "selectAutoDefensa@Lib:asaltos")]

[r: defineFunction("DoAutoMissiles", "DoAutoMissiles@Lib:asaltos")]

[r: defineFunction("AutomaticMissilesMacro_2", "AutomaticMissilesMacro_2@Lib:asaltos")]

[r: defineFunction("CastigarConDanioYCriticoAzar", "CastigarConDanioYCriticoAzar@Lib:asaltos")]

[r: defineFunction("CalcularRT", "CalcularRT@Lib:asaltos")]

[r: defineFunction("RTSortilegio", "RTSortilegio@Lib:asaltos")]

[r: defineFunction("reiniciarAcciones", "reiniciarAcciones@Lib:asaltos")]

}]

@@SiguienteToken
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=default ; playerEditable=false ; applyToSelected=false ; group= ; tooltip= ; minWidth=120
[h: round = getInitiativeRound()]
[h: tok_id = getInitiativeToken() ]
[h, if(pausear()==1): pause("tok_id")]
[h: nextInitiative()]

[h: tokName = getName(getInitiativeToken()) ]
[h, if(pausear()==1): pause("tokName,round")]
[h, token(tokName): isH = getInitiativeHold(tokName)]
[h: punto = 1]

[h, if(pausear()==1): pause("isH")]
[h, while(getInitiativeHold(tokName)), code:{
	
	[h: pos = nextInitiative()]
	[h: setLibProperty("iniciativePosition",pos,"Lib:asaltos")]
	[h: tokName = getName(getInitiativeToken()) ]
	[h, token(tokName): isH = getInitiativeHold(tokName)]
	[h, if(pausear()==1): pause("tokName")]
	[h, if(pausear()==1): pause("isH")]
}]

[h: tok_id = getInitiativeToken() ]
[h: tokName = getName(tok_id) ]
[h: roundNew = getInitiativeRound()]
[h: mantenerOportunidad()]

	
[h: tknName = getName(tok_id)]
[h, if(tknName != "ACCIONES" && tknName != "AUTOARROW" ),code:{
	
	[ token(tokName): a = getProperty("Accion")]
	[ token(tokName): puntosMov = getProperty("Movement")]
	[ if(a != "desplazamiento" && a != "mov_manio"): pm = 3]

	[ if(a == "mov_manio"): pm = CalcMovimiento(tokName) / 2]
	[ if(a == "desplazamiento"): pm = CalcMovimiento(tokName)]
	[ if(pausear()==1): pause("pm","puntosMov")]
	[ token(tokName) :  setProperty("ActualMove",pm)]
}]

[h,token(tok_id): owners = getOwners()]
[h, if (isPC(tok_id) && listCount(owners)>0): obj = getOwners(",",tok_id) ; obj = "gm"]

[h: link = macroLinkText("enviarFrameStatus@lib:personajes", "none")]
[h: execLink(link, 0, obj)]

[h: ProgressRoundFrame()]

[ if( roundNew > round ), CODE: {	
   
    [h: ResetTokens()]
    [r: finAsalto()]
    [h: AutomaticMissilesMacro_2()]
	
	<!-- Envio el selector de acciones a los jugadores -->	  
	[h: broadcast(macroLink("<color='red'>", "puntoMuertoFrame@Lib:personajes", 'none', '', ""), getAllPlayerNames()) ]
	[r: macroLink("Seleccion de Accion!", "SelAccion@Lib:asaltos")]
	
	

};{	
	
	[h,if(tokName != "AUTOMOVE"):goto(tokName)]
	[h: acc = getProperty("Accion", tok_id)]
	[h: val = getValIniciativeToken(tokName)]	
	[h: mantenerOportunidad()]
	[h,if(tokName != "AUTOMOVE"): centrarEn(tokName)]
	[h, if( isPC(tok_id) ): broadcast(macroLink("<color='red'>", "centrarEn@lib:personajes", 'none', tokName, ""), getAllPlayerNames()) ]

}]

@@(new)
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=default ; playerEditable=false ; applyToSelected=false ; group=Pruebas ; tooltip= ; minWidth=
[h: CastigarConCritico("Neo")]

@@(new)
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=default ; playerEditable=false ; applyToSelected=false ; group=Pruebas ; tooltip= ; minWidth=
[h: CastigarConCritico("Neo")]

@@(new)
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=default ; playerEditable=false ; applyToSelected=false ; group=Pruebas ; tooltip= ; minWidth=
[h: CastigarConCritico("Neo")]

@@PROBAR ATAQUE
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=default ; playerEditable=false ; applyToSelected=true ; group=Pruebas ; tooltip= ; minWidth=
[h: lsVisibleNpc = json.intersection( getNPCNames("json"), getVisibleTokenNames("json") )]
 

[h: assert(json.length(lsVisibleNpc), "No visible NPC", 0)]
 

[h: input("index|"+json.toList(lsVisibleNpc)+"|My target is|LIST") ]
 

[h: currentTgt = json.get(lsVisibleNpc, index) ]
 

Current target : {currentTgt}

@@Pruba_d5a36g
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=default ; playerEditable=false ; applyToSelected=false ; group=Pruebas ; tooltip= ; minWidth=
<!-- Define local vars -->
[H: Strength = 12]
[H: Toughness = 14]
[H: Hitpoints = 20]
[H: statList = "Strength, Toughness, Hitpoints"]
[H: inputStr = "[]"]
 
<!-- Build input form simple -->
[H: inputStr = json.append(inputStr,"junk|<html><b>A simple example</b></html>|-|LABEL|SPAN=TRUE")]
[H: inputStr = json.append(inputStr, "Strength|"+Strength+"|Enter Strenght value")]
[H: inputStr = json.append(inputStr, "Toughness|"+Toughness+"|Enter Toughness value")]
[H: inputStr = json.append(inputStr, "Hitpoints|"+Hitpoints+"|Entere number of Hitpoints")]
 
<!-- Build input form advanced -->
[H: inputStr = json.append(inputStr,"junk|<html><b>A complex example</b></html>|-|LABEL|SPAN=TRUE")]
[H, foreach(stat,statList): inputStr = json.append(inputStr,strformat("%{stat}|%s|<html><b><font color=blue>Enter %{stat} value</b></font></html>|TEXT|WIDTH=6", eval(stat)))]
 
<!-- put local variables in input form -->
[H: inputStr = json.evaluate(inputStr)]
 
<!-- get user input -->
[H: hasInput = input(json.toList(inputStr,"##"))]

@@Pruba_table
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=default ; playerEditable=false ; applyToSelected=false ; group=Pruebas ; tooltip= ; minWidth=
[r: arg(0)]
[ dialog("test"): {
 
<h3>this is pretty</h3>
[h: link = macroLinkText("Pruba_table@lib:asaltos", "all")]
<form action="[r:link]" >
<table>
<tr>
   <td>Value</td>
   <td><input type="text"  name="text1" size="5" /></td>
</tr>
<tr>
   <td>Option1</td>
   <td><input type="checkbox" name="Option1" /></td>
</tr>
<tr>
   <td>Option2</td>
   </td><input type="checkbox"  name="Option2" value="asa" />
</td>
<tr>
   <td colspan="2"><input type="submit" /></td>
</tr>
</table>
 </form>
}]

@@Prubatoken status
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=default ; playerEditable=false ; applyToSelected=false ; group=Pruebas ; tooltip= ; minWidth=
[h, macro("Pruba_table@lib:asaltos"): 3]

@@aprueba de atacar
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=yellow ; playerEditable=false ; applyToSelected=true ; group=Pruebas ; tooltip= ; minWidth=
[r: DeclararAtaque(getName())]

@@callDanio
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=default ; playerEditable=false ; applyToSelected=false ; group=Pruebas ; tooltip= ; minWidth=
holi
[h: CalculoDanio(arg(0))]

@@canSeeToken
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=default ; playerEditable=false ; applyToSelected=true ; group=Pruebas ; tooltip= ; minWidth=
holaaaa

@@AccionToString
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=50 ; color=default ; playerEditable=false ; applyToSelected=false ; group=Acciones ; tooltip= ; minWidth=120
<!-- AccionToString -->
[h: a = arg(0)]
[h, if(argCount() > 1):  wantColor = arg(1); wantColor = 0]

[h, switch(a),code:
case "cargar_sort": { 
	[h: re = "Cargar Sortilegio"]
	[h: co = "#0099ff"]
};
case "lanzar_sort": { 
	[h: re = "Lanzar Sortilegio"]
	[h: co = "#0066ff"]
};
case "cargar_proy": { 
	[h: re = "Cargar Proyectil"]
	[h: co = "#ff6600"]
};
case "disparar_proy": { 
	[h: re = "Disparar Proyectil"]
	[h: co = "#ff3300"]
};
case "mov_manio": { 
	[h: re = "Movimiento o Maniobra"]
	[h: co = "#ffff66"]
};
case "ataque_cac": { 
	[h: re = "Combate C.a C."]
	[h: co = "#13F3DD"]
};
case "desplazamiento": { 
	[h: re = "Desplazamiento"]
	[h: co = "#66ff33"]
};
case "mov_estatico": { 
	[h: re = "Mov. Estatico"]
	[h: co = "#993300"]
};
default: { 
	[h: re = "Sin Accion"]
	[h: co = "white"]
}]
[h,if (wantColor): re = co]
[h: macro.return = re]

@@ActuarActual
@PROPS@ fontColor=orange ; autoExecute=true ; fontSize=1.00em ; sortBy=1 ; color=blue ; playerEditable=false ; applyToSelected=false ; group=Acciones ; tooltip=Muestra la accion del token actual en un frame ; minWidth=120
<!-- ActuarActual -->
[h: tokenName = getInitiativeToken() ]
[r: actuar(tokenName)]

@@DesidirFrame
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=23 ; color=default ; playerEditable=false ; applyToSelected=false ; group=Acciones ; tooltip= ; minWidth=120
<!-- desisidrFrame -->
[h: token = getIniciativeToken()]
[ frame("SelAccion"):{
 <html>
    <head>
      <title>Desidir Accion</title>
    </head>
    <body>
		<table width='100%' cellpadding='0' cellspacing='3' border="1">
			<tr>
				<td class='celda' >
					<a href='macro://actuar@Lib:asaltos/self/selected?[r: token]'>
						<span style='text-decoration:none; color:blue;'>Actuar</span></a>
				</td>
			</tr>			
			<tr>
				<td style='padding-top: 12px;
				    padding-bottom: 12px;
				    text-align: center;
				    background-color: yellow;
				    color: white;'>
					<a href='macro://accionDeOportunidad@Lib:asaltos/self/selected'>
						<span style='text-decoration:none; color:blue;'>Accion de Oportunidad</span></a>
				</td>
			</tr>
			<tr>
				<td style='padding-top: 12px;
				    padding-bottom: 12px;
				    text-align: center;
				    background-color: yellow;
				    color: white;'>
					<a href='macro://SelCambioAccion@Lib:asaltos/self/selected'>
						<span style='text-decoration:none; color:blue;'>Cambio de Accion</span></a>
				</td>
			</tr>			
		</table>
</body>
</html>

}]
[h: setNotes(1,"lib:asaltos")]

@@SelAccion
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=10 ; color=default ; playerEditable=false ; applyToSelected=false ; group=Acciones ; tooltip= ; minWidth=120
[h: acciones = "cargar_sort,lanzar_sort,cargar_proy,disparar_proy,mov_manio,ataque_cac,desplazamiento,mov_estatico"]
[ frame("SelAccion"):{
 <html>
    <head>
     <link rel='stylesheet' type='text/css' href='myCSS@[r: getMacroLocation()]'></link>
    <title>Eleccion de Acciones</title>
      <title>Eleccion de Acciones</title>
    </head>
    <body>
	<table width='100%'  cellpadding='0' cellspacing='3' border="1">
		[foreach(accButon, acciones,''),code:{
			[h: t = AccionToString(accButon,0)]
			<tr class='row'>
				<td  class='celdaSel' style='background-color:[r: AccionToString(accButon,1)];'>
					<a href='macro://guardarAccion@Lib:asaltos/self/selected?[r: accButon]'>
						<span style="text-decoration:none; color: black" title="[r: t]">[r: t]</span></a>
				</td>
			</tr>
		}] 
		
</table>
</body>
</html>

}]

@@SelCambioAccion
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=11 ; color=default ; playerEditable=false ; applyToSelected=false ; group=Acciones ; tooltip= ; minWidth=120
[ frame("SelAccion"):{
 <html>
    <head>
      <title>Cambio de Accion</title>
    </head>
    <body>
		<table width='100%' cellpadding='0' cellspacing='3' border="1">
			<tr>
				<td title="Golpear" style='padding-top: 12px;
				    padding-bottom: 12px;
				    text-align: center;
				    background-color: #4CAF50;
				    color: white;'>
					[r: macroLink("ATACAR!", "DeclararAtaque@Lib:asaltos", "list", "","selected")]	
				</td>
			</tr>
			<tr>
				<td title="Cargar Sortilegio" style='padding-top: 12px;
				    padding-bottom: 12px;
				    text-align: center;
				    background-color: #4CAF50;
				    color: white;'>
					<a href='macro://guardarCambioAccion@Lib:asaltos/self/selected?mov_manio'>
						<span style='text-decoration:none; color:blue;'>Mov. y Maniobra</span></a>
				</td>
			</tr>
			<tr>
				<td style='padding-top: 12px;
				    padding-bottom: 12px;
				       text-align: center;
				    background-color: #4CAF50;
				    color: white;'>
					<a href='macro://guardarCambioAccion@Lib:asaltos/self/selected?ataque_cac'>
						<span style='text-decoration:none; color:blue;'>Ataque CAC</span></a>
				</td>
			</tr>
			<tr>
				<td style='padding-top: 12px;
				    padding-bottom: 12px;
				       text-align: center;
				    background-color: #4CAF50;
				    color: white;'>
					<a href='macro://guardarCambioAccion@Lib:asaltos/all/selected?desplazamiento'>
						<span style='text-decoration:none; color:blue;'>Desplazamiento</span></a>
				</td>
			</tr>
		</table>

		<table width='100%' cellpadding='0' cellspacing='3'>
			<tr>
				<td style='padding-top: 12px;
				    padding-bottom: 12px;
				    text-align: center;
				    background-color: yellow;
				    color: white;'>
					<a href='macro://accionDeOportunidad@Lib:asaltos/all/selected'>
						<span style='text-decoration:none; color:blue;'>Accion de Oportunidad</span></a>
				</td>
			</tr>			
		</table>
</body>
</html>

}]

@@accionActual
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=2 ; color=default ; playerEditable=false ; applyToSelected=false ; group=Acciones ; tooltip=Muestra la accion del token actual en un frame ; minWidth=120
<!-- accionActual Muestra la accion del token actual en un frame -- >
[h: pj = arg(0)]
[h: iniciativa = arg(1)]

[h: accio = getAccion(pj)]

[h: a = json.get(accio,"accion")]
[h: d = json.get(accio,"desc")]

[ frame("DescAccionActual"):{
 <html>
    <head>
 <link rel='stylesheet' type='text/css' href='myCSS@[r: getMacroLocation()]'></link>
      <title>Acciones en el Asalto</title>
    </head>
    <body>
    <table border="1" width='100%' cellpadding='0' cellspacing='3'>
    <trclass='row'>
        <th>Personaje</th>
        <th>Accion</th>
    <th>Iniciacita</th>
</tr>
    <tr>
        <td style="text-align: center;">[r: pj]</td>
            <td style="text-align: center;">[r: AccionToString(a)]</td>
            <td style="text-align: center;">[r: iniciativa]</td>
    </tr>
<tr class='row'>
    <th colspan='3'>Descripcion</th>        
    </tr>
<tr class='row'>    
        <td  colspan='3' class='row' style="text-align: center;">[r: d]</td>
</tr>
    </table>                
    </body>
</html>

}]

@@accionDeOportunidad
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=3 ; color=default ; playerEditable=false ; applyToSelected=true ; group=Acciones ; tooltip= ; minWidth=120
<!-- accionDeOportunidad -->
[h: tokenAccion = getInitiativeToken() ]
[h: tokenAccion = getName(tokenAccion)]

[h, token(tokenAccion): setInitiativeHold(1) ]
{getInitiativeToken()} Espera una mejor Oportunidad.
[h: mantenerOportunidad()]

@@actuar
@PROPS@ fontColor=orange ; autoExecute=true ; fontSize=1.00em ; sortBy=1 ; color=blue ; playerEditable=false ; applyToSelected=false ; group=Acciones ; tooltip=Muestra la accion del token actual en un frame ; minWidth=120
<!-- Actuar -->
[h: tokenName = arg(0)]
[h: a = getAccion(tokenName)]
[h: a = getStrProp(a,"accion")]
[h, if(pausear()==1): pause("a")]

[r, switch(a),code:
case "cargar_sort": { 
	[h: jsonCarga = pre_cargarSort(tokenName)]
	[h,token(tokenName): setStrProp(GolpeActual,"SortCargado",jsonCarga)]
	[h: cargaSort(tokenName)]
	[h: gastarAccion( tokenName )]
};
case "lanzar_sort": { 
	[r: disparaSortilegio(tokenName) ]
	[h: gastarAccion( tokenName )]
};
case "cargar_proy": { 
	[h: re = "Cargar Proyectil"]
	[h: co = "#ff6600"]
	[h: gastarAccion( tokenName )]
};
case "disparar_proy": { 
	[h: re = "Disparar Proyectil"]
	[h: co = "#ff3300"]
	[h: gastarAccion( tokenName )]
};
case "mov_manio": { 
	[h: re = "Movimiento o Maniobra"]
	[h: co = "#ffff66"]
	[h: gastarAccion( tokenName )]
};
case "ataque_cac": { 
	[h: re = "Atacar C.a C."]
	[h: co = "#13F3DD"]
	[h: gastarAccion( tokenName )]
};
case "desplazamiento": { 
	[h: re = "Desplazamiento"]
	[h: co = "#66ff33"]
	[h: gastarAccion( tokenName )]
};
case "mov_estatico": { 
	[h: re = "Mov. Estatico"]
	[h: co = "#993300"]
	[h: gastarAccion( tokenName )]
};
default: { 
	[h: re = "Sin Accion"]
	[h: co = "white"]
	[h: gastarAccion( tokenName )]
}]

@@actuarOportunidad
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=6 ; color=default ; playerEditable=false ; applyToSelected=false ; group=Acciones ; tooltip= ; minWidth=120
<!-- actuarOportunidad -->

[h: tokenAccion = getInitiativeToken() ]
[h: tokenAccion = getName(tokenAccion)]
[h, if(pausear()==1): pause("tokenAccion")]
[h, token(tokenAccion): iniciativaActualPlus1 = number(getInitiative()) + 1]

[h, if(pausear()==1): pause("tokenAccion")]
[h: arrHoldTokens = ""]
[h: prpTokens = ""]
[h: posicion=0]
[h: posicionActual = 1]
[h: json = getInitiativeList() ]
[h: tokens = json.get(json, "tokens")]
[r, foreach(item, tokens, "<br>"),code:{ 
	
	[h: idTok = json.get(item,"tokenId")]
	[h: tokName=getName(idTok)]
	[h: holdTok = json.get(item,"holding")]	

<!-- guardo la posicion del tokenAccion actual, para reempleazar por quien actua oportunidad-->
	[h, if( tokenAccion == tokName ): posicionActual = posicion)]	
	11
	[h, if( holdTok == 'true' ): arrHoldTokens = listAppend(arrHoldTokens,tokName)]	
	[h, if( holdTok == 'true' ): prpTokens = setStrProp(prpTokens,tokName,posicion)]	
	[h: posicion = posicion +1]

}]	

[h: ErrorMsg(listCount(arrHoldTokens),"No existe ningun personaje esperando accion de oportunidad")]

<!-- ********** Invoco el Input  **********-->
[H: inputStr = "[]"]

[h: inputStr = json.append(inputStr,"pjSeleccionado|"+ arrHoldTokens +"|Quien realizara la accion de oportunidad? |LIST|SELECT=0 VALUE=STRING")]

[H: input = input(json.toList(inputStr,"##"))]

[h: abort(input)]

[h, token(pjSeleccionado):setInitiative(iniciativaActualPlus1)]
[h: posTokenAccion = getStrProp(prpTokens,pjSeleccionado)]
[h: sortInitiative()]

[h, if(pausear()==1): pause("posicion")]
[h, token(pjSeleccionado): setCurrentInitiative(posicionActual)]
[h, token(pjSeleccionado): setInitiativeHold(0) ]
[h: ProgressRoundFrame()]
{pjSeleccionado} Realiza la Accion que esperaba.

@@gastarAccion
@PROPS@ fontColor=orange ; autoExecute=true ; fontSize=1.00em ; sortBy=1 ; color=blue ; playerEditable=false ; applyToSelected=false ; group=Acciones ; tooltip=Gasta una accion, y retorna cantidad de acciones hechas ; minWidth=120
<!-- gastarAccion -->
[h: tokenName = arg(0)]
[h, if( json.length( macro.args ) > 1 ): cantAcc = arg(1) ; cantAcc = 1]
[h, if( pausear() == 1 ): pause( "tokenName" , "cantAcc" ) ]
[h: log.info(  " gastarAccion: macro.args(" + macro.args + ")")]

[h,token(tokenName): ap = AccionPath  ]
[h,token(tokenName): countAcciones = json.get( accionPath, "countAcciones" ) ]

<!--  Obtengo canti de acciones posibles -->

[h: resta = countAcciones - cantAcc]
[h, if( countAcciones > 0 &&  resta >=  0 ),code:{ 
	[ mje = tokenName + " gasta " + cantAcc + " acciones en el asalto. Le restan : " + resta ]
	[ ap = json.set( ap, "countAcciones",resta )]
	[ log.info(  " gastarAccion: " + tokenName + "(" + ap + ")")]
	[ token(tokenName): AccionPath = ap)]
	
};{
	[ mje = "A "+ tokenName + " No le quedan acciones en este asalto "]	
}]

[h: broadcast(mje)]

[h, token(tokenName), if( isPC() ): broadcast( colorText(mje,color) ) ]

[h: macro.return = resta]

@@getAccion
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=51 ; color=default ; playerEditable=false ; applyToSelected=false ; group=Acciones ; tooltip= ; minWidth=120
<!-- getAccion -->
[h: tokName = getName(arg(0)) ]

[h: accio = getProperty("Accion",tokName)]
[h, if(json.type(accio) == "OBJECT"): accio = upper(json.get(accio,"accion")) ]
[h, if( length(accio) == 0 ): accio = "MOV_ESTATICO" ]

[h: macro.return = accio ]

@@getAccionText
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=52 ; color=default ; playerEditable=false ; applyToSelected=false ; group=Acciones ; tooltip= ; minWidth=120
<!-- getAccion -->
[h: tokName = getName(arg(0)) ]
[h: tp = getPropertyType(tokName) ]
[h, if( tp != "Jugador" && tp != "Npc" ): assert(0, colorText( "No es un personaje. No guarda Acciones","red"),0) ]
[h: accio = getAccion(tokName)]
[h: a = lower(accio)]
[h: re = AccionToString(a)]
[h: macro.return = re ]

@@getCantiAcciones
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=51 ; color=default ; playerEditable=false ; applyToSelected=false ; group=Acciones ; tooltip=RETORNA LA CANTIDAD DE ACCIONES HECHAS POR EL TOKEN EN EL ASALTO ACTUAL ; minWidth=120
<!-- getCantiAcciones -->
[h,token( arg(0) ): macro.return = json.get(AccionPath,"countAcciones") ]

@@guardarAccion
@PROPS@ fontColor=red ; autoExecute=true ; fontSize=1.00em ; sortBy=20 ; color=default ; playerEditable=false ; applyToSelected=true ; group=Acciones ; tooltip= ; minWidth=120
<!--  guardarAccion -->

[h: acc = arg(0)]
[h, if(argCount() >1 ): switchToken(arg(1))]

[h: tok_id = currentToken()]

[h, if(argCount() >1 ): tok_id = arg(1)]
[h: tokName= getName(tok_id)]

[h: mm = getMovMan(getName(tok_id))]
[h, if(pausear()==1): pause("mm")]
[h: agi = getHoja("AGI",getName(tok_id))]

[h: gm = isGM()]
[h: owned = isOwner(getPlayerName(), tok_id)]
[h, if(gm ||  owned): "";  assert(0, colorText("No tenes derecho a usar este Personaje.","red"),0)]
[h, if(pausear()==1): pause("mm")]
[h: pasos=3]
[h: bono = getProperty("BonoIniciativa",tok_id)]
[h, if(bono ==""): bono=0]
[h, if(pausear()==1): pause("mm")]

[h: usos = json.get(brazo1,"usable")]
[h, if( json.get(brazo1,"nombre") == json.get(brazo2,"nombre") && listContains(usos,"1mano")): bono = bono -5]

[h, switch(acc),code:
case "cargar_sort": { 
	[h: setInitiative(1400 + mm + agi + bono)]		
};
case "lanzar_sort": { 
	[h: setInitiative(1200 + mm + agi + bono)]	
	[h: pasos=6]
};
case "cargar_proy": { 
	
	[h, if( json.get(brazo1,"tipoArma") == "Bow" ): b1 = 1 ; b1 = 0]
	[h, if( json.get(brazo2,"tipoArma") == "Bow" ): b2 = 1 ; b2 = 0]

	<!-- Se valida Que al menos una de las armas en mano, sea de proyectil-->
	[h: ErrorMsg( b1 + b2,"Debe tener un arma Proyectil en mano")]

	[h: setInitiative(1000 + mm + agi + bono)]		
};
case "disparar_proy": { 

	[h, if( json.get(brazo1,"tipoArma") == "Bow" ): b1 = 1 ; b1 = 0]
	[h, if( json.get(brazo2,"tipoArma") == "Bow" ): b2 = 1 ; b2 = 0]

	<!-- Se valida Que al menos una de las armas en mano, sea de proyectil-->
	[h: ErrorMsg( b1 + b2,"Debe tener un arma Proyectil en mano")]
	
	[h: setInitiative(800 + mm + agi + bono)]	
	
};
case "mov_manio": { 
	
	[h: setInitiative(600 + mm + agi + bono)]	
};
case "ataque_cac": { 
	
	[h: setInitiative(400 + mm + agi + bono)]		
};
case "desplazamiento": { 
	
	[h: setInitiative(200 + mm + agi + bono)]		
};
case "mov_estatico": { 
	
	[h: setInitiative(mm + agi + bono)]	};
default: { 
	
	[h: setInitiative(mm + agi + bono)]
	[h: pasos=0]
}]

[h: setProperty("Accion",acc,tok_id)]

[h: text = "La accion de " + tokName + " sera " + AccionToString(acc) ]

[h: ga = getProperty("GolpeActual",tok_id)]
[h: ga = setStrProp(ga,"pasos",pasos)]
[h: setProperty("GolpeActual",ga,tok_id)]

[h, if(isPC()): text = colorText(text,getProperty("color"))]

[h: sortInitiative()]
[r, if(isPC()), code:{
	{text }	
};{
	[h: broadcast(text, "gm")]	
}] 
[h: sortInitiative()]

@@guardarCambioAccion
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=21 ; color=default ; playerEditable=false ; applyToSelected=false ; group=Acciones ; tooltip= ; minWidth=120
<!--  guardarCambioAccion -->

[h: acc = arg(0)]
[h: tok_id = currentToken()]
[h: mm = getMovMan(getName(tok_id))]
[h: agi = getHoja("AGI",getName(tok_id))]

[h: gm = isGM()]
[h: owned = isOwner(getPlayerName(), tok_id)]
[h, if(gm ||  owned): ""; assert(0, colorText("No tenes permiso para usar este Personaje.","red"),0)]

[h, switch(acc),code:
case "mov_manio": { 
	[h: json =  json.set("{}", "accion", acc ,"desc",1)]
	[h: setInitiative(600 + mm + agi)]
	[h: text = "Realizara un movimiento o maniobra"]
};
case "ataque_cac": { 
	[h: json =  json.set("{}", "accion", acc ,"bo",100, "bd", 50, "arma" ,"Espada","desc",1)]
	[h: setInitiative(400 + mm + agi)]
	[h: text = "Atacara cuerpo a cuerpo"]
};
case "desplazamiento": { 
	[h: json =  json.set("{}", "accion", acc ,"desc",1)]
	[h: setInitiative(200 + mm + agi)]
	[h: text = "se desplazara"]
};
default: { 
	[h: json =  json.set("{}", "accion", acc ,"desc",1)]
	[h: setInitiative(mm + agi)]
}]

[h: setProperty("Accion",json,tok_id)]

[h: text = getName(tok_id)+ " Cambio de Accion y  " + text ]
[r,if (getName(tok_id) == "Neo"): colorText(text,"blue")]
[r,if (getName(tok_id) == "Kyoros"): colorText(text,"green")]

[h: sortInitiative()]

[h, if(isPC(tok_id)): broadcast(macroLink("<color='red'>", "actionFrame@lib:personajes", 'none', '', "selected"), getAllPlayerNames())]

@@mantenerOportunidad
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=2 ; color=default ; playerEditable=false ; applyToSelected=false ; group=Acciones ; tooltip=Muestra la accion del token actual en un frame ; minWidth=120
<!-- mantenerOportunidad-->
<!-- esta funcion se ejecuta cuando se cambia de asalto, a cada personaje que este esperando oportunidad le suma la iniciativa del token actual +1 -->
	
[h: tokenAccion = getInitiativeToken() ]
[h: tokenAccion = getName(tokenAccion)]
[h, token(tokenAccion):  ini = getInitiative()]
[h, if(ini == "null"): ini = 0]
[h, token(tokenAccion): iniciativaActualPlus1 = number(ini) - 0.1]

[h: json = getInitiativeList() ]
[h: tokens = json.get(json, "tokens")]
<!-- Pausa -->[h: mac = getMacroName()][h: puntop = 1][h, if(pausear()==1): pause("puntop","mac","tokens")]<!-- Pausa -->
[r, foreach(item, tokens, "<br>"),code:{ 
	[h: idTok = json.get(item,"tokenId")]
	[h: holdTok = json.get(item,"holding")]	
	[r: item]
	[h, if( holdTok == 'true' ),code:{ [ token(idTok):setInitiative(iniciativaActualPlus1)]}]	}]	
[h: sortInitiative()]

@@reiniciarAcciones
@PROPS@ fontColor=orange ; autoExecute=true ; fontSize=1.00em ; sortBy=1 ; color=blue ; playerEditable=false ; applyToSelected=false ; group=Acciones ; tooltip=Gasta una accion, y retorna cantidad de acciones hechas ; minWidth=120
<!-- reiniciarAcciones -->
[h: tokenName = arg(0)]
[h: token( tokenName ): setProperty("AccionPath",'{countAcciones: 3, accGratis: 1, accReaccion : 1, accReaccionEspecial : 0, accionesPosibles: 3}')	]

@@AllResolverAutoAtaqueProy
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=13 ; color=default ; playerEditable=false ; applyToSelected=false ; group=AutoCombate ; tooltip= ; minWidth=120
[h, code:{
[ arrayAtaques = arg(0)]

[ bono = 0 ]
[ inp = input(   
     "BONO|0|Bono|TEXT"
)]

[ if(inp > 0 ): bono = BONO]

[ cond = '{ setStates:["Muerto","Derrotado","Obligado a parar","Aturdido y Sin Poder parar","Derribado","Dormido","Aturdido"] }']
[ tokensQueNoAtacan = getTokenNames("json",cond)]

}]
[h, foreach(ataque,arrayAtaques),code:{ 
	
	[ name = json.fields(ataque)]
	
	[ pega = json.path.read(arrayAtaques,ataque+".pega")]	
	[ if( json.contains( tokensQueNoAtacan, name) ) :  pega = 0]	

	
	[ tgt = json.path.read(arrayAtaques,ataque+".objArq")]
	[ token(ataque): carga = getStrProp(CargaProyectil,"cargaProyectil") ]
	
	[ if(pega == 1 && carga == 1 ): ResolverAutoAtaqueProy( ataque, tgt, bono) ]
	[ if(carga == 0 ): carga = 1 ; carga = 0  ]
	[ token(ataque): CargaProyectil = setStrProp(CargaProyectil,"cargaProyectil",carga) ]
	[ if(carga == 1 ): broadcast( ataque + " Cargo una Flacha","gm")  ]
}]

@@AskForAutoCombat
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=default ; playerEditable=false ; applyToSelected=false ; group=AutoCombate ; tooltip= ; minWidth=
[H: inputStr = "[]"]
[H: inputStr2 = "[]"]

[h: inputStr2 = json.append(inputStr2,"automoves|COTINUAR?||LABEL|SPAN=TRUE")]

[h: inputStr = json.append(inputStr,"automoves|Ejecutar Auto moves?||LABEL|SPAN=TRUE")]

[H: input = input(json.toList(inputStr,"##"))]

[h,if(input),code:{ 
	[ foreach(tok,getTokensAuto()), if(getLabel(tok)=="auto"),code:{ 
		[ input = input(json.toList(inputStr2,"##"))]	
		[ goto(tok)]
		[AutoMove(tok)] 
	}] 
	
}]

@@AutoAtaqueProyectilV3
@PROPS@ fontColor=gray25 ; autoExecute=true ; fontSize=1.10em ; sortBy= ; color=pink ; playerEditable=false ; applyToSelected=false ; group=AutoCombate ; tooltip= ; minWidth=
[h: puntoGolpe = 50]

[h: resultados = ""]
[h: arqueros = ""]
[h: objetivos = ""]
[h: data = arg(0)]
[h,if(data==""): data = json.set("","nada",0)]
[h,if(json.contains(data,"arqueros")): arqueros = json.get(data,"arqueros")]
[h,if(json.contains(data,"objetivos")): objetivos = json.get(data,"objetivos")]

[h: delim = json.set("","selected",1,"unsetStates",json.append("","Muerto","Aturdido","Aturdido y Sin Poder parar","Derrotado","Obligado a parar") )]

[h: delim2 = json.set("","selected",1,"unsetStates",json.append("","Muerto","Derrotado") )]

[h,if(json.contains(data,"defineArqueros")): arqueros = getTokenNames(",",delim)]
[h,foreach(arc, arqueros): grupoArqueros = getProperty(grupo,arc) ]
[h: pause("grupoArqueros")]
[h,if(json.contains(data,"defineObjetivos")): objetivos = getTokenNames(",",delim2)]
[h, foreach(obj, objetivos),code:{
	[ pause("grupoArqueros")]
	[ token(obj),if( grupo == grupoArqueros ): json.remove(objetivos,obj) ]
}]

[h: jsonArqueros = json.fromList(arqueros)]
[h: jsonObjetivos = json.fromList(objetivos)]

<!--   calculo de bonos-->
[h: bonoDistancia = 0]
[h: bonoCantidad = 0]
[h: dist = "-"]
[h: cArq = json.length(jsonArqueros)]
[h: cObj = json.length(jsonObjetivos)]

[h, if(cArq>0 && cObj>0),code:{
	[ token(json.get(jsonArqueros,0)): dist = getDistance(json.get(jsonObjetivos,0))]
	[bonoDistancia = ((dist-30)/5) * -2.5]
}]

[h: processorLink =macroLinkText('AutomaticMissilesMacro@lib:asaltos',"all")]

[gm, frame("AutomaticMissiles"):{
 <html>
    <head>
    <title>Misiles Automaticos</title>
    </head>
    <body>
     <form name="misilesForm" action="[r:processorLink]" method="json">

	<h4>Bonos</h4>
	Bono Distancia([r: dist] mts) <input size="5" name="bonoDistancia" type="text" value ="[r: bonoDistancia]" /><br/>

    <h5>Arqueros</h5>
	<input type="text"	value="[r, foreach(arq,arqueros,","): arq]" name="arqueros"/>
	
	<input name="defineArqueros" value="Definir Arqueros" type="submit" ></input>	

	<h5>objetivos</h5>
	<input type="text"	value="[r, foreach(obj,objetivos,","): obj ]" name="objetivos" />
	
	<input name="defineObjetivos" value="Definir Objetivos" type="submit" ></input>	

	<hr/>
	<input name="calcular" value="calcular" type="submit" ></input>	

	<h5>Resultados</h5>

	[h,if(json.contains(data,"calcular")): resultados = json.objrolls(jsonArqueros,"dado","1d100")]
	
		
			[h, foreach(rdo,resultados),code:{ 
				[ rdoFinal = json.path.read(resultados,rdo+".dado")+bonoDistancia]
				[ jsonRdo = json.get(resultados,rdo)]
				
				[ token( rdo ): bo = getBoActual( rdo , Brazo1 )]
				[  boBono = bo/10 ]
				[ rdoFinal = rdoFinal + boBono ]
				
				[ jsonRdo = json.set(jsonRdo,"rdoFinal",rdoFinal)]
				[ pega = (rdoFinal>puntoGolpe)]
				[ jsonRdo = json.set( jsonRdo , "pega" , pega )]
				[ objArq = ""]
				[ if(pega == 1): objArq = json.get( json.shuffle( jsonObjetivos ), 0 ) ]
				
				[ jsonRdo = json.set( jsonRdo , "objArq" , objArq )]
				
				[ resultados = json.set(resultados,rdo,jsonRdo )]

			}]
			
		<table border="1">
				[r, foreach(rdo,resultados,""),code:{
					
					<tr>	
						<td>[r: rdo]</td>
						<td>[r: json.path.read(resultados,rdo+".rdoFinal")]</td>
						<td>[r: json.path.read(resultados,rdo+".pega")]</td>
						<td>[r,if(json.path.read(resultados,rdo+".pega") == 1): json.path.read(resultados,rdo+".objArq") ]</td>
						<td>[r,if(json.path.read(resultados,rdo+".pega") == 1): macroLink("Atacar","DeclararAtaqueProyectilV3@lib:asaltos","GM", json.append( rdo , json.path.read(resultados,rdo+".objArq"))) ]</td>
						<td>[r,if(json.path.read(resultados,rdo+".pega") == 1): macroLink("Auto","AutoAtaqueProyectilV3@lib:asaltos","GM", json.append( rdo , json.path.read(resultados,rdo+".objArq"))) ]</td>
						
					</tr>
				}]
			</table>

	
	</form>
</body>
</html>

}]

@@AutoCombatir
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=default ; playerEditable=false ; applyToSelected=false ; group=AutoCombate ; tooltip=Recibe lista simple de nombres de tokens y los hace combatir ; minWidth=
[h, code:{ 

[ tokens = arg(0)]
[ if(listCount(tokens)!=2): ErrorMsg(1,"Debes seleccionar 2 Tokenes para que combatan")]

[ token1 = listGet(tokens,0)]
[ token2 = listGet(tokens,1)]

[ mm1 =  getMovMan(token1)]
[ mm2 =  getMovMan(token2)]

[ if( mm1 > mm2 ): token1 = listGet(tokens,0) ; token1 = listGet(tokens,1) ]
[ if( mm2 < mm1 ): token2 = listGet(tokens,1) ; token2 = listGet(tokens,0) ]

	[ token(token1): ga = getProperty("GolpeActual") ]
	[ ca = getStrProp(ga,"countAtaques") ]
	
	[ token(token1), if( ca==0 && !getState("Aturdido") && !getState("Obligado a parar") && !getState("Aturdido y Sin Poder parar") && !getState("Derrotado") && !getState("Muerto") && !getState("Dormido")): ResolverAutoAtaque(token1,token2) ]

<!-- CONTRAATAQUE -->

	[ token(token2): ga = getProperty("GolpeActual") ]
	[ ca = getStrProp(ga,"countAtaques") ]
	
	[ token(token2), if( ca==0 && !getState("Aturdido") && !getState("Obligado a parar") && !getState("Aturdido y Sin Poder parar") && !getState("Derrotado") && !getState("Muerto") && !getState("Dormido")): ResolverAutoAtaque(token2,token1)]

}]

@@AutomaticMissilesMacro
@PROPS@ fontColor=gray25 ; autoExecute=true ; fontSize=1.10em ; sortBy= ; color=pink ; playerEditable=false ; applyToSelected=false ; group=AutoCombate ; tooltip= ; minWidth=
[h: puntoGolpe = 50]

[h: resultados = ""]
[h: arqueros = ""]
[h: objetivos = ""]
[h: data = arg(0)]
[h,if(data==""): data = json.set("","nada",0)]
[h,if(json.contains(data,"arqueros")): arqueros = json.get(data,"arqueros")]
[h,if(json.contains(data,"objetivos")): objetivos = json.get(data,"objetivos")]

[h: delim = json.set("","selected",1,"unsetStates",json.append("","Muerto","Aturdido","Aturdido y Sin Poder parar","Derrotado","Obligado a parar") )]

[h: delim2 = json.set("","selected",1,"unsetStates",json.append("","Muerto","Derrotado") )]

[h,if(json.contains(data,"defineArqueros")): arqueros = getTokenNames(",",delim)]
[h,foreach(arc, arqueros): grupoArqueros = getProperty("grupo",arc) ]

[h,if(json.contains(data,"defineObjetivos")): objetivos = getTokenNames(",",delim2)]
[h, foreach(obj, objetivos),code:{
	[ indice = listFind(objetivos,obj) ] 
	[ token(obj),if( grupo == grupoArqueros ): objetivos = listDelete(objetivos,indice) ]
}]
[h: jsonArqueros = json.fromList(arqueros)]
[h: jsonObjetivos = json.fromList(objetivos)]

<!--   calculo de bonos-->
[h: bonoDistancia = 0]
[h: bonoCantidad = 0]
[h: dist = "-"]
[h: cArq = json.length(jsonArqueros)]
[h: cObj = json.length(jsonObjetivos)]

[h, if(cArq>0 && cObj>0),code:{
	[ token(json.get(jsonArqueros,0)): dist = getDistance(json.get(jsonObjetivos,0))]
	[ bonoDistancia = ((dist-30)/5) * -2.5]
}]

[h: processorLink =macroLinkText('AutomaticMissilesMacro@lib:asaltos',"all")]

[gm, frame("AutomaticMissiles"):{
 <html>
    <head>
    <title>Misiles Automaticos</title>
    </head>
    <body>
     <form name="misilesForm" action="[r:processorLink]" method="json">

	<h4>Bonos</h4>
	Bono Distancia([r: dist] mts) <input size="5" name="bonoDistancia" type="text" value ="[r: bonoDistancia]" /><br/>

    <h5>Arqueros</h5>
	<input type="text"	value="[r, foreach(arq,arqueros,","): arq]" name="arqueros"/>
	
	<input name="defineArqueros" value="Definir Arqueros" type="submit" ></input>	

	<h5>objetivos</h5>
	<input type="text"	value="[r, foreach(obj,objetivos,","): obj ]" name="objetivos" />
	
	<input name="defineObjetivos" value="Definir Objetivos" type="submit" ></input>	

	<hr/>
	<input name="calcular" value="calcular" type="submit" ></input>	

	<h5>Resultados</h5>

	[h,if(json.contains(data,"calcular")): resultados = json.objrolls(jsonArqueros,"dado","1d100")]
	
		
			[h, foreach(rdo,resultados),code:{ 
				[ rdoFinal =  json.path.read(resultados,rdo+".dado")  +  bonoDistancia]
				[ jsonRdo = json.get( resultados , rdo )]
				
				[ token( rdo ): bo = getBoActual( rdo , Brazo1 )]
				[  boBono = bo/5 ]
				[ rdoFinal = rdoFinal + boBono ]
				
				[ jsonRdo = json.set(jsonRdo,"rdoFinal",rdoFinal)]
				[ pega = (rdoFinal>puntoGolpe)]
				[ jsonRdo = json.set( jsonRdo , "pega" , pega )]
				[ objArq = ""]
				[ if(pega == 1): objArq = json.get( json.shuffle( jsonObjetivos ), 0 ) ]
				
				[ jsonRdo = json.set( jsonRdo , "objArq" , objArq )]
				
				[ resultados = json.set(resultados,rdo,jsonRdo )]

			}]

		<!--  -->
			
		<table border="1">
				[r, foreach(rdo,resultados,""),code:{
					
					<tr>	
						<td>[r: rdo]</td>
						<td>[r: json.path.read(resultados,rdo+".rdoFinal")]</td>
						<td>[r: json.path.read(resultados,rdo+".pega")]</td>
						<td>[r,if(json.path.read(resultados,rdo+".pega") == 1): json.path.read(resultados,rdo+".objArq") ]</td>
						<td>[r,if(json.path.read(resultados,rdo+".pega") == 1): macroLink("Atacar","DeclararAtaqueProyectilV3@lib:asaltos","GM", json.append( rdo , json.path.read(resultados,rdo+".objArq"))) ]</td>
						<td>[r,if(json.path.read(resultados,rdo+".pega") == 1): macroLink("Auto","ResolverAutoAtaqueProy@lib:asaltos","GM", json.append( rdo , json.path.read(resultados,rdo+".objArq"))) ]</td>
						
					</tr>
				}]
			</table>
			<span>[r: macroLink("Resolver Todos","AllResolverAutoAtaqueProy@lib:asaltos","GM", resultados )]</span>
	
	</form>
</body>
</html>

}]

@@AutomaticMissilesMacro_2
@PROPS@ fontColor=gray25 ; autoExecute=true ; fontSize=1.10em ; sortBy= ; color=pink ; playerEditable=false ; applyToSelected=false ; group=AutoCombate ; tooltip= ; minWidth=
[h: tknAutoArrow = "AUTOARROW"]
[h: puntoGolpe = 50]
[h: grupoArqueros=""]

[h: bonoDistancia = 0]
[h: bonoDanio = 0]
[h: resultados = ""]

[h: arqueros = ""]
[h: objetivos = ""]
[h: data = arg(0)]

[h,if(data==""): data = json.set("","nada",0)]

[h,token(tknAutoArrow): arrayActual = getNotes()]
[h, if(arrayActual == ""): arrayActual = "{}"]

[h: allArqueros = json.path.read(arrayActual,"*.arqueros.*")]
	

[h,if(json.contains(data,"arqueros")): arqueros = json.get(data,"arqueros")]
[h: arqueros = json.fromList(arqueros,",")]

[h,if(json.contains(data,"objetivos")): objetivos = json.get(data,"objetivos")]
[h: objetivos = json.fromList(objetivos,",")]

[h: delim = json.set("","selected",1,"unsetStates",json.append("","Muerto","Aturdido","Aturdido y Sin Poder parar","Derrotado","Obligado a parar") )]

[h: delim2 = json.set("","selected",1,"unsetStates",json.append("","Muerto","Derrotado") )]

[h,if(json.contains(data,"defineArqueros")): arqueros = getTokenNames("json",delim)]

[h: arqueros = json.removeAll(arqueros,allArqueros)]

[h,foreach(arc, arqueros): grupoArqueros = getProperty("grupo",arc) ]

[h,if(json.contains(data,"defineObjetivos")): objetivos = getTokenNames("json",delim2)]
[h, foreach(obj, objetivos),code:{
	[ indice = listFind(objetivos,obj) ] 
	[ token(obj),if( grupo == grupoArqueros ): objetivos = json.remove(objetivos,indice) ]
}]

[h: jsonArqueros = arqueros]
[h: jsonObjetivos = objetivos]

[h,if(json.contains(data,"bonoDanio")): bonoDanio = json.get(data,"bonoDanio")]

	

	
	
	[h: cantOleadas = json.length(arrayActual)]
	[h: jsonOleada = json.set("","arqueros",arqueros,"objetivos",objetivos,"bono",bonoDanio,"ultAsalto",0)]
	[h, if(json.contains(data,"Cargar") && json.length(arqueros) > 0): arrayActual = json.set(arrayActual, "oleada_" + cantOleadas , jsonOleada )]

[h, if(json.contains(data,"Reset")): arrayActual = "{}"]
[h,token(tknAutoArrow): setNotes( json.indent(arrayActual))]	

<!--   calculo de bonos-->

[h: bonoCantidad = 0]
[h: dist = "-"]

[h: processorLink =macroLinkText('AutomaticMissilesMacro_2@lib:asaltos',"all")]

[gm, frame("AutomaticMissiles"):{
 <html>
    <head>
    <title>Misiles Automaticos</title>
    </head>
    <body>
     <form name="misilesForm" action="[r:processorLink]" method="json">

	<h4>Bonos</h4>
	Bono Distancia([r: dist] mts) <input size="5" name="bonoDistancia" type="text" value ="[r: bonoDistancia]" /><br/>

	Bono Daño <input size="5" name="bonoDanio" type="text" value ="[r: bonoDanio]" /><br/>

    <h5>Arqueros (<b>[r: grupoArqueros]</b>)</h5>
    <input type="hidden" value="[r, foreach(arq,arqueros,','): arq]" name="arqueros"/>
	<textarea rows="[r: json.length(arqueros)]"	name="show_arqueros">[r, foreach(arq,arqueros,"&#10;"): arq]</textarea>
	
	<input name="defineArqueros" value="Definir Arqueros" type="submit" ></input>	

	<h5>OBJETIVOS</h5>
	<input type="hidden"	value="[r, foreach(obj,objetivos,","): obj ]" name="objetivos" />
	<textarea rows="[r: json.length(objetivos)]" name="show_objetivos">[r, foreach(obj,objetivos,"&#10;"): obj]</textarea>
	
	<input name="defineObjetivos" value="Definir Objetivos" type="submit" ></input>	

	

	<hr/>
	<input name="Cargar" value="Cargar" type="submit" ></input>	
	<input name="Reset" value="reset" type="submit" ></input>	

		
		<table border="1" align="left">
			[r, foreach(oleadaName,arrayActual,""),code:{ 
				[h: oleada = json.get(arrayActual,oleadaName)]

				<tr>	
						<th >[r: oleadaName ]</th><td colspan="2">[r: json.get(oleada,"bono") ]</td>
				</tr>
			<tr>
				<td align="left"><ul>
					[r, foreach( arcName , json.get(oleada,"arqueros"),"</li>" ): strformat("<li>%{arcName}") ]
					</ul>
				</td>
				<td align="left"><ul>
					[r, foreach( objName , json.get(oleada,"objetivos"),"</li>" ): strformat("<li>%{objName}") ]
					</ul>
				</td>
				<td align="left"><ul>
					[r, if( json.get(oleada,"ultAsalto") < getInitiativeRound() ):  macroLink("Auto","DoOleadaAutoMissiles@lib:asaltos","GM", oleadaName) ; "DONE" ]
				</td>
			
			</tr>
			}]
			
		</table>
		<!--  -->
			
		<table border="1">
				[r, foreach(rdo,resultados,""),code:{
					
					<tr>	
						<td>[r: rdo]</td>
						<td>[r: json.path.read(resultados,rdo+".rdoFinal")]</td>
						<td>[r: json.path.read(resultados,rdo+".pega")]</td>
						<td>[r,if(json.path.read(resultados,rdo+".pega") == 1): json.path.read(resultados,rdo+".objArq") ]</td>
						<td>[r,if(json.path.read(resultados,rdo+".pega") == 1): macroLink("Atacar","DeclararAtaqueProyectilV3@lib:asaltos","GM", json.append( rdo , json.path.read(resultados,rdo+".objArq"))) ]</td>
						<td>[r,if(json.path.read(resultados,rdo+".pega") == 1): macroLink("Auto","ResolverAutoAtaqueProy@lib:asaltos","GM", json.append( rdo , json.path.read(resultados,rdo+".objArq"))) ]</td>
						
					</tr>
				}]
			</table>
			<span>[r: macroLink("Resolver Todos","AllResolverAutoAtaqueProy@lib:asaltos","GM", resultados )]</span>
	
	</form>
</body>
</html>

}]

@@DoOleadaAutoMissiles
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=default ; playerEditable=false ; applyToSelected=false ; group=AutoCombate ; tooltip= ; minWidth=
[h: tknAutoArrow = "AUTOARROW"]
[h: puntoGolpe = 50]
[h: oleada = arg(0)]
[h,token(tknAutoArrow): json = getNotes()]

[h: jsonArqueros = json.path.read(json,oleada + ".arqueros") ]
[h: jsonObjetivos = json.path.read(json,oleada + ".objetivos") ]
[h: obj1 = json.get(jsonObjetivos , 0)]

[h: resultados = json.objrolls(jsonArqueros,"dado","1d100")]

[h, foreach(rdo,resultados),code:{ 

				[ token(rdo): dist = getDistance( obj1 )]
				[ bonoDistancia = ( (dist-30)/5) * -2.5]
				[ bonoDistancia = math.floor( bonoDistancia ) ]
	
				[ rdoFinal =  json.path.read(resultados,rdo+".dado")  +  bonoDistancia]
				[ jsonRdo = json.get( resultados , rdo )]
				
				[ token( rdo ): bo = getBoActual( rdo , Brazo1 )]
				[  boBono = bo/5 ]
				[ rdoFinal = rdoFinal + boBono ]
				
				[ jsonRdo = json.set(jsonRdo,"rdoFinal",rdoFinal)]
				[ pega = (rdoFinal>puntoGolpe)]
				[ jsonRdo = json.set( jsonRdo , "pega" , pega )]
				[ objArq = ""]
				[ if(pega == 1): objArq = json.get( json.shuffle( jsonObjetivos ), 0 ) ]
				
				[ jsonRdo = json.set( jsonRdo , "objArq" , objArq )]
				
				[ resultados = json.set(resultados,rdo,jsonRdo )]
				
}]

[r: AllResolverAutoAtaqueProy(resultados)]

[h: json = json.path.set(json, oleada+".ultAsalto", getInitiativeRound() ) ]

[h, token(tknAutoArrow): setNotes(json)]
[h: AutomaticMissilesMacro_2()]

@@ResolverAutoAtaque
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=13 ; color=default ; playerEditable=false ; applyToSelected=false ; group=AutoCombate ; tooltip= ; minWidth=120
<!--

lista de comabtes
tok1 vs tok2

tok1 -> tok2
tok2 -> tok1

--- 
definir atk y tgt

cant bo
cant bd y usa escudo

Dados bo

calculo daño

Edicion de critico

Aplicar danios

-->
[h, code:{

[ tokenAtk = arg(0)]
[ tokenTgt = arg(1)]

[ style1="style='background-color: #9FCBCD;'" ]
[ style2="style='background-color: yellow;'" ]

[ centrarEn(tokenAtk)]

[ link1= macroLinkText("centrarEn@Lib:Personajes","",tokenAtk)]
[ link2= macroLinkText("centrarEn@Lib:Personajes","",tokenTgt)]

[ tokenAtkLbl = "<strong>" + tokenAtk + "</strong>"]
[ token(tokenAtk): srcImg1 = getTokenImage()]
[ tokenAtkimg = strformat("<a href='"+link1+"'><img src='%{srcImg1}' width='40' /></a>")]
[ tokenTgtLbl = "<strong>" + tokenTgt + "</strong>"]
[ token(tokenTgt): srcImg2 = getTokenImage()]
[ tokenTgtimg = strformat("<a href='"+link2+"'><img src='%{srcImg2}' width='40'/></a>")]

[ fila1 = strformat("<table border='0' height='100%' width='100%'><tr><td>%{tokenAtkimg}<br/>%{tokenAtk}</td></tr><tr><td align='right'>%{tokenTgtimg}<br/>%{tokenTgt}</td></tr></table>")]

<!-- **********  Arma1, si no hay: uso pelea  **********-->
[token(tokenAtk), if(json.type(brazo1) != "OBJECT"): brazo1 = table("Weapons",0)]
[token(tokenAtk), if(json.type(brazo2) != "OBJECT"): brazo2 = table("Weapons",0)]
[token(tokenAtk), if(json.type(brazo1) != "OBJECT"): tipoAtaque=="2Manos"]
[token(tokenAtk): bonoArma = json.get(brazo1,"bonoBO") ] 
[if (bonoArma==""): bonoArma = 0]

<!-- **********  Obtengo la BO y busco modificadores  **********-->
[token(tokenAtk): boact = getBoActual(getName(),brazo1) ]
[ if(pausear()==1): pause("boact")]

[token(tokenAtk): tipoAtaque = getStrProp(GolpeActual,"tipoAtaque")]
[token(tokenAtk): boUsadaAtk = getStrProp(GolpeActual,"boUsada")]
[token(tokenAtk): nombreArma = json.get(brazo1,"nombre")]
[if(tipoAtaque==""),code:{
	[token(tokenAtk),if(json.get(brazo1,"nombre")==json.get(brazo2,"nombre")): tipoAtaque=="2Manos"]
	[token(tokenAtk),if(tipoAtaque=="" && (json.contains(brazo1, "criticos") && json.contains(brazo2, "criticos"))): tipoAtaque=="2Armas" ]
	[if(tipoAtaque==""): tipoAtaque=="1Mano"]
}] 

[ midbo = (boAct / 2)] 
[ midbo = round(midbo)]

[ if(boUsadaAtk>0): boSeleccionada = boAct-boUsadaAtk ; boSeleccionada = midbo +  eval("1d"+midbo) ]
[ token(tokenAtk): GolpeActual = setStrProp(GolpeActual,"boUsada",boSeleccionada)]

[ fila2 = strformat("<tr ><td>BO(%{nombreArma})</td><th>%{boSeleccionada}/%{boAct}</th></tr>")]

<!-- ********** Guardo los nuevos Datos dentro del golpeActual temporalmente  **********-->
[token(tokenAtk): GolpeActual = setStrProp(GolpeActual,"boTmp",boSeleccionada)]
[token(tokenAtk): GolpeActual = setStrProp(GolpeActual,"target",tokenTgt)]
[token(tokenAtk): GolpeActual = setStrProp(GolpeActual,"boUsadaTmp",boSeleccionada)]

[token(tokenTgt): varsFromStrProp(getProperty("GolpeActual"))]

<!-- **********  Obtengo la BO y busco modificadores  **********-->
[token(tokenTgt): boact =  getBoActual(tokenTgt,brazo1)]

[ boniOfen =  number(boact) - number(boUsada)]
[token(tokenTgt), if (BonoBOFija == ""): BonoBOFija = 0 ; BonoBOFija = getProperty("BonoBOFija")]
[ boniOfen = number(boniOfen) + number(BonoBOFija)]
[token(tokenTgt): armaTgt =  json.get(brazo1,"nombre")]

<!-- **********  Obtengo la BD **********-->
[token(tokenTgt): bdAgi =  getHoja("BD",tokenTgt) ]
[ bonoAgi = number(bdAgi) - number(agiUsada) ]
[ token(tokenTgt),if (BonoBDFija == ""): BonoBDFi = 0 ; BonoBDFi = BonoBDFija ]

[ token(tokenTgt): pvactual = PV]
[ if(pausear()==1): pause("pvactual")]

<!-- **********  Ver si tiene Escudo **********-->
[token(tokenTgt): bdEscudo = json.get(brazo2,"bonoBD")]

[ if (bdEscudo == "" || escudoUsado ==1): bdEscudo = 0]

<!--Si tiene bousada, ya ataco, por ende usa toda la bo restanto para atacar, nos e guarda nada -->
[ midBoTgt = boniOfen / 2 ]
[ midBoTgt = round(midBoTgt) ]
[ if(boUsada>0): boParada = boniOfen ; boParada = eval("1d"+midBoTgt) ]

[ token(tokenTgt): GolpeActual = setStrProp(GolpeActual,"boUsada",boParada)]

[ bdTotal = bonoAgi + boParada + bdEscudo]

[ fila3 = strformat("<tr><td %{style1}>BD(%{armaTgt})</td><th>-%{bdTotal}  (agi:%{bonoAgi},P.:%{boParada})</th></tr>")]

[ if(bdEscudo > 0): fila3 = strformat("<tr ><td>BD(%{armaTgt})</td><th>-%{bdTotal}  (agi:%{bonoAgi},P.:%{boParada},Esc.:%{bdEscudo})</th></tr>")]	

[ dados = DadoAbiertoArriba()]

[ fila5 = strformat("<tr ><td>DADOS</td><th>%{dados}</th></tr>")]

[ danioSubFinal = boSeleccionada + dados - bdTotal]

<!-- CALCULO DE DANIO  -->

[ arma1 = getProperty("brazo1",tokenAtk)]
[ arma2 = getProperty("brazo2",tokenAtk)]

[ token(tokenAtk): tipoAtaque = getStrProp(golpeActual,"tipoAtaque")]  

[ tablaDanio = json.get(arma1,"danio")]
[ tablasCritico = json.get(arma1,"criticos")]  
[ tablaCrit = indexKeyStrProp(tablasCritico,0)]

[ criticos=""]

[ armadura = getProperty("armadura",tokenTgt)]

[ danios = table( tablaDanio , danioSubFinal )]
[ token(tokenTgt): armObj = getTipoArm( armadura ) + armadura ]
[ danioStrProp = decode( json.get( danios , armObj ) )]
[ token(tokenTgt): pvactual = PV]
[ if(pausear()==1): pause("pvactual")]

[ punVida = getStrProp(danioStrProp,"pv")]
[ grCritico = getStrProp(danioStrProp,"gr")]
[ tablaLbl = replace(tablaCrit,"critico","")]

[ if(grCritico!=""): fila6 = strformat("<tr ><td>SubTotal</td><th>%{danioSubFinal}(%{punVida} pv; %{grCritico} %{tablaLbl})</th></tr>") ; fila6 =
strformat("<tr ><td>SubTotal</td><th>%{danioSubFinal}  (%{punVida} pv;)</th></tr>")]

[ fila7=""]
[ if ( getStrProp(danioStrProp,"gr") != "" ): tabla =  tablaCrit + "_" + grCritico ]
[ if ( getStrProp(danioStrProp,"gr") != "" ): rdoCritico = table(tabla); rdoCritico = ""]
[ if ( rdoCritico != "" ):  fila7 =  "<tr><td colspan='3'><table "+style2+"><tr><td>"+getStrProp(rdoCritico,"Desc")+"</td></tr></table></td></tr>" ]
[ token(tokenTgt): pvactual = PV]

[ data = rdoCritico]
[ data = setStrProp(data,"tokenAtk",tokenAtk)]
[ data = setStrProp(data,"target",tokenTgt)]
[ data = setStrProp(data,"pv",punVida)]

[ token(tokenAtk): countAttaques = getStrProp(GolpeActual,"countAtaques") ]
[ token(tokenAtk): GolpeActual = setStrProp(GolpeActual,"countAtaques",(countAttaques+1)) ]

[ token(tokenTgt): pvactual = PV]

[ fila9 = "<tr><td colspan='3'>"+AplicarDanios(data) + "</td></tr>"]

[ broadcast(strformat("<table %{style1} width='100%' border='1'><tr><td rowspan='5' width='15%'>%{fila1}</td><th colspan='2'>AUTO ATAQUE</th></tr>%{fila2}%{fila3}%{fila5}%{fila6}%{fila7}%{fila9}"),"gm")]
}]

@@ResolverAutoAtaqueProy
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=13 ; color=default ; playerEditable=false ; applyToSelected=false ; group=AutoCombate ; tooltip= ; minWidth=120
<!--

lista de comabtes
tok1 vs tok2

tok1 -> tok2
tok2 -> tok1

--- 
definir atk y tgt

cant bo
cant bd y usa escudo

Dados bo

calculo daño

Edicion de critico

Aplicar danios

-->
[h, code:{

[ tokenAtk = arg(0)]
[ tokenTgt = arg(1)]
<!-- Bono especial, por si los targets se cubren o hacen una formacion especial. -->
[ if(json.length(macro.args)> 2): bonoEspecial = arg(2) ; bonoEspecial = 0 ]

[ style1="style='background-color: #9FCBCD;'" ]
[ style2="style='background-color: yellow;'" ]

[ centrarEn(tokenTgt)]

[ token(tokenAtk): countAtaques = getStrProp(GolpeActual,"countAtaques") ]

[ if(pausear()==1): pause("countAtaques")]

[ if(countAtaques > 0): ErrorMsg(1,tokenAtk + " ya ataco.") ]
[ if(countAtaques > 0): abort(0) ]

[ link1= macroLinkText("centrarEn@Lib:Personajes","",tokenAtk)]
[ link2= macroLinkText("centrarEn@Lib:Personajes","",tokenTgt)]

[ tokenAtkLbl = "<strong>" + tokenAtk + "</strong>"]
[ token(tokenAtk): srcImg1 = getTokenImage()]
[ tokenAtkimg = strformat("<a href='"+link1+"'><img src='%{srcImg1}' width='40' /></a>")]
[ tokenTgtLbl = "<strong>" + tokenTgt + "</strong>"]
[ token(tokenTgt): srcImg2 = getTokenImage()]
[ tokenTgtimg = strformat("<a href='"+link2+"'><img src='%{srcImg2}' width='40'/></a>")]

[ fila1 = strformat("<table border='0' height='100%' width='100%'><tr><td>%{tokenAtkimg}<br/>%{tokenAtk}</td></tr><tr><td align='right'>%{tokenTgtimg}<br/>%{tokenTgt}</td></tr></table>")]

[ token(tokenAtk): arco = brazo1]

<!-- **********  Veo el Arco, si no hay: uso pelea  **********-->
[ token(tokenAtk), if(json.type(arco) != "OBJECT"): ErrorMsg(1,"Debe tener Arco en la mano")]

[ token(tokenAtk): bonoArma = json.get(arco,"bonoBO") ] 
[ if (bonoArma==""): bonoArma = 0]

<!-- **********  Obtengo la BO y busco modificadores  **********-->
[ token(tokenAtk): boact = getBoActual(getName(),arco) ]
[ if(pausear()==1): pause("boact")]

[ token(tokenAtk): nombreArma = json.get(arco,"nombre")]

[ token(tokenAtk): GolpeActual = setStrProp(GolpeActual,"boUsada",boact)]

<!-- ********** Calculando Rango  **********-->

[ rangoDeToken = tokenRango(tokenAtk,tokenTgt,arco) ]
[ bonoRango = getStrProp(rangoDeToken,"bonif")]

[ fila2 = strformat("<tr ><td>BO(%{nombreArma})</td><th>%{boact} / Rango: %{bonoRango}</th></tr>")]

<!-- ********** Guardo los nuevos Datos dentro del golpeActual temporalmente  **********-->
[ token(tokenAtk): GolpeActual = setStrProp(GolpeActual,"boTmp",boact)]
[ token(tokenAtk): GolpeActual = setStrProp(GolpeActual,"target",tokenTgt)]
[ token(tokenAtk): GolpeActual = setStrProp(GolpeActual,"boUsadaTmp",boact)]

[ token(tokenTgt): varsFromStrProp(getProperty("GolpeActual"))]

<!-- **********  Obtengo la BO y busco modificadores  **********-->
[ token(tokenTgt): boactTgt =  getBoActual(tokenTgt,brazo1)]

[ boniOfenTgt =  number(boactTgt) ]
[ token(tokenTgt), if (BonoBOFija == ""): BonoBOFija = 0 ; BonoBOFija = getProperty("BonoBOFija")]
[ boniOfenTgt = number(boniOfenTgt) + number(BonoBOFija)]
[ token(tokenTgt): armaTgt =  json.get(brazo1,"nombre")]

<!-- **********  Obtengo la BD **********-->
[ token(tokenTgt): bdAgi =  getHoja("BD",tokenTgt) ]
[ bonoAgi = number(bdAgi) - number(agiUsada) ]
[ token(tokenTgt),if (BonoBDFija == ""): BonoBDFi = 0 ; BonoBDFi = BonoBDFija ]

<!-- ********** Defensax brisa **********-->
[h: brisa= getTokenNames("json",'{"A_Brisa_6":1}')]
[h, if(json.contains(brisa,tokenTgt)): bonoAgi = bonoAgi + 30 ]

[ token(tokenTgt): pvactual = PV]
[ if(pausear()==1): pause("pvactual")]

<!-- **********  Ver si tiene Escudo **********-->
[ token(tokenTgt): bdEscudo = json.get(brazo2,"bonoBD")]

[ if (bdEscudo == "" || escudoUsado ==1): bdEscudo = 0]

<!--la Bo de parada es la mitad solo si tiene escudo -->
[  if(bdEscudo>0): boParada = boniOfenTgt/2  ; boParada = 0]

[ token(tokenTgt): GolpeActual = setStrProp(GolpeActual,"boUsada",boParada)]

[ bdTotal = bonoAgi + boParada + bdEscudo]

[ fila3 = strformat("<tr><td %{style1}>BD(%{armaTgt})</td><th>-%{bdTotal}  (agi:%{bonoAgi},P.:%{boParada})</th></tr>")]

[ if(bdEscudo > 0): fila3 = strformat("<tr ><td>BD(%{armaTgt})</td><th>-%{bdTotal}  (agi:%{bonoAgi},P.:%{boParada},Esc.:%{bdEscudo})</th></tr>")]	

[ dados = DadoAbiertoArriba()]

[ fila5 = strformat("<tr ><td>DADOS</td><th>%{dados}</th></tr>")]

[ danioSubFinal = boact + dados - bdTotal + bonoEspecial]
[ danioSubFinal = round(danioSubFinal)]
[ if(pausear()==1): pause("boact","danioSubFinal","bdTotal","dados")]

<!-- CALCULO DE DANIO  -->

[ arma1 = getProperty("brazo1",tokenAtk)]
[ arma2 = arma1]

[ token(tokenAtk): tipoAtaque = getStrProp(golpeActual,"tipoAtaque")]  

[ tablaDanio = json.get(arma1,"danio")]
[ tablasCritico = json.get(arma1,"criticos")]  
[ tablaCrit = indexKeyStrProp(tablasCritico,0)]

[ criticos=""]

[ armadura = getProperty("armadura",tokenTgt)]
[ if(pausear()==1): pause("tablaDanio","danioSubFinal")]
[ danios = table( tablaDanio , danioSubFinal )]

[ token(tokenTgt): armObj = getTipoArm( armadura ) + armadura ]
[ danioStrProp = decode( json.get( danios , armObj ) )]
[ token(tokenTgt): pvactual = PV]
[ if(pausear()==1): pause("pvactual")]

[ punVida = getStrProp(danioStrProp,"pv")]
[ grCritico = getStrProp(danioStrProp,"gr")]
[ tablaLbl = replace(tablaCrit,"critico","")]

[ if(grCritico!=""): fila6 = strformat("<tr ><td>SubTotal</td><th>%{danioSubFinal}(%{punVida} pv; %{grCritico} %{tablaLbl})</th></tr>") ; fila6 =
strformat("<tr ><td>SubTotal</td><th>%{danioSubFinal}  (%{punVida} pv;)</th></tr>")]

[ fila7=""]
[ if ( getStrProp(danioStrProp,"gr") != "" ): tabla =  tablaCrit + "_" + grCritico ]
[ if ( getStrProp(danioStrProp,"gr") != "" ): rdoCritico = table(tabla); rdoCritico = ""]
[ if ( rdoCritico != "" ):  fila7 =  "<tr><td colspan='3'><table "+style2+"><tr><td>"+getStrProp(rdoCritico,"Desc")+"</td></tr></table></td></tr>" ]
[ token(tokenTgt): pvactual = PV]

[ data = rdoCritico]
[ data = setStrProp(data,"tokenAtk",tokenAtk)]
[ data = setStrProp(data,"target",tokenTgt)]
[ data = setStrProp(data,"pv",punVida)]

[ token(tokenAtk): countAttaques = getStrProp(GolpeActual,"countAtaques") ]
[ token(tokenAtk): GolpeActual = setStrProp(GolpeActual,"countAtaques",(countAttaques+1)) ]

[ fila9 = "<tr><td colspan='3'>"+AplicarDanios(data) + "</td></tr>"]

[ broadcast(strformat("<table %{style1} width='100%' border='1'><tr><td rowspan='5' width='15%'>%{fila1}</td><th colspan='2'>AUTO ATAQUE</th></tr>%{fila2}%{fila3}%{fila5}%{fila6}%{fila7}%{fila9}"),"gm")]
}]

@@getTokensAuto
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=default ; playerEditable=false ; applyToSelected=false ; group=AutoCombate ; tooltip= ; minWidth=110
[h: condAutoTokens = '{ "layer": ["TOKEN"], "unsetStates" : ["Muerto,Derrotado"], "propertyType" : "Npc", "owned" : "notself"}']
	
	
	[h: listaTokens = getTokenNames(",", condAutoTokens)]
	
	[h: listaTokensFinal = "" ]
	
	[h, foreach(tok,listaTokens), if(getLabel(tok)=="auto"): listaTokensFinal = json.append(listaTokensFinal,tok)]
	
	[h: macro.return = listaTokensFinal]

@@selectAutoDefensa
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=orange ; playerEditable=false ; applyToSelected=false ; group=AutoCombate ; tooltip=autoVal = arg(0)%0AarrayVals = arg(1)%0A ; minWidth=
[h,code:{
[ autoVal = arg(0)]	
[ arrayVals = arg(1)]	
[ pause("autoval","arrayVals")]
[ valMax = listGet(arrayVals,listCount(arrayVals)-1)]
[ valMax = indexValueStrProp(valMax,0)]

[ rango = valMax / 5 ]

<!-- 80% e prob de usar el valor de autodef, si no, uno al azar -->
[ if( 1d100 < 80 ): nivelValSel = autoVal ; nivelValSel = 1d5]

[ valSel = ( rango * ( nivelValSel - 1 ) )+ eval( "1d" + rango )  ]

[ ej = 33]
[ selectFinal = ""]
[ arrayCount = 0]

[ while(  selectFinal == "" ),code:{
	
	[ spPos = listget(arrayVals, arrayCount) ]
	
	[ val = indexValueStrProp( spPos , 0)]
	
	[ if( val >= valSel): selectFinal = arrayCount )]
	[ arrayCount = arrayCount + 1 ]
}]

}]
[h: macro.return = selectFinal ]

@@AtaqueFireBallSELV3
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.15em ; sortBy= ; color=red ; playerEditable=false ; applyToSelected=false ; group=A_Combate_V3 ; tooltip= ; minWidth=
<!-- AtaqueFireBallV3 --> 

<!-- ********** El Token atacante siempre es el Token que tiene la iniciativa en este momento **********-->
[h: tokenAtk = getInitiativeToken()]
[h: tgt = getSelectedNames()]
[h: cantTargets = listCount(tgt)]
[h, if(listContains(tgt,tokenAtk)) : selftarget = 0; selftarget = 1;]
[h: tokenAtk = getName(getInitiativeToken())]
[h: ErrorMsg( selftarget ,"El Mismo Atacante, no puede ser objetivo")]
[h: ErrorMsg( cantTargets ,"Para atacar primero debe elejir al menos un Objetivo")]

<!-- ********** Traigo la maxima distancia de las armas. **********-->
[h: alcance1=50]

[r: DeclararAtaqueFireBallSEL(tokenAtk,tgt)]

@@AtaqueFireBallV3
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.15em ; sortBy= ; color=red ; playerEditable=false ; applyToSelected=false ; group=A_Combate_V3 ; tooltip= ; minWidth=
<!-- AtaqueFireBallV3 --> 

<!-- ********** El Token atacante siempre es el Token que tiene la iniciativa en este momento **********-->
[h: tokenAtk = getInitiativeToken()]
[h: tgt = getSelected()]
[h: cantTargets = listCount(tgt)]
[h, if(listContains(tgt,tokenAtk)) : selftarget = 0; selftarget = 1;]
[h: tokenAtk = getName(getInitiativeToken())]
[h: ErrorMsg( selftarget ,"El Mismo Atacante, no puede ser objetivo")]
[h: ErrorMsg( cantTargets ,"Para atacar primero debe elejir al menos un Objetivo")]
[h, if(cantTargets > 1): aux = 0 ;aux = 1][h: ErrorMsg( aux,"Debe elejirse solo UN punto donde se lanzara el ataque de bola")]
[h: switchToken(tokenAtk)]

<!-- ********** Traigo la maxima distancia de las armas. **********-->
[h: alcance1=50]

<!-- ********** Comparo contra los Objetivos ********** -->
[h, if(getDistance(tgt)<= alcance1): estaEnRango = 1; estaEnRango = 0 ]
[h: ErrorMsg( estaEnRango ,"Uno de los obejtivos esta fuera de alcance")]

[r: DeclararAtaqueFireBall(tokenAtk,tgt)]

@@DeclararAtaqueProyectilV3
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.15em ; sortBy= ; color=red ; playerEditable=false ; applyToSelected=false ; group=A_Combate_V3 ; tooltip= ; minWidth=
<!-- DeclararAtaqueProyectilV3 --> 

<!-- ********** El Token atacante siempre es el Token que tiene la iniciativa en este momento **********-->
[h, if(json.length(macro.args)>0): tokenAtk = arg(0) ; tokenAtk =  getName(getInitiativeToken())]

[h, if(json.length(macro.args)>1): targets = arg(1) ; targets = getName(getSelected())]

[h, if(listContains(targets,tokenAtk)) : selftarget = 0; selftarget = 1;]
[h, if(listCount(targets) > 1) : moreThan1tgt = 0; moreThan1tgt = 1;]

[h: ErrorMsg( selftarget ,"El Mismo Atacante, no puede ser objetivo")]
[h: ErrorMsg(  moreThan1tgt ,"Solo puede elejir UN objetivo")]
[h: ErrorMsg( listCount(targets) ,"Para atacar primero debe elejir al menos un Objetivo")]

<!-- ********** Traigo la maxima distancia de las armas. **********-->
[h: alcance1=3]
[h,token(tokenAtk): arma1 = brazo1]
 [h, if(pausear()==1): pause("arma1")]
[h: alcances = json.get(arma1,"alcance")]
<!-- Si hay mas de un enemigo , entonces dejo el alcance en 3 -->
[h, if(alcances!= "" && listCount(targets)==1): alcance1 = indexKeyStrProp(alcances,countStrProp(alcances)-1)]

<!-- ********** Comparo contra los Objetivos ********** -->

[h,token(tokenAtk), if(getDistance(targets)<= alcance1): estaEnRango1 = 1; estaEnRango1 = 0 ]
[h: ErrorMsg( estaEnRango1 ,"El objetivo esta fuera de alcance")]

[h, if(pausear()==1): pause("estaEnRango1")]

[r: ResolverAtaqueProyectilV3(tokenAtk,targets)]

@@DeclararAtaqueV3
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.15em ; sortBy= ; color=red ; playerEditable=false ; applyToSelected=false ; group=A_Combate_V3 ; tooltip= ; minWidth=
<!-- DeclararAtaqueV3 --> 

<!-- ********** El Token atacante siempre es el Token que tiene la iniciativa en este momento **********-->
[h: tokenAtk = getInitiativeToken()]
[h: targets = getSelectedNames()]
[h, if(listContains(targets,tokenAtk)) : selftarget = 0; selftarget = 1;]
[h: tokenAtk = getName(getInitiativeToken())]
[h: ErrorMsg( selftarget ,"El Mismo Atacante, no puede ser objetivo")]
[h: ErrorMsg( listCount(targets) ,"Para atacar primero debe elejir al menos un Objetivo")]
[h: switchToken(tokenAtk)]

<!-- ********** Traigo la maxima distancia de las armas. **********-->
[h: alcance1=3]
[h: arma1 = brazo1]
[h: alcances = json.get(arma1,"alcance")]
<!-- Si hay mas de un enemigo , entonces dejo el alcance en 3 -->
[h, if(alcances!= "" && listCount(targets)==1): alcance1 = indexKeyStrProp(alcances,countStrProp(alcances)-1)]

[h: alcance2 = 3 ]
[h: arma2 = brazo2 ]
[h: alcances = json.get(arma2,"alcance")]
<!-- Si hay mas de un enemigo , entonces dejo el alcance en 3 -->
[h, if(alcances!= "" && listCount(targets)==1): alcance2 = indexKeyStrProp(alcances,countStrProp(alcances)-1)]

<!-- ********** Comparo contra los Objetivos ********** -->
[h, foreach(tgt,targets),code:{
	[ dist1 = getDistance(tgt)]	
	[ if( dist1<= alcance1): estaEnRango1 = 1; estaEnRango1 = 0 ]
	[ if(getDistance(tgt)<= alcance2): estaEnRango2 = 1; estaEnRango2 = 0 ]	
	[ ErrorMsg( estaEnRango2 + estaEnRango1 ,"Uno de los obejtivos esta fuera de alcance")]
} ]	
[r, if(listCount(targets)==1),code:{
	[r, if(getDistance(targets)<= 3): DeclararAtaque1v1(tokenAtk,targets) ; DeclararAtaqueArrojadizo(tokenAtk,targets) ]
};{
	[r: DeclararAtaqueMultipleV3(tokenAtk,targets)]
}]

@@DeclararAtaqueV3Dist
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.15em ; sortBy= ; color=red ; playerEditable=false ; applyToSelected=false ; group=A_Combate_V3 ; tooltip=Lo mismo, pero puedo pasar un divisor para la Distancia ; minWidth=
<!-- DeclararAtaqueV3 --> 

<!-- ********** El Token atacante siempre es el Token que tiene la iniciativa en este momento **********-->
[h: tokenAtk = getInitiativeToken()]
[h: targets = getName(getSelected())]
[h, if(listContains(targets,tokenAtk)) : selftarget = 0; selftarget = 1;]
[h: tokenAtk = getName(getInitiativeToken())]
[h: ErrorMsg( selftarget ,"El Mismo Atacante, no puede ser objetivo")]
[h: ErrorMsg( listCount(targets) ,"Para atacar primero debe elejir al menos un Objetivo")]
[h: switchToken(tokenAtk)]

<!-- ********** Traigo la maxima distancia de las armas. **********-->
[h: alcance1=9]
[h: arma1 = brazo1]
[h: alcances = json.get(arma1,"alcance")]
<!-- Si hay mas de un enemigo , entonces dejo el alcance en 3 -->
[h, if(alcances!= "" && listCount(targets)==1): alcance1 = indexKeyStrProp(alcances,countStrProp(alcances)-1)]

[h: alcance2 = 9 ]
[h: arma2 = brazo2 ]
[h: alcances = json.get(arma2,"alcance")]
<!-- Si hay mas de un enemigo , entonces dejo el alcance en 3 -->
[h, if(alcances!= "" && listCount(targets)==1): alcance2 = indexKeyStrProp(alcances,countStrProp(alcances)-1)]

<!-- ********** Comparo contra los Objetivos ********** -->
[h, foreach(tgt,targets),code:{
	[ distFinal = getDistance(tgt)] 
	[h, if(pausear()==1): pause("distFinal")]
	[ if (distFinal <= alcance1): estaEnRango1 = 1; estaEnRango1 = 0 ]
	[ if(distFinal <= alcance2): estaEnRango2 = 1; estaEnRango2 = 0 ]
	[ ErrorMsg( estaEnRango2 + estaEnRango1 ,"Uno de los obejtivos esta fuera de alcance")]
} ]	
[r, if(listCount(targets)==1),code:{
	[r, if(getDistance(targets)<= 9): DeclararAtaque1v1(tokenAtk,targets) ; DeclararAtaqueArrojadizo(tokenAtk,targets) ]
};{
	[r: DeclararAtaqueMultipleV3(tokenAtk,targets)]
}]

@@BuscarCritico
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.10em ; sortBy=4 ; color=red ; playerEditable=false ; applyToSelected=false ; group=Combate ; tooltip= ; minWidth=120
<!-- BuscarCritico -->
<!-- danio, tablasCritico, tokenAtk, target, dado-->
[h: data = arg(0)]

[h: listTextField = "PunVida,actividad, oaparar, aturd, aturSinParar, sangre, quemadura, congel, iniciativa,SumaAtaque"]
[h: listaChckBox = "derribado, inconsiente, izqBrazoInutil,derBrazoInutil,izqPiernaInutil,derPiernaInutil,derrotado,muerto"]
[h: listaOtraCosa = "mueteEnAsaltos"]
[h: varsFromStrProp( data )]
[h: tablasCritico = decode(tablasCritico)]
[h: tablaSelected = getStrProp(data,"tablaCriticoSelBox") ]
[h,if(tablaSelected == ""): tablaSelected = indexKeyStrProp(tablasCritico, 0) ]

[h: tablaSelectedGR = tablaSelected + "_"+gr]

[h,if(getStrProp(data,"guardar") != ""),code:{ 
    [h: dadoAnte=getStrProp(data,"dadoCriticoAnterior")]       
    [h: SetearCritico(dadoAnte,tablaSelectedGR)]
    [h: listTextField=getStrProp()]
}]

[pause("data","tablaSelected")]

[h: countTablasCrit = countStrProp(tablasCritico)]
[h: listaTablas=""]
[h, count(countTablasCrit),code:
{
  [t = indexKeyStrProp(tablasCritico, roll.count)]
  [mod = indexValueStrProp(tablasCritico, roll.count)]
  [if(mod!=0):mod ="("+mod+")" ; mod =""]  
  [if(t==tablaSelected): se ="selected" ; se=""]    
  [ listaTablas= listAppend(listaTablas,"<option value='"+t+"' "+se+">"+replace(t,"critico","")+mod+"</option>")]
  
}]

[h: selectBoxCritico = listFormat( listaTablas, "<select name='tablaCriticoSelBox'>%list</select>", "%item","")]

[h: golpeActualAtk = getProperty("GolpeActual",tokenAtk)]
[h: golpeActualDef = getProperty("GolpeActual",target)]

<!-- Aca obtengo la descripcion del critico -->
[h: dadoCriticoMod =dadoCritico + getStrProp(tablasCritico,tablaSelected) ]
[h,if(gr != "" && dadoCritico > 0): danioCrit = table(tablaSelectedGR,dadoCriticoMod); danioCrit = ""]
[h: descFinal = getStrProp(danioCrit,"Desc") ]

[h: rowList = ""]
[h: sinDescProps=deleteStrProp(danioCrit, "Desc")]
[h, count(countStrProp(sinDescProps)),code:
{
  [key = indexKeyStrProp(sinDescProps, roll.count)]
  [value = indexValueStrProp(sinDescProps, roll.count)]
  [row = rowPerso("<span>"+key+"</span>,<input type='text' name='"+key+"' value='"+value+"'></input>",2)]
  [h: rowList = listAppend(rowList,row)]          
}]

[h: argsConDados = setStrProp(data,"dadoCritico", 1d100)]
[h: argsConDados = setStrProp(argsConDados,"dadoAnte", "")]
[h: argsConDados = setStrProp(argsConDados,"tablaCriticoSelBox", tablaSelected)]
[h: argsConDados = setStrProp(argsConDados,"guardar", "")]

[h: argsDanio = setStrProp(data,"guardar", "")]

[h: processorLink =macroLinkText('BuscarCritico@lib:asaltos',"all")]

[dialog("criticoInput"): {
    <html>
    <head>
      <title>Buscador de Critico</title>
      <meta name="input" content="true">
    </head>
    <body>
      <form name="buscarCritico" action="[r:processorLink]">
      <input type="hidden" name="tokenAtk" value="[r: tokenAtk]"></input>
      <input type="hidden" name="tablasCritico" value="[r: encode(tablasCritico)]"></input>      
      <input type="hidden" name="target" value="[r: target]"></input>
      <input type="hidden" name="dadoCritico" value="[r: dadoCritico]"></input>
      <input type="hidden" name="pv" value="[r: pv]"></input>
      <input type="hidden" name="danio" value="[r: danio]"></input>
      <input type="hidden" name="gr" value="[r: gr]"></input>
      <input type="hidden" name="dadoCriticoAnterior" value="[r: dadoCriticoMod]"></input>
          <table width="100%" border="1">   
            <tr>
              <td width="75%" height="100%">
                <table width="100%" height="100%">        
                  [h: tema1 = 5]
                  [r: rowPerso("Da&#241;o,"+danio,tema1,2)]
                  [r: rowPerso("DADOS,<input type='text' name='dadoCritico' value='"+dadoCritico+"'>",tema1,2)]
                  [r: rowPerso("TABLA,"+selectBoxCritico,tema1,2)]
                  [r: rowPerso("Descripcion del Critico("+dadoCriticoMod+")|th|2",tema1,2)]
                  <tr style="background-color:[r: temaColor(4)]">
                    <th colspan="2" style="font-size:12px;" height="125">
                      <span>[r: descFinal]</span>
                    </th>
                  </tr>
                  [r: rowPerso("Recuperacion,<input name='recuperacion' value=''>",tema1)]                    
                  [r: rowPerso(macroLink("Lanzar Dados", "BuscarCritico@lib:asaltos","self",argsConDados)+"|th|2",tema1)]                    
                </table>        
               </td>          
               <td width="25%" height="100%">
                  <table width="100%">
                      [r,foreach(row,rowList,""): row]    
                  </table>            
            </td>         
          </tr>
          <tr>
              <th>
                <input size="50" style="width: 100px;" type="submit" name="                    Buscar                    " value="Buscar"> </input>
              </th>
              <th>                
                <input size="50" style="width: 100px;" type="submit" name="                    Guardar                    " value="Guardar"> </input>
              </th>
          </tr>          
          [r: rowPerso(macroLink("Aplicar Critico", "AplicarDanio@lib:asaltos","",argsConDados)+"|th|2",3)]
        </table>
        </table>  
      </form>
    </body>
  </html>
}]

@@CalculoDanio
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.20em ; sortBy=3 ; color=default ; playerEditable=false ; applyToSelected=false ; group=Combate ; tooltip= ; minWidth=120
<!-- CalculoDanio -->
[h: data = arg(0)]
[h: rangoMax1= 105]
[h: rangoMax2= 120]
[h: rangoMax3= 135]
[h: rangoMax4= 150]
[h: PunVidaExtra = ""]
[h: bonoCritico1Arma2Manos = 5]

[h: pvExtra2Armas = "1,2,3,4,5,6,7,8,9,10,11,12"]
[h: pv1Arma2ManosEsp = "1,2,3,4,5,6"]

[h: ErrorMsg(length(data),"Debe recibir DATA con:tokenAtk")]

[h: varsFromStrProp( data )]

[h, if (tokenAtk == "GM"), code:{  
  [ bdTmp = 0]
  [ data = setStrProp(data,"bdTmp", 0)]  
  [ armas = "Punios"]
  [h: data = setStrProp(data,"armas", tablaCritico)]  
  [ boFinal = "<input type='text' name='boTmp' value="+ boTmp+">" ]
};{

  [h: golpeActualAtk = getProperty("GolpeActual",tokenAtk)]
  [h: arma1 = getProperty("brazo1",tokenAtk)]
  [h: arma2 = getProperty("brazo2",tokenAtk)]
  [h: armas = json.get(arma1,"nombre")]
  [h: armas = add(armas," y ",json.get(arma2,"nombre"))]
  [h: golpeActualDef = getProperty("GolpeActual",target)]
  [h: boTmp = getStrProp(golpeActualAtk,"boTmp")]
  [h: bdTmp = getStrProp(golpeActualDef,"bdTmp")]
  [h: tipoAtaque = getStrProp(golpeActualAtk,"tipoAtaque")]
  [h: tablaDanio = json.get(arma1,"danio")]
  [h, token(target), if(getGMName()=="superGrande"): isSuperGrande = 1 ; isSuperGrande = 0]
  [  if(isSuperGrande==1): tablasCritico = "criticoSuperGrande=0;" ;  tablasCritico = json.get(arma1,"criticos")]
  [ boFinal = "<span>"+boTmp+"</span>"]        
  
}]

[h: usos = json.get(arma1,"usable")]
[h, if( tipoAtaque =="2Manos" && listcontains(usos,"1mano")): is2ManosEspecial = 1 ; is2ManosEspecial = 0]

<!-- *************** Finalizar el Ataque *****************--> 

[r, if(getStrProp(data,"aplicarDanio")!=""),code:{  
	[h: broadcast("<hr/>data del golpe aplicado:<br/>"+data+"<hr/>","gm")]
  [r: AplicarDanios(data)]
  [h, if(getStrProp(ga,"ataqueEspecial")== "Arrojadizo"): tirarArma()]  
  [h, if(getStrProp(ga,"ataqueEspecial")== "Proyectil"): tirarFlecha()] 
  [h: pause("target")]
    [r: act_GolpeActualAtack(tokenAtk,target)]
    [r: act_GolpeActualDefense(target)]
}] 

<!-- ***************                    *****************--> 

[h: criticos=""]

[h: armadura = getProperty("armadura",target)]
[H: boTmp = floor(boTmp)]
[H: bdTmp = floor(bdTmp)]
[h: rdo = number(boTmp) - number(bdTmp) + number(dado) + number(modExtra)]
[h, if(pausear()==1): pause("rdo","boTmp","dado","modExtra")]

                  
<!-- *************** Contemplo Karate u otras talas de rango y obtengo el Rango de golpe   *****************--> 
[h, if(startsWith(tablaDanio,"ataqueKarate")),code:{
                  [h, if(pausear()==1): pause("tablaDanio")]
  [ karateArray = stringToList(tablaDanio,"_") ]
  [ tablaDanio = listGet(karateArray,0) ]
                  [h, if(pausear()==1): pause("tablaDanio")]
  [ rango = listGet(karateArray,1) ]
                  [h, if(pausear()==1): pause("rango")]  
  [h, if(rango == 1 && rdo > rangoMax1): rdo = rangoMax1]
  [h, if(rango == 2 && rdo > rangoMax2): rdo = rangoMax2]
  [h, if(rango == 3 && rdo > rangoMax3): rdo = rangoMax3]
}]

[h, if(pausear()==1): pause("rdo","tablaDanio")]
[h: danios = table(tablaDanio,rdo)]
[h, if(pausear()==1): pause("danios")]
[h: armObj = getTipoArm(armadura)+armadura]
[h: danioStrProp = decode(json.get(danios,armObj))]
[h: varsFromStrProp( danioStrProp )]

[h, if (gr!=""): criticos= listAppend(criticos,tablasCritico)]
[h, if (gr!=""): data = setStrProp(data,"selectGr_1",gr)]

<!-- Si es supergrande, el critico siempre es tipo A -->
[h, if ( isSuperGrande!=1 ): setStrProp(data,"selectGr_0","A")]

[h, if (gr!="" && tipoAtaque=="2Armas" && isSuperGrande!=1): criticos= listAppend(criticos,json.get(arma2,"criticos"))]
[h, if (gr!="" && tipoAtaque=="2Armas" && isSuperGrande!=1): setStrProp(data,"selectGr_2",gr)]

<!-- super grandes criaturas no reciben criticos si la gravedad es menor a D -->
[h, if ((gr=="A" || gr=="B" || gr=="C") && isSuperGrande==1): criticos=""]

[h, if(pausear()==1): pause("danios")]

<!-- Agrego criticos ante criticos mayores a E -->
[h, if (gr=="F" ): criticos= listAppend(criticos,listGet(criticos,0))]
[h, if (gr=="F"): setStrProp(data,"selectGr_1","A")]

[h, if (gr=="G" ): criticos= listAppend(criticos,listGet(criticos,0))]
[h, if (gr=="G"): setStrProp(data,"selectGr_1","C")]

[h, if (gr=="H" ): criticos= listAppend(criticos,listGet(criticos,0))]
[h, if (gr=="H"): setStrProp(data,"selectGr_1","C")]
[h, if (gr=="H" ): criticos= listAppend(criticos,listGet(criticos,0))]
[h, if (gr=="H"): setStrProp(data,"selectGr_1","A")]

[h, if (gr=="I" ): criticos= listAppend(criticos,listGet(criticos,0))]
[h, if (gr=="I"): setStrProp(data,"selectGr_1","D")]
[h, if (gr=="I" ): criticos= listAppend(criticos,listGet(criticos,0))]
[h, if (gr=="I"): setStrProp(data,"selectGr_1","B")]

[h, if (gr=="J" ): criticos= listAppend(criticos,listGet(criticos,0))]
[h, if (gr=="J"): setStrProp(data,"selectGr_1","D")]
[h, if (gr=="J" ): criticos= listAppend(criticos,listGet(criticos,0))]
[h, if (gr=="J"): setStrProp(data,"selectGr_1","C")]

[h, if(pausear()==1): pause("criticos","gr","data")]

<!-- *********** Control si es Kata de Armas de Karate ************-->
[h: tablaDanio2 =json.get(arma2,"danio")]

<!-- Si el arma 1 es karate, y el arma dos, es otro arma, entonces uso kata de armas. -->
[h, if( tablaDanio == "ataqueKarate" && !startsWith(tablaDanio2,"ataqueKarate")  ),code:{
            [h, if(pausear()==1): pause("arma2")]
    [h: bonoKataArmas = bonoKataArmas(arma2,armObj)]    
            [h, if(pausear()==1): pause("bonoKataArmas")]
    [h, if(pv>0): pv= pv + number(bonoKataArmas)]  
            [h, if(pausear()==1): pause("pv")]
    [h: criticos = "criticoDesequilibrio=0;"]

    [h: criticos= listAppend(criticos,json.get(arma2,"criticos")]
} ]

[h, if(pausear()==1): pause("tablaDanio2")]
[h: argsConDados = setStrProp(data,"dado", 1d100)]
[h: argsCrit = setStrProp(danioStrProp,"danio",  pv + " " + gr)]
[h: argsCrit = setStrProp(argsCrit,"tablasCritico", tablasCritico)]
[h: argsCrit = setStrProp(argsCrit,"tokenAtk",  tokenAtk)]
[h: argsCrit = setStrProp(argsCrit,"target",  target)]
[h: argsCrit = setStrProp(argsCrit,"dadoCritico", 0)]

[h: processorLink =macroLinkText('postDanios@lib:asaltos',"all")]
[h: sizeInput=5]
[h: temaTitulo=5]
[h: temafila =3]
[h: sintema ="white"]
[h: temaResaltado =4]

[h: tema4 = 4 ]
[h: tema5 = 5 ]

[h, if(pausear()==1): pause("tema4")]

[gm, dialog("calculoDanioInput","width=500; height=500;"): {
    <html>
    <head>
      <link rel='stylesheet' type='text/css' href='myCSS@[r: getMacroLocation()]'></link>
      <title>Calculo de Da&#241;o</title>
      <meta name="input" content="true">
    </head>
    <body>
      <form name="calculoDeDanio" action="[r:processorLink]">
          <input type="hidden" name="tokenAtk" value="[r: tokenAtk]"></input>
          <input type="hidden" name="tablaCritico" value="[r: tablasCritico]"></input>     
          <input type="hidden" name="tablaDanio" value="[r: tablaDanio]"></input>     
          <input type="hidden" name="target" value="[r: target]"></input>               
          <input type="hidden" name="pv" value="[r: pv]"></input>   

                      
          <table width="100%" class="tabla" "background-color:[r: temaColor(1)];">

          
		          [h, if(pausear()==1): pause("armas","temaTitulo")]
		          [r: rowPerso("<label for='name'>Armas</label>|th|1,<span>"+armas+"</span>|th|5",temaTitulo)]
		
		          [r: rowPerso("<label for='boTmp'>BO</label>,"+ boFinal + "|th,<label for='bdTmp'>BD</label>,<span>"+bdTmp+"</span>|th,<label for='modExtra'>Mod. Extra</label>,<input type='text' size='"+sizeInput+"' name='modExtra' value="+ modExtra+">",temafila)]
		             
		                            
		          [h, if(pausear()==1): pause("temafila")]
		          [r: rowPerso("<label for='dado'>DADOS</label>,<input type='text' size='"+sizeInput+"' name='dado' value="+ dado+">,"+macroLink("Lanzar Dados", "CalculoDanio@lib:asaltos","self",argsConDados)+"|th|4",temafila)]
		               

				
					[h, if(PunVidaExtra != ""): pvExtraSel = PunVidaExtra ; pvExtraSel = 1 ]	
					[h, if(is2ManosEspecial): pvExtraList =  pv1Arma2ManosEsp ; pvExtraList = pvExtra2Armas ]
		          [h: boxPvExtra = selectBoxPerso(  pvExtraList , pvExtraSel , "PunVidaExtra" , "lista")]     

		                                                     
		          [h, if(pausear()==1): pause("argConDados")]
		          [r,if(tipoAtaque == "2Armas" || is2ManosEspecial ): rowPerso("<label for='subResultado'>Resultado</label>|th,    <span>"+rdo+"</span>|th|2|background-color: "+tema4+"; font-size: 18px;,<label for='Da&#241;o'>Da&#241;o</label>|th,     <span>"+pv + " PV. " + gr +"</span>|th|1|background-color: "+tema4+"; font-size: 18px;, <span>"+ boxPvExtra +"</span>|th|1|background-color: "+tema4+"; font-size: 12px;",temafila) ; rowPerso("<label for='subResultado'>Resultado</label>|th,    <span>"+rdo+"</span>|th|2|background-color: "+tema4+"; font-size: 18px;,<label for='Da&#241;o'>Da&#241;o</label>|th,     <span>"+pv + " PV. " + gr +"</span>|th|2|background-color: "+tema4+"; font-size: 18px;",temafila)
		          ]
		                                      [h, if(pausear()==1): pause("gr")]
		        
		          
          
          </table>
          <table width="100%" class="tabla" "background-color:[r: temaColor(1)];">            
           [r: rowPerso('<input type="submit" name="Calcular" value="              Calcular              ">|th|1|background-color: white;',sintema)]
          </table>
           
           
           
           
           
           <table width="100%"  class="tabla" "background-color:[r: temaColor(1)];">
           [r: rowPerso("CRITICOS|th|5",temaTitulo)]
                  [h, if(pausear()==1): pause("criticos")]

                  
    [r,COUNT(listCount(criticos),  rowPerso("&#32;|th|5|background-color: white;",sintema) ),code:{
              <!-- gr , tabla sin letra| dado_1 sel_target_1, sel_Gr_1 -->
              [h: n = roll.count]
              [h: cr = listGet(criticos,roll.count)]
              [h: tablasOpc = decode(cr)]
              [h: dadoCrit = getStrProp(data,"dado_cr"+n)]
              [h, if(getStrProp(data,"crit_"+n)!="" && dadoCrit ==""): dadoCrit=1d100]
              

              [h: boxGrName="selectGr_"+n]
              [h, if (getStrProp(data,boxGrName)!=""): gr=getStrProp(data,boxGrName); sel=""]
              [h: boxGr = selectBoxPerso("A,B,C,D,E",gr,boxGrName)]
              
              [h: boxCritName="selectCrit_"+n]
              [h, if (getStrProp(data,boxCritName)!=""): selCrit=getStrProp(data,boxCritName); selCrit=indexKeyStrProp(tablasOpc, 0)]              
              [h: boxTablas = selectBoxPerso(tablasOpc,selCrit,"selectCrit_"+n,"criticos")]
              
              [h: boxTgtName="selectTgt_"+n]
              [h, if (getStrProp(data,boxTgtName)!=""): selTgt=getStrProp(data,boxTgtName); selTgt=target]
              [h: boxTgt = selectBoxPerso( getExposedTokenNames(),selTgt,"selectTgt_"+n)]
             
             	[h: col5 ="<select name='tgt_cr"+n+"'><option selected value='"+target+"'>"+target+"</option><option value='Neo'>Neo</option><option value='Otro'>Otro</option></select>"]
            
            	 [r: rowPerso("GRAVEDAD,"+boxGr+",TABLA,"+boxTablas+","+boxTgt,temafila)]
             
             	[r: rowPerso("Dados|th|2,<input type='text' size='"+sizeInput+"' name='dado_cr"+n+"' value='"+dadoCrit+"'>,<input type='submit' name='crit_"+n+"' value='    Lanzar    '>|th,<input type='submit' name='EditarCrit_"+n+"' value='    Editar    '>|th",temafila)]
             	[h: mod= getStrProp(cr,selCrit)]

	
				<!-- REGLA ESPEFCIAL ARMA DE 1 MANO USADA A DOS MANOS -->
				[h, if ( is2ManosEspecial ): dadoCrit = dadoCrit + bonoCritico1Arma2Manos ]
				<!-- ------------------------------------------------ --->

             
             	
             	[h, if(getStrProp(data,'EditarCrit_'+n)!=""): SetearCritico(number(dadoCrit) + number(mod), selCrit,gr)]         

  
			  	[h, if(pausear()==1): pause("dadoCrit","selCrit","gr","cr","selCrit")]

                               
            		 [r, if(dadoCrit!=""): describirCriticoSeccion(dadoCrit,selCrit+"_"+gr,getStrProp(cr,selCrit),"crit_"+n) ]

      }]
             [r: rowPerso('<input type="submit" name="aplicarDanio" value="                FINALIZAR EL ATAQUE                ">|th|5|background-color: white;',sintema)]
           </table>
      </form>
      
    </body>
  </html>
}]

@@CalculoDanioFireBall
@PROPS@ fontColor=red ; autoExecute=true ; fontSize=1.20em ; sortBy=3 ; color=orange ; playerEditable=false ; applyToSelected=false ; group=Combate ; tooltip= ; minWidth=120
[h: tablaDanio = "ataqueBolaDeFuego"]
[h: tablasCritico = "criticoFuego"]  
		  
[h: data = arg(0)]

[h: jsonForm = json.get(data,"form")]
[h: data = json.remove(data,"form")]

[h: dados = 0]
[h: bo = json.get(data,"bo")] 
		
[h, if(pausear()==1): pause("data","jsonForm")]

[h: listTgts = json.get(data,"tokenTgts")]	

<!-- la siguiente linea, evalua si se disparo el formulario -->
[h, if(json.contains(jsonForm,"played")),code:{ 

	[ dados = json.get(jsonForm,'dados')] 

	[r,foreach(tgt,listTgts,""),code:{
		
  		[h: dadoCritico = json.get(jsonForm,'dadoCrit_'+tgt)] 
  		[h: listTgts = json.path.put(listTgts,tgt,"dadoCritico",dadoCritico)]
  		  			
  		[h: inputBD = json.get(jsonForm,'inputBD_'+tgt) ]
  		[h: listTgts = json.path.put(listTgts,tgt,"inputBD",inputBD)]

	}]
  	
};{

	[r,foreach(tgt,listTgts,""),code:{
		
  		[h: dadoCritico = 0] 
  		[h: listTgts = json.path.put(listTgts,tgt,"dadoCritico",dadoCritico)]
  		  			
  		[h: inputBD = 0 ]
  		[h: listTgts = json.path.put(listTgts,tgt,"inputBD",inputBD)]

	}]

}]

<!--  Calculo de danio -->
[h,foreach(tgt,json.fields(listTgts),""),code:{

		[ bd = json.path.read(listTgts,tgt+'.bd') ]
		[ bdInput = json.path.read(listTgts,tgt+'.inputBD') ]

		
		[ rdo = bo - bd - bdInput + dados]
		[ listTgts = json.path.put(listTgts,tgt,"rdo",rdo)]
				
	
		[ armadura = getProperty("armadura",tgt)]
		[ listTgts = json.path.put(listTgts,tgt,"armadura",armadura)]
		
		<!-- Calcular los danios -->
        [ danios = table("ataqueBolaDeFuego",rdo)]
		[ armObj = getTipoArm(armadura)+armadura]
		[ danioStrProp = decode(json.get(danios,armObj))]
		

		[ listTgts = json.path.put(listTgts,tgt,"danio",danioStrProp)]

        [ gravedadCritico =  getStrProp(danioStrProp,"gr")]
        [ listTgts = json.path.put(listTgts,tgt,"gravedadCritico",gravedadCritico)]
        [ pvDanio = getStrProp(danioStrProp,"pv") ]
        [ listTgts = json.path.put(listTgts,tgt,"pvDanio",pvDanio)]
        [ listTgts = json.path.put(listTgts,tgt,"danioShow",getStrProp(danioStrProp,"pv") + gravedadCritico)]

		[ dadoCritico = json.path.read(listTgts,tgt+'.dadoCritico') ]
		
		[ if(gravedadCritico != "" && gravedadCritico != "F"): descDaniosCriticos = table( tablasCritico + "_" + gravedadCritico, dadoCritico ) ; descDaniosCriticos = "" ]	
		[ if(descDaniosCriticos != ""): daniosCriticos = deleteStrProp(descDaniosCriticos,"Desc") ; daniosCriticos = "" ]
		
		[ listTgts = json.path.put( listTgts, tgt, "descDaniosCriticos", descDaniosCriticos )] 
		[ listTgts = json.path.put( listTgts, tgt, "daniosCriticos", daniosCriticos )] 

}]

 

<!-- *************** Finalizar el Ataque *****************--> 
[h,foreach(tgt,json.fields(listTgts),""),code:{
	[ dataAplicarDanio = setStrProp("","tokenAtk","Fafnir")]
	[ dataAplicarDanio = setStrProp(dataAplicarDanio,"target",tgt)]
	[ dataAplicarDanio = setStrProp(dataAplicarDanio,"punVida",  json.path.read(listTgts,tgt+'.pvDanio') ) ]

	
	[ if(json.contains(jsonForm,"accion_aplicar")): dataAplicarDanio = dataAplicarDanio + ";" + json.path.read(listTgts,tgt+'.daniosCriticos') ]

	[ if(json.contains(jsonForm,"accion_aplicar")): broadcast(AplicarDanios(json.toStrProp(dataAplicarDanio))) ]
}]
<!-- ***************                    *****************--> 

 

[h: processorLink =macroLinkText('CalculoDanioFireBall@lib:asaltos',"all",data)]

[gm, dialog("calculoDanioInput","width=500; height=500;"): {
<form name="calculoDeDanioFireBall" action="[r:processorLink]" method="json">
<input type="hidden" name="played" value='true'/>

<table border="0" width="100%">

<tr>
    <td colspan="5">
        <h3>Aplicar Danios de bola de fuego</h3>
    </td>
</tr>
<tr>

	<th width="50%" colspan="3">
        Bono Ofensivo
    </th>
    <th colspan="1" bgcolor="blue">
		<input type="hidden" value="[r: bo]" name="bo" readonly="true" />
		[r: bo]
    </th>
    <th colspan="1">
         &nbsp;
    </th>
</tr>
<tr>

	<th width="50%" colspan="3">
        Dados
    </th>
    <th colspan="1">
        <input type="text" value="[r: dados]" name="dados" />
    </th>
    <th colspan="1">
         &nbsp;
    </th>
</tr>

<tr><td colspan="5"><hr></td></tr>

[r,foreach(tgt,json.fields(listTgts),""),code:{

		[h: bdTgt = json.path.read(listTgts,tgt+'.bd') ]
		[h: inputbdtgt = json.path.read(listTgts,tgt+'.inputBD') ]
		[h: rdoTgt = json.path.read(listTgts,tgt+'.rdo') ]
        [h: armaduraTgt = json.path.read(listTgts,tgt+'.armadura') ]
        [h: dadoCritt = json.path.read(listTgts,tgt+'.dadoCritico') ]        
        
        [h: danioStrVal = json.path.read(listTgts,tgt+'.danio') ]

		[h: danioShow = json.path.read(listTgts,tgt+'.danioShow') ]
		[h: gravedadCritico = json.path.read(listTgts,tgt+'.gravedadCritico') ]

		[h: playt = 'play_'+tgt]       <!-- para evalular si s epidio lanzar el critico correspondiente a este token --> 
		[h, if( json.contains(jsonForm, playt ) ): dadoCrittInput = 1d100 ; dadoCrittInput = dadoCritt ]

<tr>
    <td width="20%">
        [r: tgt]([r: armaduraTgt ])

    </td>    
    <td width="20%">
        BD ([r: bdTgt])<input type="text" value="[r: inputbdtgt]" name="inputBD_[r: tgt]" />
    </td>
    <td width="20%">
        RDO <br>[r: rdoTgt]
    </td>
        <td width="20%" border="1">
               DANIO <br>[r: danioShow]
    </td>

    <td width="20%">
        DadoCritico <input type="text" value="[r: dadoCrittInput ]" name="[r: 'dadoCrit_'+tgt]" />
    </td>
    <td width="20%">
        <input type="submit" value="Lanzar" name="[r: playt]" />
    </td>

    <!-- Todo el recuadro del critico, descricpion y danioos-->

	[h, if(pausear()==1): pause("dadoCrittInput","tablasCritico", "dadoCritt","gravedadCritico")]

	[r, if( gravedadCritico !="" && gravedadCritico != "F"): describirCriticoSeccion(dadoCrittInput,tablasCritico+"_"+gravedadCritico,0,"crit_"+playt) ]

	
</tr>
}]
<tr><td colspan="5"><hr></td></tr>
<tr>
    <th width="100%" colspan="5">
        <input type="submit" value="Aplicar" name="accion_aplicar" />
    </th>
</tr>
</table>
<input type="submit" value="calcular">
</form>
}]

@@DeclararAtaque
@PROPS@ fontColor=white ; autoExecute=true ; fontSize=1.15em ; sortBy=0.9 ; color=red ; playerEditable=false ; applyToSelected=true ; group=Combate ; tooltip=Esta Macro dispara un ataque basandose en que el atacante es quien tiene la iniciativa. y el objetivo es quien esta marcado. Tambien deduce si es un ataque arrojadizo o multiple ; minWidth=120
<!-- DeclararAtaque --> 
[h: tokenAtk = arg(0)]
[h, if(tokenAtk == ""): tokenAtk = getName(getSelected())]
[h: switchToken(tokenAtk)]
[h: br = ""]
[h, if(pausear()==1): pause("tokenAtk")]
[h: ErrorMsg(length(GolpeActual),"Debe tener definifo GolpeActual")]
[h: varsFromStrProp( GolpeActual )]
[h: ErrorMsg(!countAtaques, tokenAtk + "Ya Ataco en este asalto")]

[h: ErrorMsg(length(brazo1),"Debe tener definifo Brazo 1")]
[h: ErrorMsg(length(brazo2),"Debe tener definifo Brazo 2")]
[h, if(pausear()==1): pause("brazo1")]

<!-- **********  Arma1, si no hay: uso pelea  **********-->
[h, if(json.type(brazo1) != "OBJECT"): brazo1 = table("Weapons",0)]
[h, if(json.type(brazo2) != "OBJECT"): brazo2 = table("Weapons",0)]
[h, if(json.type(brazo1) != "OBJECT"): tipoAtaque=="2Manos"]
[h: bonoArma = json.get(brazo1,"bonoBO") ] 
[h,if (bonoArma==""): bonoArma = 0]

<!-- **********  Obtengo la BO y busco modificadores  **********-->
[h: boact = getBoActual(getName(),brazo1) ]
[h, if(pausear()==1): pause("boact")]
[h: boOfen = boact + number(cambioArma*-30) - number(boUsada)]
[r,  if(cambioArma>0): br =br+" Pen. por cambios de arma: "+(cambioArma*-30)+". " ]
[r,  if(boUsada>0): br=br+ " Bo ya usada en el asalto: "+boUsada)+"." ]
[r, if (isPC()),code:{
	[r: "<br>Bo Disponible = "+boOfen]	
};{
	[gt: broadcast(br+"<br>Bo Disponible = "+bo, "GM")]
}]

<!-- **********  Tipo de ataque  **********-->
[h: tipoAtaque = getStrProp(GolpeActual,"tipoAtaque")]
[h,if(tipoAtaque==""),code:{
	[if(json.get(brazo1,"nombre")==json.get(brazo2,"nombre")): tipoAtaque=="2Manos"]
	[if(tipoAtaque=="" && (json.contains(brazo1, "criticos") && json.contains(brazo2, "criticos"))): tipoAtaque=="2Armas" ]
	[if(tipoAtaque==""): tipoAtaque=="1Mano"]
}] 

<!-- ********** Creo la lista de personajes cercanos  **********-->
[h,token(tokenAtk): lsVisibleNpc = json.intersection( getTokenNames("json"), getVisibleTokenNames("json") )]
[h: tokenList = json.toList(lsVisibleNpc)]
[H: Num = listCount(tokenList)]
[h: imgList = ""]
[h: finalTokenList = ""]
[h,COUNT(Num),CODE:
{	
	[h:tokenName=listGet(tokenList,roll.count)]
	[h: dist= getDistance(tokenName)]	
	[h, if(dist <= 3 && tokenName != tokenAtk),code:{		
		[h,token(tokenName): image=getTokenImage()]
		[h:imgList=listAppend(imgList,tokenName+" "+image)]	
		[h: finalTokenList = listAppend(finalTokenList,tokenName)]
	}]	
}]

<!-- ********** Creo la lista de Disponibilidad de BO  **********-->
[h: arrEstilos = "" ]

[h, if(tipoAtaque =="2Armas"),code:{
	[h, for(i,0,boOfen,10): arrEstilos = listAppend(arrEstilos, add("BO=",boOfen-i,"; BD=",i/2,";") ) ]
	[h: arrEstilos = listAppend(arrEstilos, add("BO=",0,"; BD=",boOfen/2,";") ) ]
	[h: bonoArma = bonoArma + json.get(brazo2,"bonoBO")/2 ] 
};{
	[h, for(i,0,boOfen,5): arrEstilos = listAppend(arrEstilos, add("BO=",boOfen-i,"; BD=",i,";") ) ]	
	[h: arrEstilos = listAppend(arrEstilos, add("BO=",0,"; BD=",boOfen,";") ) ]
}]

<!-- ********** Veo si tiene escudo o nada.  **********-->
 [h:bono2 =0]
[h,if(tipoAtaque=="1Mano" && json.contains(brazo2, "bonoBD")): bono2 =   "+"+ json.get(brazo2,"bonoBD")+" BD"]
[h,if(tipoAtaque=="2Armas"): bono2 =   "+"+ number(json.get(brazo2,"bonoBO"))/2+" BO"]

[h, if(pausear()==1): pause("bono2")]

<!-- ********** Invoco el Input  **********-->
[H: inputStr = "[]"]
[h: imgWeapon1 = tblImage("Weapons",json.get(brazo1,"ID"))]
[h, if (json.contains(brazo2, "criticos")) : tbBrazo2 = "Weapons" ; tbBrazo2 = "Shields"]
[h: imgWeapon2 = tblImage(tbBrazo2,json.get(brazo2,"ID"))]
[H: inputStr = json.append(inputStr,"lblNombre|<html><h2>Ataque de "+tokenAtk+"</h2></html>|-|LABEL|SPAN=TRUE")]
[H: inputStr = json.append(inputStr,"junk|<html><table border=1  width='400'><tr><th width='50%'><img src='"+replace(imgWeapon1, ":", "&#58;")+"' width=120 height=120></img></th><th width=50%><img src='"+replace(imgWeapon2, ":", "&#58;")+"' width=120 height=120></img></th></tr></table></html>|-|LABEL|SPAN=TRUE")]

[H: inputStr = json.append(inputStr,"armasLbl1|+"+json.get(brazo1,"bonoBO")+"|"+json.get(brazo1,"nombre")+"|LABEL")]
[h, if(bono2!=0): inputStr = json.append(inputStr,"armasLbl2|"+bono2+"|"+json.get(brazo2,"nombre")+"|LABEL")]
[h: inputStr = json.append(inputStr,"target|"+imgList+"|Enemigo Objetivo|LIST|SELECT=0 ICON=TRUE ICONSIZE=30")]
[h: inputStr = json.append(inputStr,"boSeleccionada|"+ arrEstilos +"|Cuanto Bo Ataque / Defensa |LIST|SELECT=0 VALUE=STRING")]

[H: input = input(json.toList(inputStr,"##"))]
[h: abort(input)]

<!-- ********** Calculo la BO Temporal  **********-->
[h, if(!isNumber(BonoBOFija)): BonoBOFija=0]
[h: boTmp = number(getStrProp(boSeleccionada,"BO")) + number(bonoArma)+ number(BonoBOFija)]

	
<!-- ********** Tomo el Target  **********-->
[h: target = listGet(finalTokenList,Target)]

<!-- ********** Guardo los nuevos Datos dentro del golpeActual temporalmente  **********-->
[h: GolpeActual = setStrProp(GolpeActual,"boTmp",boTmp)]
[h: GolpeActual = setStrProp(GolpeActual,"target",target)]
[h: GolpeActual = setStrProp(GolpeActual,"boUsadaTmp",getStrProp(boSeleccionada,"BO"))]

<!-- ********** Preparo el Link para quien corresponda  **********-->
[h,token(Target): jugadoresDef = getOwners()]

[h: LUGAREXACTO= "Aqui es donde deberia ver"]
[h, if(pausear()==1): pause("obj","LUGAREXACTO")]
[h: link = macroLink("Defender a "+target+" del ataque de"+  tokenAtk,"Defender@Lib:personajes", "none", tokenAtk,"")]

[h, if (isPC(Target)),code:{ 
	[h: broadcast(link, jugadoresDef + ",GM")] 
	[broadcast(macroLinkText("<color='red'>", "Defender@Lib:personajes", 'none', tokenAtk, ""), jugadoresDef)] 
} ; { 
	[h: broadcast(link, "GM")]	
	
}]

[r: ObtenerSpeechAzar()]

@@DeclararAtaque1v1
@PROPS@ fontColor=white ; autoExecute=true ; fontSize=1.15em ; sortBy=1 ; color=red ; playerEditable=false ; applyToSelected=true ; group=Combate ; tooltip= ; minWidth=120
<!-- DeclararAtaque1v1 --> 
[h: tokenAtk = arg(0)]
[h: tokenTgt = arg(1)]

[h,token(tokenTgt): image=getTokenImage()]
[h:tokenTgtImg=tokenTgt+" "+image]	

[h, if(tokenAtk == ""): tokenAtk = getName(getSelected())]
[h: switchToken(tokenAtk)]
[h: br = ""]
[h, if(pausear()==1): pause("tokenAtk")]
[h: ErrorMsg(length(GolpeActual),"Debe tener definifo GolpeActual")]
[h: varsFromStrProp( GolpeActual )]
[h: ErrorMsg(!countAtaques, tokenAtk + " Ya Ataco en este asalto")]

[h: ErrorMsg(length(brazo1),"Debe tener definifo Brazo 1")]
[h: ErrorMsg(length(brazo2),"Debe tener definifo Brazo 2")]
[h, if(pausear()==1): pause("brazo1")]

<!-- **********  Arma1, si no hay: uso pelea  **********-->
[h, if(json.type(brazo1) != "OBJECT"): brazo1 = table("Weapons",0)]
[h, if(json.type(brazo2) != "OBJECT"): brazo2 = table("Weapons",0)]
[h, if(json.type(brazo1) != "OBJECT"): tipoAtaque=="2Manos"]
[h: bonoArma = json.get(brazo1,"bonoBO") ] 
[h,if (bonoArma==""): bonoArma = 0]

<!-- **********  Obtengo la BO y busco modificadores  **********-->
[h: boact = getBoActual(getName(),brazo1) ]
[h, if(pausear()==1): pause("boact")]
[h: boOfen = boact + number(cambioArma*-30) - number(boUsada)]
[r,  if(cambioArma>0): br =br+" Pen. por cambios de arma: "+(cambioArma*-30)+". " ]
[r,  if(boUsada>0): br=br+ " Bo ya usada en el asalto: "+boUsada)+"." ]
[r, if (isPC()),code:{
	[w(getOwners()): br+"Bo Disponible para atacar = "+boOfen ]
};{
	[g: broadcast(br+"<br>Bo Disponible = "+bo, "GM")]
}]

[h: linea = 43 ][h, if(pausear()==1): pause("linea")]

<!-- **********  Tipo de ataque  **********-->
[h: tipoAtaque = getStrProp(GolpeActual,"tipoAtaque")]
[h,if(tipoAtaque==""),code:{
	[if(json.get(brazo1,"nombre")==json.get(brazo2,"nombre")): tipoAtaque=="2Manos"]
	[if(tipoAtaque=="" && (json.contains(brazo1, "criticos") && json.contains(brazo2, "criticos"))): tipoAtaque=="2Armas" ]
	[if(tipoAtaque==""): tipoAtaque=="1Mano"]
}] 

<!-- ********** Creo la lista de Disponibilidad de BO  **********-->
[h: arrEstilos = "" ]

[h, if(tipoAtaque =="2Armas"),code:{
	[h, for(i,0,boOfen,10): arrEstilos = listAppend(arrEstilos, add("BO=",boOfen-i,"; BD=",i/2,";") ) ]
	[h: arrEstilos = listAppend(arrEstilos, add("BO=",0,"; BD=",boOfen/2,";") ) ]
	[h: bonoArma = bonoArma + json.get(brazo2,"bonoBO")/2 ] 
};{
	[h, for(i,0,boOfen,5): arrEstilos = listAppend(arrEstilos, add("BO=",boOfen-i,"; BD=",i,";") ) ]	
	[h: arrEstilos = listAppend(arrEstilos, add("BO=",0,"; BD=",boOfen,";") ) ]
}]

<!-- ********** Veo si tiene escudo o nada.  **********-->
 [h:bono2 =0]
[h,if(tipoAtaque=="1Mano" && json.contains(brazo2, "bonoBD")): bono2 =   "+"+ json.get(brazo2,"bonoBD")+" BD"]
[h,if(tipoAtaque=="2Armas"): bono2 =   "+"+ number(json.get(brazo2,"bonoBO"))/2+" BO"]

[h, if(pausear()==1): pause("bono2")]

<!-- ********** Invoco el Input  **********-->
[H: inputStr = "[]"]

[h: imgWeapon1 = tblImage("Weapons",json.get(brazo1,"ID"))]

[h, if (json.contains(brazo2, "criticos")) : tbBrazo2 = "Weapons" ; tbBrazo2 = "Shields"]

[h: imgWeapon2 = tblImage(tbBrazo2,json.get(brazo2,"ID"))]

[H: inputStr = json.append(inputStr,"lblNombre|<html>"+vsTable(tokenAtk,tokenTgt,"attackIcon")+"</html>|-|LABEL|SPAN=TRUE")]

[H: inputStr = json.append(inputStr,"junk|<html><table border=1  width='400'><tr><th width='50%'><img src='"+replace(imgWeapon1, ":", "&#58;")+"' width=120 height=120></img></th><th width=50%><img src='"+replace(imgWeapon2, ":", "&#58;")+"' width=120 height=120></img></th></tr></table></html>|-|LABEL|SPAN=TRUE")]

[H: inputStr = json.append(inputStr,"armasLbl1|+"+json.get(brazo1,"bonoBO")+"|"+json.get(brazo1,"nombre")+"|LABEL")]

[h, if(bono2!=0): inputStr = json.append(inputStr,"armasLbl2|"+bono2+"|"+json.get(brazo2,"nombre")+"|LABEL")]

[h: inputStr = json.append(inputStr,"boSeleccionada|"+ arrEstilos +"|Cuanto Bo Ataque / Defensa |LIST|SELECT=0 VALUE=STRING")]

[h: inputStr = json.append(inputStr,"someterCheck|0|Intentar Someter?(-"+(boOfen*0.3)+" B0)|CHECK")]

[H: input = input(json.toList(inputStr,"##"))]

[h: abort(input)]

<!-- ********** Calculo la BO Temporal  **********-->
[h, if(!isNumber(BonoBOFija)): BonoBOFija=0]
[h: boSeleccionadaFinal = getStrProp(boSeleccionada,"BO")]
[h: boTmp = number(boSeleccionadaFinal) + number(bonoArma)+ number(BonoBOFija)]
[h: linea = 102 ][h, if(pausear()==1): pause("boSeleccionadaFinal","bonoArma","boTmp")]

<!-- ********** Guardo los nuevos Datos dentro del golpeActual temporalmente  **********-->
[h: GolpeActual = setStrProp(GolpeActual,"boTmp",boTmp)]
[h: GolpeActual = setStrProp(GolpeActual,"target",tokenTgt)]
[h: GolpeActual = setStrProp(GolpeActual,"boUsadaTmp",getStrProp(boSeleccionada,"BO"))]
[h: GolpeActual = setStrProp(GolpeActual,"someter",someterCheck)]

[h: linea = 111 ][h, if(pausear()==1): pause("linea")]

<!-- ********** Preparo el Link para quien corresponda  **********-->
[h, token(tokenTgt): jugadoresDef = getOwners("json")]

[h, if (isPC(tokenTgt)): obj = jugadoresDef ; obj = "gm"]

[h, if ( json.contains( jugadoresDef , "KyoYNeo" ) && 0): json.removeAll(jugadoresDef, "['KyoYNeo']") ]

[h: link = macroLink("Defender a "+tokenTgt+" del ataque de"+  tokenAtk,"DeclaroDefensa@lib:asaltos", jugadoresDef, tokenAtk)]

[h: linkText = macroLinkText("DeclaroDefensa@lib:asaltos", jugadoresDef, tokenAtk)]

[h: broadcast(link, obj)]
[h: broadcast(link, "gm")]

@@DeclararAtaqueArrojadizo
@PROPS@ fontColor=white ; autoExecute=true ; fontSize=1.15em ; sortBy=1 ; color=red ; playerEditable=false ; applyToSelected=true ; group=Combate ; tooltip= ; minWidth=120
<!-- DeclararAtaqueArrojadizo --> 
[h: tokenAtk = getName(arg(0))]
[h: tokenTgt = arg(1)]

[h,token(tokenTgt): image=getTokenImage()]
[h:tokenTgtImg=tokenTgt+" "+image]	

[h, if(tokenAtk == ""): tokenAtk = getName(getSelected())]
[h: switchToken(tokenAtk)]

[h: arma1 = brazo1]
[h: arma2 = brazo2]

[h: br = ""]
[h, if(pausear()==1): pause("tokenAtk")]
[h: ErrorMsg(length(GolpeActual),"Debe tener definifo GolpeActual")]
[h: varsFromStrProp( GolpeActual )]
[h: ErrorMsg(!countAtaques, tokenAtk + "Ya Ataco en este asalto")]

[h: ErrorMsg(length(arma1),"Debe tener definifo arma 1")]
[h: ErrorMsg(length(arma2),"Debe tener definifo arma 2")]
[h, if(pausear()==1): pause("arma1")]

<!-- **********  Arma1, si no hay: uso pelea  **********-->
[h, if(json.type(arma1) != "OBJECT"): arma1 = table("Weapons",0)]
[h, if(json.type(arma2) != "OBJECT"): arma2 = table("Weapons",0)]
[h, if(json.type(arma1) != "OBJECT"): tipoAtaque=="2Manos"]
[h: bonoArma1 = json.get(arma1,"bonoBO") ] 
[h,if (bonoArma1==""): bonoArma = 0]
[h: bonoArma2 = json.get(arma1,"bonoBO") ] 
[h,if (bonoArma2==""): bonoArma = 0]

<!-- **********  Creo la lista de Armas disponibles a arrojar **********-->

<!-- **********  Obtengo rangos de las armas  **********-->
[h: listaArmas=""]
<!-- Obtengo las imagenes-->
[h: imgWeapon1 = tblImage("Weapons",json.get(arma1,"ID"))]
[h: imgWeapon2 = tblImage("Weapons",json.get(arma2,"ID"))]
[h: imgArma1 = replace(imgWeapon1, ":", "&#58;")]
[h: imgArma2 = replace(imgWeapon2, ":", "&#58;")]

<!-- Busco el bono x rango del token para arma 1-->
[h: rangoDeToken = tokenRango(tokenAtk,tokenTgt,arma1) ]
[h: d = getStrProp(rangoDeToken,"Dist")]
[h: b = getStrProp(rangoDeToken,"bonif")]
[h, if(number(b)>0): simbolo = "+" ; simbolo = ""]
[h: nameArma = json.get(arma1,"nombre")]
[h: bonoArma1 = json.get(arma1,"bonoBO")]
[h: txtArma1 = strformat("<b>%{nameArma}</b>   %{d} mts(%{simbolo}%{b})<br>Bono Bo = %{bonoArma1}")]
[h, if(pausear()==1): pause("b","rangoDeToken")]

[h, if(b != ""): listaArmas = listAppend(listaArmas,strformat("<html><img src='%{imgArma1}' width=90 height=90><p>%{txtArma1}</p></html>"))]

<!-- Busco el bono x rango del token para arma 2-->
[h: rangoDeToken = tokenRango(tokenAtk,tokenTgt,arma2) ]
[h: d = getStrProp(rangoDeToken,"Dist")]
[h: b = getStrProp(rangoDeToken,"bonif")]
[h, if(number(b)>0): simbolo = "+" ; simbolo = ""]
[h: nameArma = json.get(arma2,"nombre")]
[h: bonoArma2 = json.get(arma2,"bonoBO")]
[h: txtArma2 = strformat("<b>%{nameArma}</b>   %{d} mts(%{simbolo}%{b})<br>Bono Bo = %{bonoArma2}<br>Brazo izquierdo -30")]
[h, if(pausear()==1): pause("b","rangoDeToken")]
[h, if(b != ""): listaArmas = listAppend(listaArmas,strformat("<html><img src='%{imgArma2}' width=90 height=90><p>%{txtArma2}</p></html>"))]

<!-- **********  Obtengo la BO y busco modificadores  **********-->
[h: tipoAtaque = "Arrojadizo"]
[h: golpeActual = setStrProp(golpeActual,"ataqueEspecial",tipoAtaque)]
[h: boact = getBoActual(getName(),arma1,tipoAtaque) ]
[h, if(pausear()==1): pause("boact")]
[h: boOfen = boact + number(cambioArma*-30) - number(boUsada)]
[r, if(cambioArma>0): br =br+" Pen. por cambios de arma: "+(cambioArma*-30)+". " ]
[r, if(boUsada>0): br=br+ " Bo ya usada en el asalto: "+boUsada)+"." ]
[r, if (isPC()),code:{
	[w(getOwners()): br+"Bo Disponible para atacar = "+boOfen ]
};{
	[g: broadcast(br+"<br>Bo Disponible = "+boOfen, "GM")]
}]

<!-- ********** Invoco el Input  **********-->
[H: inputStr = "[]"]

[H: inputStr = json.append(inputStr,"lblNombre|<html>"+vsTable(tokenAtk,tokenTgt,"attackIcon")+"</html>|-|LABEL|SPAN=TRUE")]

[h: inputStr = json.append(inputStr,"boSeleccionada|"+ boOfen +"|Bo Arrojadiza |LABEL")]

[h: inputStr = json.append(inputStr,"armaUsada|"+listaArmas+"|Que Arma arrojar?|RADIO|SELECT=0")]

[H: input = input(json.toList(inputStr,"##"))]

[h: abort(input)]

[h, if(armaUsada == 0): armaSel = arma1 ; armaSel = arma2]

[h: bonoArma = json.get(armaSel,"BonoBO")]

<!-- ********** Calculo la BO Temporal  **********-->
[h, if(!isNumber(BonoBOFija)): BonoBOFija=0]
[h: boTmp = number(boOfen) + number(bonoArma)+ number(BonoBOFija)]

<!-- ********** Guardo los nuevos Datos dentro del golpeActual temporalmente  **********-->
[h: GolpeActual = setStrProp(GolpeActual,"boTmp",boTmp)]
[h: GolpeActual = setStrProp(GolpeActual,"target",tokenTgt)]
[h: GolpeActual = setStrProp(GolpeActual,"boUsadaTmp",boOfen)]
[h: jsonArmaUsada = json.set("{}","ID",json.get(armaSel,"ID"),"tipo",json.get(armaSel,"Tipo"))]
[h: GolpeActual = setStrProp(GolpeActual,"armaArrojada",jsonArmaUsada)]

<!-- ********** Preparo el Link para quien corresponda  **********-->
[h, token(tokenTgt): jugadoresDef = getOwners("json")]
[h, if ( json.contains( jugadoresDef , "KyoYNeo" )): json.removeAll(jugadoresDef, "['KyoYNeo']") ]
[h, if (isPC(tokenTgt)): obj = jugadoresDef ; obj = "gm"]
[h: link = macroLink("Defender a "+tokenTgt+" del ataque de"+  tokenAtk,"DeclaroDefensa@lib:asaltos", jugadoresDef, tokenAtk)]
[h: linkText = macroLinkText("DeclaroDefensa@lib:asaltos", jugadoresDef, tokenAtk)]

[h: broadcast(link, obj)]
[h: broadcast(link, "gm")]
[h: execLink(linkText,0, obj)]
[r: ObtenerSpeechAzar()]

@@DeclararAtaqueDist
@PROPS@ fontColor=white ; autoExecute=true ; fontSize=1.15em ; sortBy=0.91 ; color=red ; playerEditable=false ; applyToSelected=true ; group=Combate ; tooltip=Esta Macro dispara un ataque basandose en que el atacante es quien tiene la iniciativa. y el objetivo es quien esta marcado. Tambien deduce si es un ataque arrojadizo o multiple ; minWidth=120
<!-- DeclararAtaque --> 
[h: tokenAtk = arg(0)]
[h: multiplicadorDeDistancia = arg(1) ]
[h, if(tokenAtk == ""): tokenAtk = getName(getSelected())]
[h: switchToken(tokenAtk)]
[h: br = ""]
[h, if(pausear()==1): pause("tokenAtk")]
[h: ErrorMsg(length(GolpeActual),"Debe tener definifo GolpeActual")]
[h: varsFromStrProp( GolpeActual )]
[h: ErrorMsg(!countAtaques, tokenAtk + "Ya Ataco en este asalto")]

[h: ErrorMsg(length(brazo1),"Debe tener definifo Brazo 1")]
[h: ErrorMsg(length(brazo2),"Debe tener definifo Brazo 2")]
[h, if(pausear()==1): pause("brazo1")]

<!-- **********  Arma1, si no hay: uso pelea  **********-->
[h, if(json.type(brazo1) != "OBJECT"): brazo1 = table("Weapons",0)]
[h, if(json.type(brazo2) != "OBJECT"): brazo2 = table("Weapons",0)]
[h, if(json.type(brazo1) != "OBJECT"): tipoAtaque=="2Manos"]
[h: bonoArma = json.get(brazo1,"bonoBO") ] 
[h,if (bonoArma==""): bonoArma = 0]

<!-- **********  Obtengo la BO y busco modificadores  **********-->
[h: boact = getBoActual(getName(),brazo1) ]
[h, if(pausear()==1): pause("boact")]
[h: boOfen = boact + number(cambioArma*-30) - number(boUsada)]
[r,  if(cambioArma>0): br =br+" Pen. por cambios de arma: "+(cambioArma*-30)+". " ]
[r,  if(boUsada>0): br=br+ " Bo ya usada en el asalto: "+boUsada)+"." ]
[r, if (isPC()),code:{
	[r: "<br>Bo Disponible = "+boOfen]	
};{
	[gt: broadcast(br+"<br>Bo Disponible = "+bo, "GM")]
}]

<!-- **********  Tipo de ataque  **********-->
[h: tipoAtaque = getStrProp(GolpeActual,"tipoAtaque")]
[h,if(tipoAtaque==""),code:{
	[if(json.get(brazo1,"nombre")==json.get(brazo2,"nombre")): tipoAtaque=="2Manos"]
	[if(tipoAtaque=="" && (json.contains(brazo1, "criticos") && json.contains(brazo2, "criticos"))): tipoAtaque=="2Armas" ]
	[if(tipoAtaque==""): tipoAtaque=="1Mano"]
}] 

<!-- ********** Creo la lista de personajes cercanos  **********-->
[h,token(tokenAtk): lsVisibleNpc = json.intersection( getTokenNames("json"), getVisibleTokenNames("json") )]
[h: tokenList = json.toList(lsVisibleNpc)]
[H: Num = listCount(tokenList)]
[h: imgList = ""]
[h: finalTokenList = ""]
[h,COUNT(Num),CODE:
{	
	[h:tokenName=listGet(tokenList,roll.count)]
	[h: dist= getDistance(tokenName) / multiplicadorDeDistancia]	
	[h, if(dist <= 3 && tokenName != tokenAtk),code:{		
		[h,token(tokenName): image=getTokenImage()]
		[h:imgList=listAppend(imgList,tokenName+" "+image)]	
		[h: finalTokenList = listAppend(finalTokenList,tokenName)]
	}]	
}]

<!-- ********** Creo la lista de Disponibilidad de BO  **********-->
[h: arrEstilos = "" ]

[h, if(tipoAtaque =="2Armas"),code:{
	[h, for(i,0,boOfen,10): arrEstilos = listAppend(arrEstilos, add("BO=",boOfen-i,"; BD=",i/2,";") ) ]
	[h: arrEstilos = listAppend(arrEstilos, add("BO=",0,"; BD=",boOfen/2,";") ) ]
	[h: bonoArma = bonoArma + json.get(brazo2,"bonoBO")/2 ] 
};{
	[h, for(i,0,boOfen,5): arrEstilos = listAppend(arrEstilos, add("BO=",boOfen-i,"; BD=",i,";") ) ]	
	[h: arrEstilos = listAppend(arrEstilos, add("BO=",0,"; BD=",boOfen,";") ) ]
}]

<!-- ********** Veo si tiene escudo o nada.  **********-->
 [h:bono2 =0]
[h,if(tipoAtaque=="1Mano" && json.contains(brazo2, "bonoBD")): bono2 =   "+"+ json.get(brazo2,"bonoBD")+" BD"]
[h,if(tipoAtaque=="2Armas"): bono2 =   "+"+ number(json.get(brazo2,"bonoBO"))/2+" BO"]

[h, if(pausear()==1): pause("bono2")]

<!-- ********** Invoco el Input  **********-->
[H: inputStr = "[]"]
[h: imgWeapon1 = tblImage("Weapons",json.get(brazo1,"ID"))]
[h, if (json.contains(brazo2, "criticos")) : tbBrazo2 = "Weapons" ; tbBrazo2 = "Shields"]
[h: imgWeapon2 = tblImage(tbBrazo2,json.get(brazo2,"ID"))]
[H: inputStr = json.append(inputStr,"lblNombre|<html><h2>Ataque de "+tokenAtk+"</h2></html>|-|LABEL|SPAN=TRUE")]
[H: inputStr = json.append(inputStr,"junk|<html><table border=1  width='400'><tr><th width='50%'><img src='"+replace(imgWeapon1, ":", "&#58;")+"' width=120 height=120></img></th><th width=50%><img src='"+replace(imgWeapon2, ":", "&#58;")+"' width=120 height=120></img></th></tr></table></html>|-|LABEL|SPAN=TRUE")]

[H: inputStr = json.append(inputStr,"armasLbl1|+"+json.get(brazo1,"bonoBO")+"|"+json.get(brazo1,"nombre")+"|LABEL")]
[h, if(bono2!=0): inputStr = json.append(inputStr,"armasLbl2|"+bono2+"|"+json.get(brazo2,"nombre")+"|LABEL")]
[h: inputStr = json.append(inputStr,"target|"+imgList+"|Enemigo Objetivo|LIST|SELECT=0 ICON=TRUE ICONSIZE=30")]
[h: inputStr = json.append(inputStr,"boSeleccionada|"+ arrEstilos +"|Cuanto Bo Ataque / Defensa |LIST|SELECT=0 VALUE=STRING")]

[H: input = input(json.toList(inputStr,"##"))]
[h: abort(input)]

<!-- ********** Calculo la BO Temporal  **********-->
[h, if(!isNumber(BonoBOFija)): BonoBOFija=0]
[h: boTmp = number(getStrProp(boSeleccionada,"BO")) + number(bonoArma)+ number(BonoBOFija)]

	
<!-- ********** Tomo el Target  **********-->
[h: target = listGet(finalTokenList,Target)]

<!-- ********** Guardo los nuevos Datos dentro del golpeActual temporalmente  **********-->
[h: GolpeActual = setStrProp(GolpeActual,"boTmp",boTmp)]
[h: GolpeActual = setStrProp(GolpeActual,"target",target)]
[h: GolpeActual = setStrProp(GolpeActual,"boUsadaTmp",getStrProp(boSeleccionada,"BO"))]

<!-- ********** Preparo el Link para quien corresponda  **********-->
[h,token(Target): jugadoresDef = getOwners()]

[h, if(pausear()==1): pause("obj")]
[h: link = macroLink("Defender a "+target+" del ataque de"+  tokenAtk,"Defender@Lib:personajes", "none", tokenAtk,"")]

[h, if ( json.contains( jugadoresDef , "KyoYNeo" )): json.removeAll(jugadoresDef, "['KyoYNeo']") ]

[h, if (isPC(Target)),code:{ 
	[h: broadcast(link, jugadoresDef + ",GM")] 
	[broadcast(macroLink("<color='red'>", "Defender@Lib:personajes", 'none', tokenAtk, ""), jugadoresDef)] 
} ; { 
	[h: broadcast(link, "GM")]	
	
}]

[r: ObtenerSpeechAzar()]

@@DeclararAtaqueFireBall
@PROPS@ fontColor=red ; autoExecute=true ; fontSize=1.15em ; sortBy=1 ; color=yellow ; playerEditable=false ; applyToSelected=false ; group=Combate ; tooltip= ; minWidth=120
<!-- DeclararAtaqueFireBall --> 
[h: tokenAtk = arg(0)]
[h: tokenTgt = arg(1) ]
[h, if(tokenAtk == ""): tokenAtk = getName(getSelected())]

[h,token(tokenAtk): ErrorMsg(length(GolpeActual),"Debe tener definido GolpeActual")]
[h: armaMagica = tbl("MagiaOfensiva",0)]

[h,token(tokenAtk): varsFromStrProp( GolpeActual )]
[h, token(tokenTgt): setLight("Magias","A_BolaDeFuego",1)]
<!-- **********  Obtengo la BO del Arma  **********-->

[h: bonoArma = 0 ]

<!-- **********  Obtengo la BO y busco modificadores  **********-->
[h,token(tokenAtk): boact = json.get(hoja,"HB_SB") ]

<!-- ********** Creo la lista de personajes a distancia maxima  **********-->

[h: condEnemigos = '{ "layer": ["TOKEN"], "range": {"upto":15, "distancePerCell":1, "token":"' +tokenTgt+ '"} }']
[h: tokenList = getTokenNames(",", condEnemigos)]

[h: tokenList = listDelete(tokenList, listFind(tokenList,tokenAtk))]
[h: tokenList = listAppend(tokenList, getName(tokenTgt))]
[H: Num = listCount(tokenList)]
[h: finalTokenList = ""]
[h,COUNT(Num),code:{
	[ tokenName=listGet(tokenList,roll.count)]
	[h, token(tokenName): image=getTokenImage()]
	[ txtToken = strformat("%{tokenName} %{image}")]
	[ imgList = listAppend(txtToken,tokenName+" "+image)]	
	[ finalTokenList = listAppend(finalTokenList,txtToken)]
}] 

<!-- ********** Invoco el Input  **********-->
[H: inputStr = "[]"]
[h: imgWeapon1 = tblImage("MagiaOfensiva",json.get(armaMagica,"ID"))]

[H: inputStr = json.append(inputStr,"junk|<html><h1>"+tokenAtk+"</h1><table border=1  width='300'><tr><th width='100%'><img src='"+replace(imgWeapon1, ":", "&#58;")+"' width=120 height=120></img></table></th><h2>BO de Bola = "+boact+"</h2></html>|-|LABEL|SPAN=TRUE")]
[h: inputStr = json.append(inputStr,"targets|<html><h3>Objetivos</h3></html>|STARGETSlbl|LABEL|SPAN=TRUE ICON=TRUE")]
[h,COUNT(Num),code:{
	[h: tokenName=listGet(finalTokenList,roll.count)]
	[h: inputStr = json.append(inputStr,"targets|"+ tokenName +"|STARGETS|LABEL|SPAN=TRUE ICON=TRUE")]
}] 

[H: input = input(json.toList(inputStr,"##"))]
[h: abort(input)]

<!-- ********** Guardo los nuevos Datos dentro del golpeActual temporalmente  **********-->
[h,token(tokenAtk): GolpeActual = setStrProp(GolpeActual,"boTmp",boact)]
[h,token(tokenAtk): GolpeActual = setStrProp(GolpeActual,"target",tokenTgt)]

<!-- ********** Preparo el Link para el GM  **********-->

[h: jsonList = ""]
[h: broadcast("<h2>DANIOOS DE BOLA DE FUEGO</h2>","gm")]
[r, foreach(tgt,tokenList),code:{
	
	[h,token(tgt): json = json.set("{}","tkn",tgt,"bd",getHoja("BD",tgt),"arm",Armadura)]
	[h: jsonList = json.append(jsonList,json)]	

}]

[h: jsonDatos = json.set("{}","list",jsonList,"bo",boact,"danioTable","ataqueBolaDeFuego")]
	
[h: link = macroLink("Calcular Danio de bola de Fuego: "+tokenAtk+" a "+tokenList,"CalculoDanioFireBall@lib:asaltos", "gm", jsonDatos)]
[h: linkText = macroLinkText("CalculoDanioFireBall@lib:asaltos", "gm", jsonDatos)]

[h: broadcast(link, "gm")]
[h: execLink(linkText,0, "gm")]

@@DeclararAtaqueFireBallSEL
@PROPS@ fontColor=red ; autoExecute=true ; fontSize=1.15em ; sortBy=1 ; color=yellow ; playerEditable=false ; applyToSelected=true ; group=Combate ; tooltip= ; minWidth=120
<!-- DeclararAtaqueFireBall --> 
[h: tokenAtk = arg(0)]
[h: tokenTgts = arg(1) ]
[h, if(tokenAtk == ""): tokenAtk = getName(getSelected())]

[h,token(tokenAtk): ErrorMsg(length(GolpeActual),"Debe tener definido GolpeActual")]
[h: armaMagica = tbl("MagiaOfensiva",0)]

[h,token(tokenAtk): varsFromStrProp( GolpeActual )]

<!-- **********  Obtengo la BO del Arma  **********-->

[h: bonoArma = 0 ]

<!-- **********  Obtengo la BO y busco modificadores  **********-->
[h,token(tokenAtk): boact = json.get(hoja,"HB_SB") ]

[h: tokenList = tokenTgts]

[H: Num = listCount(tokenList)]
[h: finalTokenList = ""]
[h,COUNT(Num),code:{
	[ tokenName=listGet(tokenList,roll.count)]
	[h, token(tokenName): image=getTokenImage()]
	[ txtToken = strformat("%{tokenName} %{image}")]
	[ imgList = listAppend(txtToken,tokenName+" "+image)]	
	[ finalTokenList = listAppend(finalTokenList,txtToken)]
}] 

<!-- ********** Invoco el Input  **********-->
[H: inputStr = "[]"]
[h: imgWeapon1 = tblImage("MagiaOfensiva",json.get(armaMagica,"ID"))]

[H: inputStr = json.append(inputStr,"junk|<html><h1>"+tokenAtk+"</h1><table border=1  width='300'><tr><th width='100%'><img src='"+replace(imgWeapon1, ":", "&#58;")+"' width=120 height=120></img></table></th><h2>BO de Bola = "+boact+"</h2></html>|-|LABEL|SPAN=TRUE")]
[h: inputStr = json.append(inputStr,"targets|<html><h3>Objetivos</h3></html>|STARGETSlbl|LABEL|SPAN=TRUE ICON=TRUE")]
[h,COUNT(Num),code:{
	[h: tokenName=listGet(finalTokenList,roll.count)]
	[h: inputStr = json.append(inputStr,"targets|"+ tokenName +"|STARGETS|LABEL|SPAN=TRUE ICON=TRUE")]
}] 

[H: input = input(json.toList(inputStr,"##"))]
[h: abort(input)]

<!-- ********** Guardo los nuevos Datos dentro del golpeActual temporalmente  **********-->
[h,token(tokenAtk): GolpeActual = setStrProp(GolpeActual,"boTmp",boact)]
[h,token(tokenAtk): GolpeActual = setStrProp(GolpeActual,"target",listget(tokenTgts,0))]

<!-- ********** Preparo el Link para el GM  **********-->

[h: jsonList = ""]
[h: broadcast("<h2>DANIOOS DE BOLA DE FUEGO</h2>","gm")]
[r, foreach(tgt,tokenList),code:{
	
	[h,token(tgt): json = json.set("{}","bd",getHoja("BD",tgt),"arm",Armadura)]
	[h: jsonList = json.set(jsonList,tgt,json)]	

}]

[h: jsonDatos = json.set("{}","tokenTgts",jsonList,"bo",boact,"danioTable","ataqueBolaDeFuego")]
	
[h: link = macroLink("Calcular Danio de bola de Fuego: "+tokenAtk+" a "+tokenList,"CalculoDanioFireBall@lib:asaltos", "gm", jsonDatos)]
[h: linkText = macroLinkText("CalculoDanioFireBall@lib:asaltos", "gm", jsonDatos)]

[h: broadcast(link, "gm")]
[h: execLink(linkText,0, "gm")]

@@DeclararAtaqueMultiple
@PROPS@ fontColor=white ; autoExecute=true ; fontSize=1.15em ; sortBy=1 ; color=purple ; playerEditable=false ; applyToSelected=true ; group=Combate ; tooltip=Aqui se elije el objetivo desde una lista ; minWidth=120
<!-- DeclararAtaqueMulti --> 
[h: tokenAtk = arg(0)]
[h, if(tokenAtk == ""): tokenAtk = getName(getSelected())]
[h: switchToken(tokenAtk)]

<!-- **********  Continuo el combate  **********-->
[h: br = ""]
[h: enemigosAtacados = ""]
[h: cantMultiAtaques = 0 ]
[h: boUsadaFija = 0 ]
[h: bonoNegativo = 0 ]

[h, if(pausear()==1): pause("tokenAtk")]
[h: ErrorMsg(length(GolpeActual),"Debe tener definifo GolpeActual")]

[h: ErrorMsg(length(brazo1),"Debe tener definifo Brazo 1")]
[h: ErrorMsg(length(brazo2),"Debe tener definifo Brazo 2")]
[h, if(pausear()==1): pause("brazo1")]
[h: varsFromStrProp( GolpeActual )]
<!--  si existe un bonoNegativo, entonces se seteo MultiAtaues, entonces si la cantidad de enemigosAtacados es igual a multiataques, ya realizo todos los ataques de este asalto. -->
[H, if ( bonoNegativo  != 0 && listCount(enemigosAtacados) >= cantMultiAtaques ): res = 0 ; res = 1 ]
[h: ErrorMsg(res,"Ya ataco a todos los enemigos en este asalto.")]

<!-- **********  Arma1, si no hay: uso pelea  **********-->
[h, if(json.type(brazo1) != "OBJECT"): brazo1 = table("Weapons",0)]
[h, if(json.type(brazo2) != "OBJECT"): brazo2 = table("Weapons",0)]
[h, if(json.type(brazo1) != "OBJECT"): tipoAtaque=="2Manos"]
[h: bonoArma = json.get(brazo1,"bonoBO") ]
[h,if (bonoArma==""): bonoArma = 0]

<!-- **********  Obtengo la BO y busco modificadores  **********-->
[h: boact = getBoActual(getName(),brazo1) ]
[h, if(pausear()==1): pause("boact")]
[h: boOfen = boact + number(cambioArma*-30) - number(boUsada)]
[r,  if(cambioArma>0): br =br+" Pen. por cambios de arma: "+(cambioArma*-30)+". " ]
[r,  if(boUsada>0): br=br+ " Bo ya usada en el asalto: "+boUsada)+"." ]
[r, if (isPC()),code:{
	 "<br>Bo Disponible = "+{boOfen}+"<br>"	
};{
	[gt: broadcast(br+"<br>Bo Disponible = "+bo, "GM")]
}]

<!-- **********  Tipo de ataque  **********-->
[h: tipoAtaque = getStrProp(GolpeActual,"tipoAtaque")]
[h,if(tipoAtaque==""),code:{
	[if(json.get(brazo1,"nombre")==json.get(brazo2,"nombre")): tipoAtaque=="2Manos"]
	[if(tipoAtaque=="" && (json.contains(brazo1, "criticos") && json.contains(brazo2, "criticos"))): tipoAtaque=="2Armas" ]
	[if(tipoAtaque==""): tipoAtaque=="1Mano"]
}] 

<!-- ********** Creo la lista de personajes cercanos  **********-->
[h,token(tokenAtk): lsVisibleNpc = json.intersection( getTokenNames("json"), getVisibleTokenNames("json") )]
[h: tokenList = json.toList(lsVisibleNpc)]
[H: Num = listCount(tokenList)]
[h: imgList = ""]
[h: finalTokenList = ""]
[h,COUNT(Num),CODE:
{	
	[h:tokenName=listGet(tokenList,roll.count)]
	[h: dist= getDistance(tokenName)]	
	[h, if(dist <= 3 && tokenName != tokenAtk &&  !listContains(enemigosAtacados,tokenName)),code:{		
		[h,token(tokenName): image=getTokenImage()]
		[h:imgList=listAppend(imgList,tokenName+" "+image)]	
		[h: finalTokenList = listAppend(finalTokenList,tokenName)]
	}]	
}]

<!-- ********** Creo la lista de Disponibilidad de BO  **********-->
[h: arrEstilos = "" ]

[h, if(tipoAtaque =="2Armas"),code:{
	[h, for(i,0,boOfen,10): arrEstilos = listAppend(arrEstilos, add("BO=",boOfen-i,"; BD=",i/2,";") ) ]
	[h: arrEstilos = listAppend(arrEstilos, add("BO=",0,"; BD=",boOfen/2,";") ) ]
	[h: bonoArma = bonoArma + json.get(brazo2,"bonoBO")/2 ] 
};{
	[h, for(i,0,boOfen,5): arrEstilos = listAppend(arrEstilos, add("BO=",boOfen-i,"; BD=",i,";") ) ]	
	[h: arrEstilos = listAppend(arrEstilos, add("BO=",0,"; BD=",boOfen,";") ) ]
}]

<!-- ********** Veo si tiene escudo o nada.  **********-->
 [h:bono2 =0]
[h,if(tipoAtaque=="1Mano" && json.contains(brazo2, "bonoBD")): bono2 =   "+"+ json.get(brazo2,"bonoBD")+" BD"]
[h,if(tipoAtaque=="2Armas"): bono2 =   "+"+ number(json.get(brazo2,"bonoBO"))/2+" BO"]

[h, if(pausear()==1): pause("bono2")]

<!-- *****************************************************-->
<!-- **********  Preguntar Cantidad de ataques  **********-->
[H: inputStr = "[]"]

[h: imgWeapon1 = tblImage("Weapons",json.get(brazo1,"ID"))]
[h, if (json.contains(brazo2, "criticos")) : tbBrazo2 = "Weapons" ; tbBrazo2 = "Shields"]
[h: imgWeapon2 = tblImage(tbBrazo2,json.get(brazo2,"ID"))]
[H: inputStr = json.append(inputStr,"lblNombre|<html><h2>Ataque de "+tokenAtk+"</h2></html>|-|LABEL|SPAN=TRUE")]
[H: inputStr = json.append(inputStr,"junk|<html><table border=1  width='400'><tr><th width='50%'><img src='"+replace(imgWeapon1, ":", "&#58;")+"' width=120 height=120></img></th><th width=50%><img src='"+replace(imgWeapon2, ":", "&#58;")+"' width=120 height=120></img></th></tr></table></html>|-|LABEL|SPAN=TRUE")]
[h: inputStr = json.append(inputStr,"armasLbl1|+"+json.get(brazo1,"bonoBO")+"|"+json.get(brazo1,"nombre")+"|LABEL")]
[h, if(bono2!=0): inputStr = json.append(inputStr,"armasLbl2|"+bono2+"|"+json.get(brazo2,"nombre")+"|LABEL")]
[H: inputStr = json.append(inputStr,"picChoice|2 Enemigos(-50),3 Enemigos(-100),4 Enemigos(-150)|Cuantos Enemigos Atacaras?|RADIO|ORIENT=V SELECT=0" )]
[h: inputStr = json.append(inputStr,"boSeleccionada|"+ arrEstilos +"|Cuanto Bo Ataque / Defensa |LIST|SELECT=0 VALUE=STRING")]

[h, if( bonoNegativo == 0 ),code:{
	[H: input = input(json.toList(inputStr,"##"))]
	[h: abort(input)]	
	[h, if(pausear()==1): pause("bonoNegativo")]
	[h: boUsadaFija = number(getStrProp(boSeleccionada,"BO"))]	

	[h, if(picChoice==0): bonoNegativo = -50 ]
	[h, if(picChoice==1): bonoNegativo = -100 ]
	[h, if(picChoice==2): bonoNegativo = -150 ]
	[h, if(picChoice==3): bonoNegativo = -200 ]
	[h: GolpeActual = setStrProp(GolpeActual,"boUsadaFija", boUsadaFija) ]
	[h: GolpeActual = setStrProp(GolpeActual,"bonoNegativo", bonoNegativo) ]
	[h: GolpeActual = setStrProp(GolpeActual,"cantMultiAtaques", picChoice) ]

}]

<!-- *****************************************************-->

<!-- ********** Invoco el Input  de seleccion de target **********-->
[H: inputStr = "[]"]
[h: imgWeapon1 = tblImage("Weapons",json.get(brazo1,"ID"))]
[h, if (json.contains(brazo2, "criticos")) : tbBrazo2 = "Weapons" ; tbBrazo2 = "Shields"]
[h: imgWeapon2 = tblImage(tbBrazo2,json.get(brazo2,"ID"))]
[H: inputStr = json.append(inputStr,"lblNombre|<html><h2>Ataque de "+tokenAtk+"</h2></html>|-|LABEL|SPAN=TRUE")]
[H: inputStr = json.append(inputStr,"junk|<html><table border=1  width='400'><tr><th width='50%'><img src='"+replace(imgWeapon1, ":", "&#58;")+"' width=120 height=120></img></th><th width=50%><img src='"+replace(imgWeapon2, ":", "&#58;")+"' width=120 height=120></img></th></tr></table></html>|-|LABEL|SPAN=TRUE")]

[H: inputStr = json.append(inputStr,"armasLbl1|+"+json.get(brazo1,"bonoBO")+"|"+json.get(brazo1,"nombre")+"|LABEL")]
[h, if(bono2!=0): inputStr = json.append(inputStr,"armasLbl2|"+bono2+"|"+json.get(brazo2,"nombre")+"|LABEL")]
[h: inputStr = json.append(inputStr,"target|"+imgList+"|Enemigo Objetivo|LIST|SELECT=0 ICON=TRUE ICONSIZE=30")]
[h: inputStr = json.append(inputStr,"boSeleccionadaMulti|"+ boUsadaFija +" ATK  &  "+ (boOfen-boUsadaFija) +" DEF.|Cuanto Bo Ataque / Defensa |LABEL")]
[h: inputStr = json.append(inputStr,"penaGolpes|"+bonoNegativo+"|Penalizacion por Golpes|LABEL|ICON=TRUE")]
	[h, if(pausear()==1): pause("inputStr")]
[H: input = input(json.toList(inputStr,"##"))]
[h: abort(input)]

<!-- ********** Calculo la BO Temporal  **********-->
[h, if(!isNumber(BonoBOFija)): BonoBOFi=0 ; BonoBOFi=BonoBOFija]
[h: boTmp = number(boUsadaFija) + number(bonoNegativo) + number(bonoArma)+ number(BonoBOFi)]

	
<!-- ********** Tomo el Target  **********-->
[h: target = listGet(finalTokenList,Target)]

<!-- ********** Guardo los nuevos Datos dentro del golpeActual temporalmente  **********-->
[h: GolpeActual = setStrProp(GolpeActual,"boTmp",boTmp)]
[h: GolpeActual = setStrProp(GolpeActual,"target",target)]
[h: GolpeActual = setStrProp(GolpeActual,"boUsadaTmp",boUsadaFija)]

<!-- ********** Preparo el Link para quien corresponda  **********-->
[h, token(Target): jugadoresDef = getOwners()]
[h, if (isPC(Target)): obj = jugadoresDef ; obj = "gm"]

[h: link = macroLink("Defender a "+target+" del ataque de"+  tokenAtk,"DeclaroDefensa@lib:asaltos", jugadoresDef, tokenAtk)]
[h: linkText = macroLinkText("DeclaroDefensa@lib:asaltos", "none", tokenAtk)]

[h: broadcast(link, "gm")]
[h: broadcast(link, obj)]
[h: execLink(linkText,0, obj)]

[r: ObtenerSpeechAzar()]

@@DeclararAtaqueMultipleV3
@PROPS@ fontColor=white ; autoExecute=true ; fontSize=1.15em ; sortBy=1 ; color=purple ; playerEditable=false ; applyToSelected=true ; group=Combate ; tooltip= ; minWidth=120
<!-- DeclararAtaqueMultipleV3 --> 
[h: tokenAtk = arg(0) ]
[h: tokenTgts = arg(1) ]

[h, if( tokenAtk  ==  "" ): tokenAtk = getName(getSelected()) ]
[h: switchToken(tokenAtk) ]

<!-- **********  Continuo el combate  **********-->
[h: br = ""]

[h: varsFromStrProp( GolpeActual ) ]
[h: cantMultiAtaques = listCount(tokenTgts) ]
[h: boUsadaFija = 0 ]
[h: bonoNegativo = (cantMultiAtaques-1) * -50 ]
[h, if( pausear() == 1 ): pause("bonoNegativo") ]
[h, if( pausear() == 1 ): pause("tokenAtk") ]
[h: ErrorMsg(length(GolpeActual),"Debe tener definifo GolpeActual") ]

[h: ErrorMsg(length(brazo1),"Debe tener definifo Brazo 1") ]
[h: ErrorMsg(length(brazo2),"Debe tener definifo Brazo 2") ]

<!--  si existe un bonoNegativo, entonces se seteo MultiAtaues, entonces si la cantidad de enemigosAtacados es igual a multiataques, ya realizo todos los ataques de este asalto. -->
[H, if ( bonoNegativo  != 0 && listCount(enemigosAtacados) >= cantMultiAtaques  ): res = 0 ; res = 1 ]
[h: ErrorMsg(res,"Ya ataco a todos los enemigos en este asalto.") ]

<!-- **********  Arma, si no hay: uso pelea  **********-->
[h, if( json.type(brazo1) != "OBJECT" ): brazo1 = table("Weapons",0) ]
[h, if( json.type(brazo2) != "OBJECT" ): brazo2 = table("Weapons",0) ]
[h, if( json.type(brazo1) != "OBJECT" ): tipoAtaque == "2Manos"]
[h: bonoArma = json.get(brazo1,"bonoBO") ]
[h,if (bonoArma == "" ): bonoArma = 0]

<!-- **********  Obtengo la BO y busco modificadores  **********-->
[h: boact = getBoActual(getName(),brazo1) ]
[h, if( pausear() == 1 ): pause("boact") ]
[h: boOfen = boact + number(cambioArma*-30) - number(boUsada) + number(bonoNegativo)]
[r, if( cambioArma>0 ): br =br+" Pen. por cambios de arma: "+(cambioArma*-30)+". " ]
[r, if( boUsada>0 ): br=br+ " Bo ya usada en el asalto: "+boUsada)+"." ]
[r, if (isPC() ),code:{
	 "<br>Bo Disponible = "+{boOfen}+"<br>"	
};{
	[gt: broadcast(br+"<br>Bo Disponible = "+bo, "GM") ]
}]

<!-- **********  Tipo de ataque  **********-->
[h: tipoAtaque = getStrProp(GolpeActual,"tipoAtaque") ]
[h,if( tipoAtaque == "" ),code:{
	[ if( json.get(brazo1,"nombre") == json.get(brazo2,"nombre") ): tipoAtaque == "2Manos"]
	[ if( tipoAtaque == "" && (json.contains(brazo1, "criticos") && json.contains(brazo2, "criticos")) ): tipoAtaque == "2Armas" ]
	[ if( tipoAtaque == "" ): tipoAtaque == "1Mano"]
}] 

<!-- ********** Creo la lista de Disponibilidad de BO  **********-->
[h: arrEstilos = "" ]

[h, if( tipoAtaque  == "2Armas" ),code:{
	[h, for(i,0,boOfen,10 ): arrEstilos = listAppend(arrEstilos, add("BO=",boOfen-i,"; BD=",i/2,";") ) ]
	[h: arrEstilos = listAppend(arrEstilos, add("BO=",0,"; BD=",boOfen/2,";") ) ]
	[h: bonoArma = bonoArma + json.get(brazo2,"bonoBO")/2 ] 
};{
	[h, for(i,0,boOfen,5 ): arrEstilos = listAppend(arrEstilos, add("BO=",boOfen-i,"; BD=",i,";") ) ]	
	[h: arrEstilos = listAppend(arrEstilos, add("BO=",0,"; BD=",boOfen,";") ) ]
}]

<!-- ********** Veo si tiene escudo o nada.  **********-->
[h: bono2 = 0]
[h, if( tipoAtaque  ==  "1Mano" && json.contains(brazo2, "bonoBD")  ): bono2 =   "+"+ json.get(brazo2,"bonoBD")+" BD"]
[h, if( tipoAtaque  ==  "2Armas"  ): bono2 =  "+"+ number(json.get(brazo2,"bonoBO"))/2+" BO"]

[h, if( pausear() == 1 ): pause("tokenTgts") ]

<!-- *****************************************************-->
<!-- **********  Preguntar Cantidad de ataques  **********-->
[H: inputStr = "[]"]

[H: inputStr = json.append(inputStr,"lblNombre|<html>"+vsTableMultiple(tokenAtk,tokenTgts,"attackIcon")+"</html>|-|LABEL|SPAN=TRUE")]

[h: imgWeapon1 = tblImage("Weapons",json.get(brazo1,"ID")) ]
[h, if (json.contains(brazo2, "criticos")) : tbBrazo2 = "Weapons" ; tbBrazo2 = "Shields"]
[h: imgWeapon2 = tblImage(tbBrazo2,json.get(brazo2,"ID")) ]

[H: inputStr = json.append(inputStr,"junk|<html><table border=1  width='400'><tr><th width='50%'><img src='"+replace(imgWeapon1, ":", "&#58;")+"' width=120 height=120></img></th><th width=50%><img src='"+replace(imgWeapon2, ":", "&#58;")+"' width=120 height=120></img></th></tr></table></html>|-|LABEL|SPAN=TRUE") ]

<!-- Bonos de bo, de un arma, o de las dos -->
[h: inputStr = json.append(inputStr,"armasLbl1|+"+json.get(brazo1,"bonoBO")+"|"+json.get(brazo1,"nombre")+"|LABEL") ]
[h, if( bono2 != 0 ): inputStr = json.append(inputStr,"armasLbl2|"+bono2+"|"+json.get(brazo2,"nombre")+"|LABEL") ]

<!-- Bonos de bo, de un arma, o de las dos -->
[h: inputStr = json.append(inputStr,"penaGolpes|"+bonoNegativo+"|Penalizacion por Golpes|LABEL|ICON=TRUE") ]
[h: inputStr = json.append(inputStr,"penaGolpesLbl|Esta penalizacion se aplicara en todos los ataques|Esta penalizacion se aplicara en todos los ataques|LABEL|SPAN=TRUE") ]
[h: inputStr = json.append(inputStr,"boSeleccionada|"+ arrEstilos +"|Cuanto Bo Ataque / Defensa |LIST|SELECT=0 VALUE=STRING") ]

<!-- Disparon el Input -->

[H: input = input(json.toList(inputStr,"##")) ]
[h: abort(input) ]	

[h: boUsadaFija = number(getStrProp(boSeleccionada,"BO")) ]	
[h: GolpeActual = setStrProp(GolpeActual,"bonoNegativo", bonoNegativo) ]
[h: GolpeActual = setStrProp(GolpeActual,"cantMultiAtaques", cantMultiAtaques) ]

<!-- ********** Calculo la BO Temporal  **********-->
[h, if( !isNumber(BonoBOFija) ): BonoBOFi=0 ; BonoBOFi=BonoBOFija]
[h: boTmp = number(boUsadaFija) + number(bonoNegativo) + number(bonoArma)+ number(BonoBOFi) ]

<!-- ********** Guardo los nuevos Datos dentro del golpeActual temporalmente  **********-->
[h: GolpeActual = setStrProp(GolpeActual,"boTmp",boTmp) ]
[h: GolpeActual = setStrProp(GolpeActual,"target",tokenTgts) ]
[h: GolpeActual = setStrProp(GolpeActual,"boUsadaTmp",boUsadaFija) ]

<!-- ********** Preparo los Link para quien corresponda  **********-->

[h: multipleAttakDialog( tokenAtk , tokenTgts)]

[r: ObtenerSpeechAzar() ]

@@DeclararAtaqueProyectil
@PROPS@ fontColor=white ; autoExecute=true ; fontSize=1.15em ; sortBy=1 ; color=orange ; playerEditable=false ; applyToSelected=true ; group=Combate ; tooltip= ; minWidth=120
<!-- DeclararAtaqueProyectil --> 
[h: tokenAtk = arg(0)]
[h, if(tokenAtk == ""): tokenAtk = getName(getSelected())]
[h: switchToken(tokenAtk)]
[h: ErrorMsg(length(GolpeActual),"Debe tener definifo GolpeActual")]

[h, if(pausear()==1): pause("brazo1")]
[h: varsFromStrProp( GolpeActual )]

<!-- **********  Obtengo la BO del Arma  **********-->
[h: bonoArma = json.get(brazo1,"bonoBO") ] 
[h: armaProyectil = brazo1 ] 

[h,if (bonoArma==""): bonoArma = 0]

<!-- **********  Obtengo la BO y busco modificadores  **********-->
[h: boact = getBoActual(getName(),armaProyectil) ]
[h: bonoBOProy = boact + number(cambioArma*-30)]

<!-- ********** Creo la lista de personajes a distancia maxima  **********-->

[h: p2 = getVisibleTokenNames("json")]
[h: p3 = getTokenNames("json",json.set("{}","PropertyType",json.append("[]","Npc","Jugador")))]
[h, if(pausear()==1): pause("p1","p2","p3")]

[h,token(tokenAtk): lsVisibleNpc = json.intersection( p2, p3 )]
[h: tokenList = json.toList(lsVisibleNpc)]
[h: tokenList = listDelete(tokenList, listFind(tokenList,tokenAtk))]
[H: Num = listCount(tokenList)]
[h: finalTokenList = ""]
[h,COUNT(Num),code:{
	[h: tokenName=listGet(tokenList,roll.count)]
	[h, token(tokenName): image=getTokenImage()]
	[h: rangoDeToken = tokenRango(tokenAtk,tokenName,armaProyectil) ]
	[h: d = getStrProp(rangoDeToken,"Dist")]
	[h: b = getStrProp(rangoDeToken,"bonif")]
	[ if(number(b)>0): simbolo = "+" ; simbolo = ""]
	[h: txtToken = strformat("%{tokenName}- %{d} mts(%{simbolo}%{b}) %{image}")]
	[h: imgList = listAppend(txtToken,tokenName+" "+image)]	
	[finalTokenList = listAppend(finalTokenList,txtToken)]
}] 

<!-- ********** Invoco el Input  **********-->
[H: inputStr = "[]"]
[h: imgWeapon1 = tblImage("Bows",json.get(armaProyectil,"ID"))]

[H: inputStr = json.append(inputStr,"junk|<html><table border=1  width='300'><tr><th width='100%'><img src='"+replace(imgWeapon1, ":", "&#58;")+"' width=120 height=120></img></th></table></html>|-|LABEL|SPAN=TRUE")]
[H: inputStr = json.append(inputStr,"armasLbl1|+"+json.get(armaProyectil,"bonoBO")+"|"+json.get(armaProyectil,"nombre")+"|LABEL")]
[h: inputStr = json.append(inputStr,"target|"+finalTokenList+"|Enemigo Objetivo|LIST|SELECT=0 ICON=TRUE ICONSIZE=30")]

[H: input = input(json.toList(inputStr,"##"))]
[h: abort(input)]

<!-- ********** Calculo la BO Temporal  **********-->
[h: boTmp = number(bonoBOProy) + number(bonoArma)+ number(BonoBOFija)]
	
<!-- ********** Tomo el Target  **********-->
[h: target = listGet(tokenList,target)]

<!-- ********** Guardo los nuevos Datos dentro del golpeActual temporalmente  **********-->
[h: GolpeActual = setStrProp(GolpeActual,"boTmp",boTmp)]
[h: GolpeActual = setStrProp(GolpeActual,"target",target)]

<!-- ********** Preparo el Link para quien corresponda  **********-->
[h,token(target): jugadoresDef = getOwners("json")]
[h, if ( json.contains( jugadoresDef , "KyoYNeo" )): json.removeAll(jugadoresDef, "['KyoYNeo']") ]
[h, if (isPC(target)): obj = jugadoresDef ; obj = "gm"]
[h: link = macroLink("Defender a "+target+" del ataque de"+  tokenAtk,"DeclaroDefensa@lib:asaltos", jugadoresDef, tokenAtk)]
[h: linkText = macroLinkText("DeclaroDefensa@lib:asaltos", jugadoresDef, tokenAtk)]

[gt: link]
[h: broadcast(link, "gm")]
[r: execLink(linkText,0, obj)]

[r: ObtenerSpeechAzar()]

@@DeclaroDefensa
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.10em ; sortBy=2 ; color=darkgray ; playerEditable=false ; applyToSelected=false ; group=Combate ; tooltip= ; minWidth=120
<!-- declaroDefensa -->
[h: tokenAtk =arg(0)]
[h: br=""]
[h: ga_atk =getProperty("GolpeActual",tokenAtk)]
[h: tokenTgt = getStrProp(ga_atk,"target")]
[h: switchToken(tokenTgt)]

[h: varsFromStrProp(getProperty("GolpeActual"))]

<!-- **********  Obtengo la BO y busco modificadores  **********-->
[h: boact =  getBoActual(tokenTgt,brazo1)]
[h: boniOfen =  number(boact) + number(cambioArma*-30) - number(boUsada)]
[h, if (BonoBOFija == ""): BonoBOFija = 0]
[h: boniOfen = number(boniOfen) + number(BonoBOFija)]
[h, if (cambioAccion>0): boniOfen = boniOfen/2]

<!-- **********  Obtengo la BD **********-->
[h,if (isPC()): bdAgi =  getHoja("BD",tokenTgt) ; bdAgi=BD ]
[h: bonoAgi = number(bdAgi) - number(agiUsada) ]
[h,if (BonoBDFija == ""): BonoBDFi = 0 ; BonoBDFi = BonoBDFija ]

<!-- **********  Ver si tiene Escudo **********-->
[h: bdEscudo = json.get(brazo2,"bonoBD")]
[h, if(pausear()==1): pause("bdEscudo","brazo2")]
[h, if (bdEscudo == "" || escudoUsado ==1): bdEscudo = 0]
[h: escudoCheck = 0]

<!-- ********** Creo la lista de Disponibilidad de BO  **********-->
[h: arrEstilos = '' ]
[h: ta = getStrProp(GolpeActual,"tipoAtaque")]
[h, if(ta==""),code:{
	[arrEstilos = ""]
};{
	[for(i,0,boniOfen,5): arrEstilos = listAppend(arrEstilos, add("BD=",i,"; BO=",boniOfen-i,";") )) ]	
	[h: arrEstilos = listAppend(arrEstilos, add("BD=",boniOfen,"; BO=",0,";") ) ]
}]
<!-- ********** Lista dos Manos  **********-->
[h, if(ta=="2Armas"),code:{
	[h, for(i,0,boniOfen,10): arrEstilos = listAppend(arrEstilos, add("BD=",i/2,"; BO=",boniOfen-i,";") )) ]
	[h: arrEstilos = listAppend(arrEstilos, add("BD=",boniOfen/2,"; BO=",0,";") ) ]	
}]
[h, if(ta=="Proyectil" || ta=="Arrojadizo"),code:{
	[for(i,0,boniOfen/2,5): arrEstilos = listAppend(arrEstilos, add("BD=",i,"; BO=",boniOfen-i,";") )) ]	
	[h: arrEstilos = listAppend(arrEstilos, add("BD=",boniOfen/2,"; BO=",0,";") ) ]
}]
[h, if(ta=="Proyectil" && bdEscudo == 0) : arrEstilos= "" ]
<!-- ********** Creo la lista de Disponibilidad de BD  **********-->
[h: arrAgiBd = '']
[h, for(i,0,bonoAgi,5): arrAgiBd = listAppend(arrAgiBd, add(bonoAgi-i) ) ]
[h: arrAgiBd = listAppend(arrAgiBd, add(0) ) ]

<!-- ********** Invoco el Input  **********-->
[H: inputStr = "[]"]

[h,token(tokenAtk): imageAtk=getTokenImage()]
[h,token(tokenTgt): imageTgt=getTokenImage()]

[H: inputStr = json.append(inputStr,"lblNombre|<html>"+vsTable(tokenAtk,tokenTgt,"defenseIcon")+"</html>|-|LABEL|SPAN=TRUE")]

<!-- ********** Auto seleccionar BO  **********-->
[h, token( tokenTgt ): autoSel = autoSelBO ]
[h, if(boniOfen > 20 && listCount(arrAgiBd) > 2): boDefecto = 2 ; boDefecto = 0]

[h,if(arrEstilos != ""): inputStr = json.append(inputStr,"bdSeleccionada|"+ arrEstilos +"|Cuanto Bo usar para Defender?|LIST|SELECT=" + boDefecto + " VALUE=STRING")]

<!-- ********** Auto seleccionar AGI  **********-->
[h: agiSelectDefecto = listCount(arrAgiBd)-1]
[H: inputStr = json.append(inputStr,"bdAgiSel|"+ arrAgiBd +"|Cuanto AGI usar para Defender?|LIST|SELECT=" + 0 + " VALUE=STRING")]

[h,if(BonoBDFi > 0): inputStr = json.append(inputStr,"bdFijaLbl|"+BonoBDFija+"|BD FIJA|LABEL")]
[h,if(bdEscudo > 0): inputStr = json.append(inputStr,"escudoCheck|1|Usar el Escudo?(+"+bdEscudo+" BD)|CHECK")]

[H: input = input(json.toList(inputStr,"##"))]
[h: abort(input)]

<!-- ********** Checkeo Escudo  **********-->
[h,if (escudoCheck): bonoEscudo = bdEscudo ; bonoEscudo = 0]

[h,if(arrEstilos != ""): bonoBOforBD = getStrProp(bdSeleccionada,"BD") ; bonoBOforBD = 0]
[h: bdTmp = bonoBOforBD + bdAgiSel + bonoEscudo + BonoBDFi]

<!-- ********** Calculo los bonos defensivos temporales  **********-->
[h: GolpeActual = setStrProp(GolpeActual,"bdTmp",bdTmp)]
[h: GolpeActual = setStrProp(GolpeActual,"agiTmp",bdAgiSel)]
[h, if(arrEstilos != ""): GolpeActual = setStrProp(GolpeActual,"boTmp",bonoBOforBD)]
[h: GolpeActual = setStrProp(GolpeActual,"escTmp",bonoEscudo)]

<!-- ********** Guardo los datos para llamar a calculo de danio **********-->
[h: strPropDatos =setStrProp("","tokenAtk",tokenAtk)]
[h: strPropDatos =setStrProp(strPropDatos,"target",getName())]
[h: strPropDatos =setStrProp(strPropDatos,"dado",0)]
[h: strPropDatos =setStrProp(strPropDatos,"modExtra",0)]

<!-- ********** Preparo el Link para el GM  **********-->

[h: link = macroLink("Calcular Danio de "+tokenAtk+" a "+getName(),"CalculoDanio@lib:asaltos", "gm", strPropDatos)]
[h: linkText = macroLinkText("CalculoDanio@lib:asaltos", "gm", strPropDatos)]
[h: broadcast(link, "gm")]

[h: execLink(linkText,0, "gm")]

@@DeclaroDefensaProyectilV3
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.10em ; sortBy=2 ; color=darkgray ; playerEditable=false ; applyToSelected=false ; group=Combate ; tooltip= ; minWidth=120
<!-- DeclaroDefensaProyectilV3 -->

[h: tokenAtk =arg(0) ]
[h: tokenTgt =arg(1) ]
[h: bonoDefensa =arg(2) ]

[h, if(pausear()==1): pause("tokenAtk","tokenTgt")]
[h: br="" ]
[h: ga_atk =getProperty("GolpeActual",tokenAtk)]

[h, token(tokenTgt): varsFromStrProp(GolpeActual) ]

<!-- **********  Ver si tiene Escudo **********-->

[h, token(tokenTgt): bdEscudo = json.get(brazo2,"bonoBD")]
[h, if(pausear()==1): pause("bdEscudo")]
[h, if (bdEscudo == "" || escudoUsado ==1): bdEscudo = 0]
[h: escudoCheck = 0 ]

<!-- **********  Obtengo la BO y busco modificadores  **********-->
[h, token(tokenTgt): boact =  getBoActual(getName(),brazo1)]
[h: boniOfen =  number(boact) + number(cambioArma*-30) - number(boUsada)]
[h: BonoBOFija = 0]
[h: boniOfen = number(boniOfen) + number(BonoBOFija)]
[h, if (cambioAccion>0): boniOfen = boniOfen/2]

<!-- **********  Obtengo la BD **********-->
[h, token(tokenTgt),code:{
	[ if (isPC()): bdAgi =  getHoja("BD",tokenTgt) ; bdAgi=BD ]
	[ bonoAgi = number(bdAgi) - number(agiUsada) ]
	[ if (BonoBDFija == ""): BonoBDFi = 0]
}]
[h, if(pausear()==1): pause("bonoAgi","tokenTgt") ]

<!-- ********** Defensax´p brisa **********-->
[h: cond = '{ "light": {"name":"L_Vela","value":1}}']

[h: brisa= getTokenName("json",cond)]

[h, if(json.contains(brisa,tokenTgt)): bonoAgi = bonoAgi + 30 ]

 
<!-- ********** Limites a la Defensa **********-->
[h: tipoDeAtaque =  getStrProp(ga_atk,"tipoAtaque")]
[h: maxBoUsableParaDefensa = boniOfen ]

[h: maxBoUsableParaDefensa = maxBoUsableParaDefensa /2]
[H: maxBoUsableParaDefensa = floor(maxBoUsableParaDefensa)]

[h, token(tokenTgt): brazo2 = getProperty("brazo2")]
[h: typArmaBr2 = json.get(brazo2,"tipoArma")]
[h, if(pausear()==1): pause("maxBoUsableParaDefensa","brazo2","typArmaBr2") ]
[h, if(typArmaBr2 != "Shield" ): maxBoUsableParaDefensa = 0]
[h, token(tokenTgt), if( getState("Aturdido") ): maxBoUsableParaDefensa = maxBoUsableParaDefensa /2]

[h, if(pausear()==1): pause("maxBoUsableParaDefensa","tokenTgt") ]

<!-- ********** Creo la lista de Disponibilidad de BO  **********-->
[h: arrEstilos = '' ]
[h, token(tokenTgt): ta = getStrProp(GolpeActual,"tipoAtaque")]
[h, if(ta==""),code:{
	[arrEstilos = ""]
};{
	[for(i,0,maxBoUsableParaDefensa,5): arrEstilos = listAppend(arrEstilos, add("BD=",i,"; BO=",boniOfen-i,";") )) ]	
	[ arrEstilos = listAppend(arrEstilos, add("BD=",maxBoUsableParaDefensa,"; BO=",boniOfen-maxBoUsableParaDefensa,";") ) ]
}]

<!-- ********** Lista dos Manos  **********-->
[h, if(ta=="2Armas"),code:{
	[arrEstilos =""]
	[h, for(i,0,maxBoUsableParaDefensa,10): arrEstilos = listAppend(arrEstilos, add("BD=",i/2,"; BO=",boniOfen-i,";") )) ]
	[h: arrEstilos = listAppend(arrEstilos, add("BD=",maxBoUsableParaDefensa/2,"; BO=",0,";") ) ]	
}]

<!-- ********** Creo la lista de Disponibilidad de BD  **********-->
[h: arrAgiBd = '']
[h, for(i,0,bonoAgi,5): arrAgiBd = listAppend(arrAgiBd, add(bonoAgi-i) ) ]
[h: arrAgiBd = listAppend(arrAgiBd, add(0) ) ]

<!-- ********** Invoco el Input  **********-->
[H: inputStr = "[]"]

[h,token(tokenAtk): image=getTokenImage()]

[H: inputStr = json.append(inputStr,"lblNombre|<html><h2>Defensa contra Proyectil</h2></html>|-|LABEL|SPAN=TRUE")]
[H: inputStr = json.append(inputStr,"tokenAtkLbl|"+tokenAtk+" "+image+"|Atacante|LABEL|ICON=TRUE")]

[h, if(json.contains(brisa,tokenTgt)): json.append(inputStr,"bonoDist|Bono por Brisa: "+ 30 +"||LABEL|SPAN=TRUE")]

[H:inputStr = json.append(inputStr,"bonoDist|Bono Def. por distancia del ataque: "+ bonoDefensa +"||LABEL|SPAN=TRUE")]

<!-- ********** Auto seleccionar BO  **********-->
[h: vbDefecto = listCount(arrEstilos)-1]

[h: bdSeleccionada = 0]
[h,if(arrEstilos != "" && bdEscudo > 0): inputStr = json.append(inputStr,"bdSeleccionada|"+ arrEstilos +"|Cuanto Bo usar para Defender?|LIST|SELECT=" + vbDefecto + " VALUE=STRING")]

[H:inputStr = json.append(inputStr,"bdAgiSel|"+ arrAgiBd +"|Cuanto AGI usar para Defender?|LIST|SELECT=0 VALUE=STRING")]

[H: input = input(json.toList(inputStr,"##"))]
[h: abort(input)]

<!-- ********** Checkeo Escudo  **********-->
[h,if (escudoCheck): bonoEscudo = bdEscudo ; bonoEscudo = 0]

[h,if(arrEstilos != "" && bdEscudo > 0): bonoBOforBD = getStrProp(bdSeleccionada,"BD") ; bonoBOforBD = 0]
[h: bdTmp = bonoBOforBD + bdAgiSel + bonoEscudo ]

<!-- ********** Calculo los bonos defensivos temporales  **********-->
[h,token(tokenTgt): GolpeActual = setStrProp(GolpeActual,"bdTmp",bdTmp)]
[h,token(tokenTgt): GolpeActual = setStrProp(GolpeActual,"agiTmp",bdAgiSel)]
[h,token(tokenTgt), if(arrEstilos != ""): GolpeActual = setStrProp(GolpeActual,"boTmp",bonoBOforBD)]
[h,token(tokenTgt): GolpeActual = setStrProp(GolpeActual,"escTmp",1)]

<!-- ********** Guardo los datos para llamar a calculo de danio **********-->
[h: strPropDatos =setStrProp("","tokenAtk",tokenAtk)]
[h: strPropDatos =setStrProp(strPropDatos,"target",tokenTgt)]
[h: strPropDatos =setStrProp(strPropDatos,"dado",0)]
[h: strPropDatos =setStrProp(strPropDatos,"modExtra",bonoDefensa)]

<!-- ********** Preparo el Link para el GM  **********-->

[h: link = macroLink("Calcular Danio Proyectil de "+tokenAtk+" contra "+tokenTgt,"CalculoDanio@lib:asaltos", "gm", strPropDatos)]
[h: linkText = macroLinkText("CalculoDanio@lib:asaltos", "gm", strPropDatos)]
[h: broadcast(link, "gm")]

[h: execLink(linkText,0, "gm")]

@@DeclaroDefensaV3
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.10em ; sortBy=2 ; color=darkgray ; playerEditable=false ; applyToSelected=false ; group=Combate ; tooltip= ; minWidth=120
<!-- declaroDefensaV3 -->
[h: tokenAtk =arg(0)]
[h: tknTgt =arg(1)]
[h: br=""]
[h: ga_atk =getProperty("GolpeActual",tokenAtk)]

[h,token(tknTgt): varsFromStrProp(getProperty("GolpeActual"))]

<!-- **********  Obtengo la BO y busco modificadores  **********-->
[h,token(tknTgt): boact =  getBoActual( tknTgt ,brazo1)]
[h: boniOfen =  number(boact) + number(cambioArma*-30) - number(boUsada)]
[h,token(tknTgt): BonoBOFija = BonoBOFija]
[h, if (BonoBOFija == ""): BonoBOFija = 0]
[h: boniOfen = number(boniOfen) + number(BonoBOFija)]
[h, if (cambioAccion>0): boniOfen = boniOfen/2]

<!-- **********  Obtengo la BD **********-->
[h,token(tknTgt),if (isPC()): bdAgi =  getHoja("BD",tknTgt) ; bdAgi=BD ]
[h: bonoAgi = number(bdAgi) - number(agiUsada) ]
[h,token(tknTgt),if (BonoBDFija == ""): BonoBDFi = 0 ; BonoBDFi = BonoBDFija]

<!-- **********  Ver si tiene Escudo **********-->
[h,token(tknTgt): bdEscudo = json.get(brazo2,"bonoBD")]
[h, if(pausear()==1): pause("bdEscudo","brazo2")]
[h, if (bdEscudo == "" || escudoUsado ==1): bdEscudo = 0]
[h: escudoCheck = 0]

[h, if(pausear()==1): pause("escudoCheck","brazo2")]

<!-- ********** Limites a la Defensa **********-->
[h: tipoDeAtaque = getStrProp(ga_atk,"tipoAtaque")]

[h: maxBoUsableParaDefensa = boniOfen ]

[h, if(tipoDeAtaque == "Proyectil" ||  tipoDeAtaque == "Animal" ): maxBoUsableParaDefensa = maxBoUsableParaDefensa /2]

[h,token(tknTgt), if(tipoDeAtaque == "Proyectil" &&  json.get(brazo2,"type") != "Shield" ): maxBoUsableParaDefensa = 0]

[h,token(tknTgt), if( state.Aturdido ): maxBoUsableParaDefensa = maxBoUsableParaDefensa /2]

[h, if(pausear()==1): pause("maxBoUsableParaDefensa","brazo2")]

<!-- ********** Creo la lista de Disponibilidad de BO  **********-->
[h: arrEstilos = '' ]
[h,token(tknTgt): ta = getStrProp(GolpeActual,"tipoAtaque")]

[h, if(ta==""),code:{
	[arrEstilos = ""]
};{
	[for(i,0,maxBoUsableParaDefensa,5): arrEstilos = listAppend(arrEstilos, add("BD=",i,"; BO=",boniOfen-i,";") )) ]	
	[h: arrEstilos = listAppend(arrEstilos, add("BD=",maxBoUsableParaDefensa,"; BO=",0,";") ) ]
}]

[h, if(pausear()==1): pause("arrEstilos","brazo2")]

<!-- ********** Lista dos Manos  **********-->
[h, if(ta=="2Armas"),code:{
	[arrEstilos =""]
	[h, for(i,0,maxBoUsableParaDefensa,10): arrEstilos = listAppend(arrEstilos, add("BD=",i/2,"; BO=",boniOfen-i,";") )) ]
	[h: arrEstilos = listAppend(arrEstilos, add("BD=",maxBoUsableParaDefensa/2,"; BO=",0,";") ) ]	
}]

<!-- ********** Creo la lista de Disponibilidad de BD  **********-->
[h: arrAgiBd = '']
[h, for(i,0,bonoAgi,5): arrAgiBd = listAppend(arrAgiBd, add(bonoAgi-i) ) ]
[h: arrAgiBd = listAppend(arrAgiBd, add(0) ) ]

<!-- ********** Invoco el Input  **********-->
[H: inputStr = "[]"]
[h, token(tokenAtk): image=getTokenImage()]
[H: inputStr = json.append(inputStr,"lblNombre|<html><h2>Defensa de "+tknTgt+"</h2></html>|-|LABEL|SPAN=TRUE")]
[H: inputStr = json.append(inputStr,"tokenAtkLbl|"+tokenAtk+" "+image+"|Atacante|LABEL|ICON=TRUE")]

<!-- ********** Auto seleccionar BO  **********-->
[h, token( tknTgt ): autoSel = autoSelBO ]
[h, if( !isPc(tknTgt) && maxBoUsableParaDefensa > 20 && listCount(arrAgiBd) > 2): boDefecto = selectAutoDefensa( autoSel , arrEstilos ) ; boDefecto = listCount(arrEstilos)-1]

[h, if(arrEstilos != ""): inputStr = json.append(inputStr,"bdSeleccionada|"+ arrEstilos +"|Cuanto Bo usar para Defender?|LIST|SELECT=" + boDefecto +" VALUE=STRING")]

[h: agiSelectDefecto = 0]
[H: inputStr = json.append(inputStr,"bdAgiSel|"+ arrAgiBd +"|Cuanto AGI usar para Defender?|LIST|SELECT=" + agiSelectDefecto + " VALUE=STRING")]

[h, if(BonoBDFi > 0): inputStr = json.append(inputStr,"bdFijaLbl|"+BonoBDFi+"|BD FIJA|LABEL")]
[h, if(bdEscudo > 0): inputStr = json.append(inputStr,"escudoCheck|1|Usar el Escudo?(+"+bdEscudo+" BD)|CHECK")]

[H: input = input(json.toList(inputStr,"##"))]
[h: abort(input)]

<!-- ********** Checkeo Escudo  **********-->
[h,if (escudoCheck): bonoEscudo = bdEscudo ; bonoEscudo = 0]

[h,if(arrEstilos != ""): bonoBOforBD = getStrProp(bdSeleccionada,"BD") ; bonoBOforBD = 0]
[h: bdTmp = bonoBOforBD + bdAgiSel + bonoEscudo + BonoBDFi]

<!-- ********** Calculo los bonos defensivos temporales  **********-->
[h,token(tknTgt): GolpeActual = setStrProp(GolpeActual,"bdTmp",bdTmp)]
[h,token(tknTgt): GolpeActual = setStrProp(GolpeActual,"agiTmp",bdAgiSel)]
[h,token(tknTgt), if(arrEstilos != ""): GolpeActual = setStrProp(GolpeActual,"boTmp",bonoBOforBD)]
[h,token(tknTgt): GolpeActual = setStrProp(GolpeActual,"escTmp",bonoEscudo)]

<!-- ********** Guardo los datos para llamar a calculo de danio **********-->
[h: strPropDatos =setStrProp("","tokenAtk",tokenAtk)]
[h: strPropDatos =setStrProp(strPropDatos,"target", tknTgt)]
[h: strPropDatos =setStrProp(strPropDatos,"dado",0)]
[h: strPropDatos =setStrProp(strPropDatos,"modExtra",0)]

<!-- ********** Preparo el Link para el GM  **********-->
[h: link = macroLink("Calcular Danio de "+tokenAtk+" a "+tknTgt,"CalculoDanio@lib:asaltos", "ALL", strPropDatos)]
[h, if( !isDialogVisible("calculoMultiAtk") ): broadcast(link, "gm")]

[h, if( isDialogVisible("calculoMultiAtk") ): runJsFunction("calculoMultiAtk", "dialog", "updateDefensa", "null", json.append("[]", tknTgt))]
[h, if( isDialogVisible("calculoMultiAtk") ): runJsFunction("calculoMultiAtk", "dialog", "addRow", "null", json.append("[]", link,tknTgt))]

@@DefensaFireBallV3
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.10em ; sortBy=2 ; color=darkgray ; playerEditable=false ; applyToSelected=false ; group=Combate ; tooltip=Cuadro para que el token objetivo defina su defensa contra un ataque de bola de fuego ; minWidth=120
<!-- DefensaFireBallV3 -->
[h: tokenAtk =arg(0)]
[h: br=""]

[h: tokenTgt = arg(1)]

[h,token(tokenTgt): varsFromStrProp(GolpeActual)]

<!-- **********  Obtengo la BD **********-->
[h,token(tokenTgt),code:{
	[h, if (isPC()): bdAgi =  getHoja("BD",tokenTgt) ; bdAgi=BD ]	
	[h: bonoAgi = number(bdAgi) - number(agiUsada) ]

}]

[h, if(pausear()==1): pause("br","tokenTgt")]
<!-- **********  Ver si tiene Escudo **********-->
[h, token(tokenTgt):  bdEscudo = json.get(brazo2,"bonoBD")]

[h, if (bdEscudo == "" || escudoUsado ==1): bdEscudo = 0]
[h: escudoCheck = 0]

<!-- ********** Creo la lista de Disponibilidad de BO  **********-->

<!-- no se usa ante ataque de bola  -->

<!-- ********** Creo la lista de Disponibilidad de BD  **********-->
[h: arrAgiBd = '']
[h, for(i,0,bonoAgi,5): arrAgiBd = listAppend(arrAgiBd, add(bonoAgi-i) ) ]
[h: arrAgiBd = listAppend(arrAgiBd, add(0) ) ]

<!-- ********** Invoco el Input  **********-->
[H: inputStr = "[]"]

[h, token(tokenAtk): imageAtk=getTokenImage()]
[h, token(tokenTgt): imageTgt=getTokenImage()]

[H: inputStr = json.append(inputStr,"lblNombre|<html>"+vsTable(tokenAtk,tokenTgt,"defenseIcon")+"</html>|-|LABEL|SPAN=TRUE")]

[H: inputStr = json.append(inputStr,"bdAgiSel|"+ arrAgiBd +"|Cuanto AGI usar para Defender?|LIST|SELECT=0 VALUE=STRING")]

[H: input = input(json.toList(inputStr,"##"))]
[h: abort(input)]

<!-- ********** Checkeo Escudo  **********-->

[h: bdTmp =  bdAgiSel ]

[h, if(pausear()==1): pause("GolpeActual","tokenTgt")]

<!-- ********** Calculo los bonos defensivos temporales  **********-->
[h,token(tokenTgt): GolpeActual = setStrProp(GolpeActual,"bdTmp",bdTmp)]
[h,token(tokenTgt): GolpeActual = setStrProp(GolpeActual,"agiTmp",bdAgiSel)]

<!-- ********** Guardo los datos para llamar a calculo de danio **********-->
[h: strPropDatos =setStrProp("","tokenAtk",tokenAtk)]
[h: strPropDatos =setStrProp(strPropDatos,"target",getName())]
[h: strPropDatos =setStrProp(strPropDatos,"dado",0)]
[h: strPropDatos =setStrProp(strPropDatos,"modExtra",0)]

[h: jsonDatos =json.fromStrProp(strPropDatos)]

<!-- ********** Preparo el Link para el GM  **********-->

[h: link = macroLink("Calcular Danio de "+tokenAtk+" a "+tokenTgt,"CalculoDanioFireBall@lib:asaltos", "gm", jsonDatos)]
[h: broadcast(link, "gm")]

@@Golpear
@PROPS@ fontColor=white ; autoExecute=true ; fontSize=1.15em ; sortBy=10 ; color=red ; playerEditable=false ; applyToSelected=true ; group=Combate ; tooltip= ; minWidth=120
<!-- Golpear -->
[h: target = getName()]
[h: tokenAtk = "GM" ]
[h: boTmp= 0 ]
[h: dado = 0 ]
[h: modExtra = 0 ]

[h: val =""]
[h: ind =0]

[h: tablasDanio=""]
[h, foreach(tabla,getTableNames()),code:{	
	[if ( startsWith(tabla, "ataque") ): tablasDanio =listAppend(tablasDanio,replace(tabla,"ataque",""))]

}]

[h: tablasCriticos=""]
[h, foreach(tabla,getTableNames()),code:{
	[tabla = stringToList(tabla,"_")]
	[tabla = listGet(tabla, 0)]
	[if ( startsWith(tabla, "critico") && !listContains(tablasCriticos, tabla)): tablasCriticos =listAppend(tablasCriticos,tabla)]

}]

[h: abort(input(
	"tokenLbl|"+getName()+" "+getTokenImage()+"|Ficha|LABEL|ICON=TRUE",
	"tablaDanio|"+tablasDanio+"|Tabla De Danio|LIST|SELECT="+listFind(tablasDanio, "EspadaAncha")+" VALUE=STRING",
	"tablaCritico|"+tablasCriticos+"|Tabla De Critos|LIST|SELECT="+listFind(tablasCriticos, "criticoCorte")+" VALUE=STRING"
))]

[r: strPropDatos = strPropFromVars("target,tokenAtk,dado,boTmp,modExtra,tablaDanio,tablaCritico","UNSUFFIXED")]

[h: CalculoDanio(strPropDatos)]

@@ResolverAtaqueProyectilV3
@PROPS@ fontColor=white ; autoExecute=true ; fontSize=1.00em ; sortBy=1 ; color=maroon ; playerEditable=false ; applyToSelected=true ; group=Combate ; tooltip= ; minWidth=120
<!-- ResolverAtaqueProyectilV3 --> 
[h: data = macro.args]
[h: tokenAtk = arg(0)]
[h: tokenTgt = arg(1)]

[h, if(tokenAtk == ""): tokenAtk = getName(getSelected())]

[h,token(tokenAtk): ErrorMsg(length(GolpeActual),"Debe tener definifo GolpeActual")]

[h, if(pausear()==1): pause("data")]

[h,token(tokenAtk): varsFromStrProp( GolpeActual )]

<!-- **********  Obtengo la BO del Arma  **********-->
[h,token(tokenAtk): bonoArma = json.get(brazo1,"bonoBO") ] 
[h,token(tokenAtk): armaProyectil = brazo1 ] 

[h,if (bonoArma==""): bonoArma = 0]

<!-- **********  Obtengo la BO y busco modificadores  **********-->
[h: boact = getBoActual(tokenAtk ,armaProyectil) ]
[h: bonoBOProy = boact + number(cambioArma*-30)]

	[h: tokenName = tokenTgt ]
	[h, token(tokenName): image=getTokenImage()]
	[h: rangoDeToken = tokenRango(tokenAtk,tokenName,armaProyectil) ]
	[h: d = getStrProp(rangoDeToken,"Dist")]
	[h: b = getStrProp(rangoDeToken,"bonif")]
	[h: modDistancia = b]
	[ if(number(b)>0): simbolo = "+" ; simbolo = ""]
	[h: txtToken = strformat("%{d} mts")]
	[h: txtmod = strformat("%{simbolo}%{b}")]
	[h: image = "<img src='"+replace(image, ":", "&#58;")+"' width=120 height=120></img>"]
	[h: imgList = listAppend(txtToken,tokenName+" "+image)]	
	[finalTokenList = listAppend("",txtToken)]

[h, if(pausear()==1): pause("txtToken","finalTokenList")]

<!-- ********** Invoco el Input  **********-->
[H: inputStr = "[]"]
[h: imgWeapon1 = tblImage("Bows",json.get(armaProyectil,"ID"))]

[h: inputStr = json.append(inputStr,"targetName|"+tokenTgt+"|OBJETIVO|LABEL")]
[h: inputStr = json.append(inputStr,"targetName|<html>"+image+"</html>|"+tokenTgt+"|LABEL|SPAN=TRUE")]

[H: inputStr = json.append(inputStr,"junk|<html><table border=1  width='300'><tr><th width='100%'><img src='"+replace(imgWeapon1, ":", "&#58;")+"' width=120 height=120></img></th></table></html>|-|LABEL|SPAN=TRUE")]
[H: inputStr = json.append(inputStr,"armasLbl1|+"+json.get(armaProyectil,"bonoBO")+"|"+json.get(armaProyectil,"nombre")+"|LABEL")]

[h: inputStr = json.append(inputStr,"targetData|"+txtToken+"|Distancia|LABEL")]
[h: inputStr = json.append(inputStr,"modtData|"+txtmod+"|Modificador|LABEL")]

[H: input = input(json.toList(inputStr,"##"))]
[h: abort(input)]

<!-- ********** Calculo la BO Temporal  **********-->
[h,token(tokenAtk): boTmp = number(bonoBOProy) + number(bonoArma)+ number(BonoBOFija)]
	
<!-- ********** Tomo el Target  **********-->
[h: target = tokenTgt]

<!-- ********** Guardo los nuevos Datos dentro del golpeActual temporalmente  **********-->
[h,token(tokenAtk): GolpeActual = setStrProp(GolpeActual,"boTmp",boTmp)]
[h,token(tokenAtk): GolpeActual = setStrProp(GolpeActual,"target",target)]

<!-- ********** Preparo el Link para quien corresponda  **********-->
[h,token(target): jugadoresDef = getOwners()]
[h, if (isPC(target)): obj = jugadoresDef ; obj = "gm"]

[h: param = json.append("",tokenAtk,target,modDistancia) ]

[h: link = macroLink("Defender a "+target+" del ataque de"+  tokenAtk,"DeclaroDefensaProyectilV3@lib:asaltos", jugadoresDef, param)]
[h: linkText = macroLinkText("DeclaroDefensaProyectilV3@lib:asaltos", jugadoresDef, param)]

[gt: link]
[h: broadcast(link, "gm")]
[r: execLink(linkText,0, obj)]

@@postDanios
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.20em ; sortBy=3 ; color=default ; playerEditable=false ; applyToSelected=false ; group=Combate ; tooltip= ; minWidth=120
<!-- postDanios -->
[h: data = arg(0)]

[h: varsFromStrProp( data )]
[h: link = macroLink("Actualizar GA de "+tokenAtk,"act_GolpeActualAtack@lib:personajes", "ALL", json.append("",tokenAtk, target))]
[r, if(getStrProp(data,"aplicarDanio")!=""),code:{  

[h, if( !isDialogVisible("calculoMultiAtk") ): act_GolpeActualAtack(tokenAtk, target)]

[h, if( isDialogVisible("calculoMultiAtk") ): runJsFunction("calculoMultiAtk", "dialog", "updateCalculo", "null", json.append("[]", target))]

[h, if( isDialogVisible("calculoMultiAtk") ): runJsFunction("calculoMultiAtk", "dialog", "addRow", "null", json.append("[]", link,tokenAtk))]

  [h: act_GolpeActualDefense(target)]
	
	[r:AplicarDanios(data)]
	
}; {
[h: CalculoDanio(data)]
}]

@@CalcularRT
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=default ; playerEditable=false ; applyToSelected=false ; group=Acciones_Extra ; tooltip=Recibe lvAtk, lvTgt, devuelve el valor que debe sacar el tgt parar resistir ; minWidth=
[h: lvAtk = arg(0)]
[h: lvTgt =  arg(1)]
[h: val = 50]

[h,if( lvAtk < lvTgt): mult = 1]
[h,if( lvAtk > lvTgt): mult = -1]

[h: aux = lvAtk ]
[h, while(aux != lvTgt),code:{
	[ if(aux > 15): val = val - mult]
	[ if(aux > 10 && aux < 16 ): val = val - (mult*2)]
	[ if(aux > 5 && aux < 11 ): val = val - (mult*3)]
	[ if(aux > 0 && aux < 6 ): val = val - (mult*5)]
	[ aux = aux + mult]
} ]

[r: macro.return = val ]

@@CuentaCargas
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=default ; playerEditable=false ; applyToSelected=false ; group=Acciones_Extra ; tooltip= ; minWidth=
<!-- CuentaCargas  0 = token; 1= tipo-->
[h: cargas = getProperty("Cargas",arg(0))]
[h: cjson = json.fromStrProp(cargas) ]
[h: ErrorMsg( !json.isEmpty( json.get(cjson,'cargas') ),"No se puede leer las cargas") ]
[h: c = json.fields(cjson)]
[h: list =json.fromList(c)]
[h, if(json.indexOf(list, arg(1)) > -1): n = json.get(cjson,'cargas') ; n = 0]
[h: macro.return = n]

@@CuentaCargasProy
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=default ; playerEditable=false ; applyToSelected=false ; group=Acciones_Extra ; tooltip= ; minWidth=
<!-- CuentaCargasProy  0 = token; 1= tipo de arma Proyectil   Ej:  -->
<!-- cargasDeArmaEj:  (rango) 1=-25;2=0;3=10C  1=x;2=-15;3=0;4=10c la x es que no puede disparar aún, la c, es que el bono es para el critico-->
[h: cargas = getProperty("Cargas",arg(0))]
[h, if(getStrProp(cargas,'arma',-1) == -1): macro.return = 0]
[h: cant_cargas = getStrProp(cargas,'cant_cargas',-1)]
[h: ErrorMsg( cant_cargas == -1 ),"No se puede leer las cargas") ]
[h: arrayRangos = table('ArmasProyectiles', 0)]
[h: bono = getStrProp(arrayRangos,string(cant_cargas),tokName,-1)
[h: re = setStrProp('','cant_cargas',cant_cargas)]
[h: re = setStrProp(re,'bono',bono)]
[h: macro.return = re]

@@RTSortilegio
@PROPS@ fontColor=pink ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=#e60000 ; playerEditable=false ; applyToSelected=false ; group=Acciones_Extra ; tooltip= ; minWidth=120
[h,code:{ 
	[  tknAtk = arg(0) ]
	[  tknTgt = arg(1) ]
	<!-- Reino del Sortilegio opcional -->
	[ if(json.length( macro.args ) > 2): reinoSort = arg(2) ]

	[ token(tknAtk): lvTknAtk = Nivel]
	[ token(tknTgt): lvTknTgt = Nivel]
	

	[ val =  CalcularRT(  lvTknAtk , lvTknTgt ) ]
	
	[ dadoAuto = 1d100 ]
	
	[ Reinos = "CAN, ESC, MEN"]

	[ mismoReino = 15 ]

	[ defDist = 0] 

	[ token(tknAtk): distReal = getDistance(tknTgt)]

	
<!-- mods a la tirada Basica  -->
	
	[ token( tknAtk ): ModLvAtk = Nivel ]

	[ cargas = "0(-30)=-30; 1(-15)=-15; 2(0)=0; 3(10)=10; 4(20)=20"]

	[ cargas = json.fromStrProp(cargas)] 
	

	[ coberturas = "Ninguna=0; Parcial=-10; Total=-20; Estatico=+10"]

	[ coberturas = json.fromStrProp(coberturas)] 
	
	[ distancias = "Contacto=30; 3Mts= 10; 15Mts=0; 30Mts=-10; 90Mts=-20; MasDe90=-30"]

	[ distancias = json.fromStrProp(distancias)] 

	[ indSel = 0]
	[foreach(d, "0,3,15,30,90,9999"), code:{
			[if( distReal  >  d  ): indSel = roll.count+1 ]
	}]

	

<!-- ********** Invoco el Input **********-->
[ inputStr = "[]"]
[ token( tknAtk ): tknAtkImg = getTokenImage()]
[ token( tknTgt ): tkntgtImg = getTokenImage()]

[ inputStr = json.append(inputStr,"lblNombre|<html><h2>Ataque Basio de Sortilegio</h2></html>|-|LABEL|SPAN=TRUE")]
[ inputStr = json.append(inputStr,"junk|<html><table border=1  width='400'><tr><th width='50%'><img src='"+replace(tknAtkImg, ":", "&#58;")+"' width=60 height=60></img></th><th width=50%><img src='"+replace(tkntgtImg, ":", "&#58;")+"' width=60 height=60></img></th></tr></table></html>|-|LABEL|SPAN=TRUE")]

[  inputStr = json.append(inputStr,"val|" + val + "|Resistencia x LV|LABEL")]

[  inputStr = json.append(inputStr,"reinoSort|" + reinos + "|Reino del sort|RADIO|SELECT=0 VALUE=STRING")]

[  inputStr = json.append(inputStr,"cargasBono|" + json.fields(cargas) + "|Cargas|RADIO|SELECT=2 VALUE=STRING")]

[  inputStr = json.append(inputStr,"coverturaBono|" + json.fields(coberturas) + "|Cobertura |RADIO|SELECT=0 VALUE=STRING")]

[  inputStr = json.append(inputStr,"distBono|" + json.fields(distancias) + "|Distancia|RADIO|VALUE=STRING SELECT=" + indSel)]

[ inputStr = json.append(inputStr,"dado|" + dadoAuto + "|Dado|TEXT")]

[ inputStr = json.append(inputStr,"bonoExtra|" + 0 + "|BonoExtra|TEXT")]

[ input = input(json.toList(inputStr,"##"))]

[ abort(input)]

<!-- TIRADA DE ATAQUE DE SORT BASE -->

[ broadcast( "Dado: " + dadoAuto  + " Cargas: " + json.get(cargas,cargasBono) + " Covertura: " + json.get(coberturas,coverturaBono) + " Distancia: " + json.get(distancias,distBono) ,"gm") ]

[ calculo = dado + number(json.get(coberturas,coverturaBono)) + number(json.get(distancias,distBono)) + json.get(cargas,cargasBono) + bonoExtra ]

<!-- Regla de TSM -->
[ if( dado < 3 || dado > 95): calculo = dado ]

[ token (tknTgt): arm = armadura ]
[ if( arm > 12 ): tipoArm = "_METAL"; tipoArm = "_CUERO" ]
[ columna = reinoSort + tipoArm ]
[ modToTR = tbl("ataqueSortilegioBase", calculo )]

[ modToTr = getStrProp( modToTR , columna)]

[ if( modToTr  == "F"  ),code:{
	
	
			
		[ inputStr = "[]"]
		[ inputStr = json.append(inputStr,"lblNombre|<html><h2>TR de Resistencia</h2></html>|-|LABEL|SPAN=TRUE")]
		[ inputStr = json.append(inputStr,"junk|<html><table border=1  width='400'><tr><th width='50%'><img src='"+replace(tknAtkImg, ":", "&#58;")+"' width=60 height=60></img></th><th width=50%><img src='"+replace(tkntgtImg, ":", "&#58;")+"' width=60 height=60></img></th></tr></table></html>|-|LABEL|SPAN=TRUE")]
		

		
		[  inputStr = json.append(inputStr,"resFinallbl|<html><h2 style='color: red;'>FALLO DIRECTO<h2></html>|Resultado|LABEL|SPAN=TRUE")]
		

		[ input = input(json.toList(inputStr,"##"))]

		[ abort(0)]

} ]

<!-- mods a la tirada Resistencia  -->
	
	[ token(tknTgt): reinoTgt = Reino ]
	
	[ if( reinoSort != reinoTgt ): mismoReino = 0  ]

	[ token(tknTgt): rtTgt = getStrProp(Resistencias,reinoSort) ]		

	[r: rtTgt]

	[ dadoAuto = DadoAbierto() ]

	[ modFinal =   mismoReino + rtTgt + modToTr ]

<!-- ********** Invoco el Input TR RESISTENCIA **********-->

[ inputStr = "[]"]
[ inputStr = json.append(inputStr,"lblNombre|<html><h2>TR de Resistencia</h2></html>|-|LABEL|SPAN=TRUE")]
[ inputStr = json.append(inputStr,"junk|<html><table border=1  width='400'><tr><th width='50%'><img src='"+replace(tknAtkImg, ":", "&#58;")+"' width=60 height=60></img></th><th width=50%><img src='"+replace(tkntgtImg, ":", "&#58;")+"' width=60 height=60></img></th></tr></table></html>|-|LABEL|SPAN=TRUE")]

[  inputStr = json.append(inputStr,"val|<html><h3>Valor para Resistir: " + val + "</h3></html>||LABEL|SPAN=TRUE")]

[  inputStr = json.append(inputStr,"rtTgtlbl|" + rtTgt + "|Resistencia Tgt|LABEL")]

[ if(mismoReino > 0): inputStr = json.append(inputStr,"calclbl|" + 15 + "|Mismo Reino|LABEL")]

[  inputStr = json.append(inputStr,"calclbl|" + modToTr + "|Mod Ataque|LABEL")]

[ inputStr = json.append(inputStr,"dadoTr|" + dadoAuto + "|Dado|TEXT")]

[  inputStr = json.append(inputStr,"val|<html><h3>Modificador final : " + modFinal + "</h3></html>||LABEL")]

[ input = input(json.toList(inputStr,"##"))]

[ abort(input)]

<!-- ********** Invoco el Input DETALLE **********-->

[ resFinal  = dadoTr + modFinal ]

[ if(resFinal > val): exito = 1; exito = 0]

[ if( exito): resText = "<html><span style='color: green;'>PASO</span></html>"; resText ="<html><span style='color: red;'>FALLO</span></html>"]

[ fallox5 = 0 ]
[ fallox10 = 0 ]

[ if( !exito): fallox5 = 1 + ((val - resFinal) / 5)]
[ if( !exito): fallox10 = 1 + ((val - resFinal) / 10)]

[ inputStr = "[]"]
[ inputStr = json.append(inputStr,"lblNombre|<html><h2>TR de Resistencia</h2></html>|-|LABEL|SPAN=TRUE")]
[ inputStr = json.append(inputStr,"junk|<html><table border=1  width='400'><tr><th width='50%'><img src='"+replace(tknAtkImg, ":", "&#58;")+"' width=60 height=60></img></th><th width=50%><img src='"+replace(tkntgtImg, ":", "&#58;")+"' width=60 height=60></img></th></tr></table></html>|-|LABEL|SPAN=TRUE")]

[  inputStr = json.append(inputStr,"val|<html><h3>Valor para Resistir: " + val + "</h3></html>||LABEL|SPAN=TRUE")]

[  inputStr = json.append(inputStr,"resFinallbl|" + resFinal + "|Resultado|LABEL")]

[  inputStr = json.append(inputStr,"resFinallbl|" + resText + "|Resultado|LABEL")]

[ if( !exito): inputStr = json.append(inputStr,"faalo5lbl|" + floor(fallox5) + "|Fallo x 5|LABEL")]
[ if( !exito): inputStr = json.append(inputStr,"faalo10lbl|" + floor(fallox10) + "|Fallo x 10|LABEL")]

[ jsonreturn = json.set("", "exito",exito,"fallox5",floor(fallox5),"fallox10",floor(fallox10))]

[ input = input(json.toList(inputStr,"##"))]

[ abort(input)]

[ macro.return = jsonreturn ]

}]

@@lanzarCorrer
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=default ; playerEditable=false ; applyToSelected=false ; group=Acciones_Extra ; tooltip= ; minWidth=120
<!-- calculo de Movimiento con MM-->

[h: selection = getSelected()]
[h: listaDifi = "RUTINA,MUY FACIL,FACIL,NORMAL,DIFICIL,MUY DIFICIL,EXTREMO,IMPOSIBLE,ABSURDO"]

<!-- calculo mov normal actual del pj-->

<!-- ********** Creo los campos, para cada ficha selecionada  **********-->
[H: inputStr = "[]"]
[h, count(listCount(selection)),code:{
	[ idtok = listGet(selection,roll.count)]
	[ tok = getName(idtok)]
	[ mmTok = getMovMan(tok)]
	[H: inputStr = json.append(inputStr,"lblNombre_"+roll.count+"|"+tok+"|-|LABEL|SPAN=TRUE")]
	[H: inputStr = json.append(inputStr,"lblMM_"+roll.count+"|"+mmTok+"|Mov y Maniobra|LABEL")]
	[H: inputStr = json.append(inputStr,"lblDado_"+roll.count+"||Dados|TEXT|SPAN=TRUE")]
	[h: inputStr = json.append(inputStr,"dificultad_"+roll.count+"|"+listaDifi+"|Dificultad|LIST|VALUE=STRING SELECT=3")]
}]

<!-- ********** lanzo el input  **********-->
[H: input = input(json.toList(inputStr,"##"))]
[h: abort(input)]

<!-- ********** busco resultado para cada token  **********-->

<table border="1" width="700">
<tr style="background-color:[r: temaColor(1)];"><th colspan=4>Tirada Para Correr</th></tr>
<tr style="background-color:[r: temaColor(5)];"><th width="150">Personaje</th><th width="150">MM + Dados</th><th width="300">Resultado en tabla</th><th width="100">Resultado mov</th></tr>
[GM, count(listCount(selection),""),code:{
	
	[h: porcentaje = 100]
	[h: idtok = listGet(selection,roll.count)]
	[h: tok = getName(idtok)]
	[h: movement = CalcMovimiento(tok) ]
	[h: movementCorriendo = CalcMovimiento(tok) * 2 ]
	[h: mmTok = getMovMan(tok)]
	[h: varDado = "lblDado_"+roll.count]
	[h: varDif = "dificultad_"+roll.count]	
	[h: prp = strPropFromVars(varDif+","+varDado,"UNSUFFIXED")]
	[h: dif =getStrProp(prp,varDif)]
	[h: rgo = mmTok + number(getStrProp(prp,varDado)) ]
	[h: rdoSuma = table("MovManiobra",rgo)]
	[h: rdoEnTablaMovMan = getStrProp(rdoSuma,dif)]
	[h, if(isNumber(rdoEnTablaMovMan)),code:{
		[ if(porcentaje > 100): porcentaje = number(rdoEnTablaMovMan)]		
	};{
		[h: d = 1d5]
		[h, if(pausear()==1): pause("d","rdoEnTablaMovMan")]
		[h, if(  startsWith(rdoEnTablaMovMan, "Ca") || startsWith(rdoEnTablaMovMan, "Sin")) : porcentaje = (d * 10) ; porcentaje = 250]
	}]
	[h, if(pausear()==1): pause("porcentaje")]
	[h: rdoMovimiento = movementCorriendo * (porcentaje / 100)]
	[h: rdoMovimiento = round(rdoMovimiento)]
	[h: setProperty("ActualMove",rdoMovimiento,tok)]

	[h,token(Tok): jugadores = getOwners()]
	[r, if(isPC(tok)): broadcast(tok +" se movera hasta " + rdoMovimiento + " mts.",jugadores )]

	[h: setProperty("ActualMove",rdoMovimiento,tok)]
	<tr style="background-color:[r: temaColor(3)];text-align: center;"><td>{tok}</td><td>{rgo}</td><td>{rdoEnTablaMovMan}</td><td>{rdoMovimiento} mts.</td></tr>	

}]
[r: "</table>"]

@@lanzarMovManiobra
@PROPS@ fontColor=yellow ; autoExecute=true ; fontSize=1.25em ; sortBy= ; color=fuchsia ; playerEditable=false ; applyToSelected=false ; group=Acciones_Extra ; tooltip= ; minWidth=120
[h: selection = getSelected()]
[h: listaDifi = "RUTINA,MUY FACIL,FACIL,NORMAL,DIFICIL,MUY DIFICIL,EXTREMO,IMPOSIBLE,ABSURDO"]

<!-- ********** Creo los campos, para cada ficha selecionada  **********-->
[H: inputStr = "[]"]
[h, count(listCount(selection)),code:{
	[ idtok = listGet(selection,roll.count)]
	[ tok = getName(idtok)]
	[ mmTok = getMovMan(tok)]
	[H: inputStr = json.append(inputStr,"lblNombre_"+roll.count+"|"+tok+"|-|LABEL|SPAN=TRUE")]
	[H: inputStr = json.append(inputStr,"lblMM_"+roll.count+"|"+mmTok+"|Mov y Maniobra|LABEL")]
	[H: inputStr = json.append(inputStr,"lblDado_"+roll.count+"||Dados|TEXT|SPAN=TRUE")]
	[h: inputStr = json.append(inputStr,"dificultad_"+roll.count+"|"+listaDifi+"|Dificultad|LIST|VALUE=STRING")]
}]

<!-- ********** lanzo el input  **********-->
[H: input = input(json.toList(inputStr,"##"))]
[h: abort(input)]

<!-- ********** busco resultado para cada ficha  **********-->

<table border="0" width="900"  style="background-color:[r: temaColor(1)];">
<tr style="background-color:[r: temaColor(1)];"><th colspan=3>Tirada Mov y Maniobra</th></tr>
<tr style="background-color:[r: temaColor(5)];"><th width="250">Personaje</th><th width="200">MM + Dados</th><th width="400">Resultado</th></tr>
[r, count(listCount(selection),""),code:{
	[h: idtok = listGet(selection,roll.count)]
	[h: tok = getName(idtok)]
	[h: mmTok = getMovMan(tok)]
	[h: varDado = "lblDado_"+roll.count]
	[h: varDif = "dificultad_"+roll.count]	
	[h: prp = strPropFromVars(varDif+","+varDado,"UNSUFFIXED")]
	[h: dif =getStrProp(prp,varDif)]
	[h: rgo = mmTok + number(getStrProp(prp,varDado)) ]
	[h: rdoRango = table("MovManiobra",rgo)]
	[h: rdoDif = getStrProp(rdoRango,dif)]
	<tr style="background-color:[r: temaColor(3)];text-align: center;"><td>{tok}</td><td>{rgo}</td><td>{rdoDif}</td></tr>	
}]
[r: "</table>"]

@@lanzarPELEA
@PROPS@ fontColor=yellow ; autoExecute=true ; fontSize=1.15em ; sortBy= ; color=green ; playerEditable=false ; applyToSelected=false ; group=Acciones_Extra ; tooltip= ; minWidth=120
[h: selection = getSelected()]

<!-- ********** Creo los campos, para cada ficha selecionada  **********-->
[H: inputStr = "[]"]
[h, count(listCount(selection)),code:{
	[ idtok = listGet(selection,roll.count)]
	[ tok = getName(idtok)]
	[h, if(isPC(tok)): pelea = getHoja("BO_PELEA",tok) ; pelea = getProperty("BO_PELEA",tok)]
	[h: acti = getProperty("actividad",tok)]
	[h, if(!isNumber(acti)): acti = 0]
	[h: pelea = pelea + acti]
	[H: inputStr = json.append(inputStr,"lblNombre_"+roll.count+"|"+tok+"|-|LABEL|SPAN=TRUE")]
	[H: inputStr = json.append(inputStr,"lblMM_"+roll.count+"|"+pelea+"|BONO PELEA|LABEL")]
	[H: inputStr = json.append(inputStr,"lblDado_"+roll.count+"||Dados(2d20)|TEXT|SPAN=TRUE")]
}]

<!-- ********** lanzo el input  **********-->
[H: input = input(json.toList(inputStr,"##"))]
[h: abort(input)]

<!-- ********** busco resultado para cada ficha  **********-->

<table border="0" width="700">
<tr style="background-color:[r: temaColor(1)];"><th colspan=3>Tirada de PELEA</th></tr>
<tr style="background-color:[r: temaColor(5)];"><th width="150">Personaje</th><th width="150">PELEA + Dados</th><th width="400">Resultado</th></tr>
[r, count(listCount(selection),""),code:{
	[h: idtok = listGet(selection,roll.count)]
	[h: tok = getName(idtok)]
	[h, if(isPC(tok)): pelea = getHoja("BO_PELEA",tok) ; pelea = getProperty("BO_PELEA",tok)]
	[h: acti = getProperty("actividad",tok)]
	[h, if(!isNumber(acti)): acti = 0]
	[h: pelea = pelea + acti]
	[h: varDado = "lblDado_"+roll.count]	
	[h: prp = strPropFromVars(varDado,"UNSUFFIXED")]	
	[h: rgo = pelea + number(getStrProp(prp,varDado)) ]		
	<tr style="background-color:[r: temaColor(3)];text-align: center;"><td>{tok}</td><td>{rgo}</td><td>{rgo}</td></tr>	
}]
[r: "</table>"]

@@traerSortielgios
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=default ; playerEditable=false ; applyToSelected=false ; group=Acciones_Extra ; tooltip= ; minWidth=
<!-- traerSortielgios -->
<!-- Ejemplo de Json Magia: { name: 'magia', alcance: '30', dura: '6', rango: 'self' lv: 5 } -->
<!-- Ejemplo de Json SORTILEGIOS_EXTRA en hoja : { id : 0 , magiaExtra: magia, cargas: 5 , renovacion : 'dayli' }] -->
<!-- Ejemplo de Json SortExtra en pj   : { id : 0 , cargas: 5 }] -->

[h: tokName =  arg(0)]
[h: assert(findToken(tokName),colorText("No existe el Token, no existen sortilegios.",'red'),0)]

[h: lista = ""]
[h: mes_h = getHoja("SORTILEGIOS_EXTRA",tokName)]
[h: mes = getProperty("SortExtra",tokName)]

[r, for(me , mes ),code:{
	[h: magia = json.get(me,'magia') ]
	[h: magia_name = json.get(magia,'name') ]
	[h: magiEx = json.get(mes,id) ]
	[r: lista = listAppend(lista,json.get(,'name') + " - (" + json.get(json.get(mes,json.get(MagiaExtra,'cargas') + ")" ]
}] 

[h: m = json.get(json.get(MagiaExtra,'magia'),'name')]

@@CastigarConCritico
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=default ; playerEditable=false ; applyToSelected=false ; group=TOKENS ; tooltip= ; minWidth=120
[h,code:{
	[ tokenTgt = arg(0)]
	[tablasCritico = ""]
[ foreach(tablaName,getTableNames()), if( startsWith(tablaName,"critico")): tablasCritico = listAppend(tablasCritico,tablaName) ]	
	
	
	
	

<!-- ********** Invoco el Input  **********-->
[ inputStr = "[]"]

[ inputStr = json.append(inputStr,"lblNombre|<html><h2>Ataque de "+tokenTgt+"</h2></html>|-|LABEL|SPAN=TRUE")]
[ inputStr = json.append(inputStr,"tabla|"+tablasCritico+"|TABLA|LIST|VALUE=STRING")]
[ inputStr = json.append(inputStr,"dado|0|DADO |TEXT")]

[ input = input(json.toList(inputStr,"##"))]
[ abort(input)]	
	

	[ tablaName = listget(stringToList(tabla,"_"),0)]
	[ gravedad = listget(stringToList(tabla,"_"),1)]
	
	[ macro("SetearCritico@Lib:asaltos"): json.append("",dado,tablaName,gravedad)]

	[ resultado = table(tabla,dado)]  
	[ data = deleteStrProp(resultado,"Desc")]
	[ data = setStrProp(data,"target",tokenTgt)]
}]

[r: AplicarDanios(data)]

@@CastigarConDanioYCriticoAzar
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=default ; playerEditable=false ; applyToSelected=false ; group=TOKENS ; tooltip= ; minWidth=120
[h,code:{
	[ tokenTgt = arg(0)]
	[ tablaDanio = arg(1)]
	[ dadoDanio = arg(2)]
	[ tablaCritico = arg(3)]
	[ criticos = ""]
	
	[ token(tokenTgt): armaduraTgt = Armadura]
	[ armObj = getTipoArm(armaduraTgt)+armaduraTgt]

	[ danioResult = tbl(tablaDanio, dadoDanio)]
	
	[ danioResult = json.get(danioResult,armObj)]

	[ danioResult_pv = getStrProp(danioResult,"pv")]
	
	[ data = setStrProp("","pv",danioResult_pv)]
	
	[ danioResult_ct = getStrProp(danioResult,"gr")]
	
	[ broadcast(" Danio: " + dadoDanio + "| Critico: "+ danioResult_ct, "gm")]
	
<!-- Agrego criticos ante criticos mayores a E -->
	[ if (danioResult_ct == "F" ): criticos= "E,A")]
	
	[ if (danioResult_ct == "G" ): criticos= "E,C"]
	
	[ if (danioResult_ct == "H" ): criticos= "E,C,A"]	
	
	[ if (danioResult_ct == "I" ): criticos= "E,D,B"]
	
	[ if ( danioResult_ct == "J" ): criticos= "E,D,C"]

	[ if ( danioResult_ct != "" && listContains("A,B,C,D,E",danioResult_ct)): criticos= danioResult_ct ]

	[ data = setStrProp(data,"target",tokenTgt)]
	[ token(tokenTgt): broadcast( AplicarDanios(data) )]
	[ data = ""]
	[ if(criticos!=""),foreach(crit,criticos, ""),code:{
		
		[ dado = 1d100 ]	
		
		[ broadcast(" Critico: " + crit + " | Dado: "+ dado , "gm")]

		[ if(crit != ""): data = table(tablaCritico + "_" + crit, dado) ]
		
		[ data = deleteStrProp(data,"Desc")]
		
		[ data = setStrProp(data,"target",tokenTgt)]
		
		[token(tokenTgt): broadcast( AplicarDanios(data) )]
		
	}]
	
	[ broadcast("<hr/>")]

}]

@@ResetTokens
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=default ; playerEditable=false ; applyToSelected=false ; group=TOKENS ; tooltip= ; minWidth=120
[h: condAutoTokens = '{ "layer": ["TOKEN"], "unsetStates" : ["Muerto"], "propertyType" : ["Jugador","Npc"]}']
	
[h: tokens = getTokenNames(",", condAutoTokens)]

[h, if(pausear()==1): pause("tokensTotal")]

[h, if(pausear()==1): pause("tokens")]

[h, foreach(tok, tokens),code:{ 
	
	
	
		[ if(pausear()==1): pause("tok")]
		[ mo = CalcMovimiento(tok)]

		[h, if(pausear()==1): pause("mo","tok")]

		[ token(tok): setProperty("Movement",mo)]
	    [ token(tok): ActualMove = mo) ]
		[ token(tok): setProperty("MoveCount", 0)	]	
		[ reiniciarAcciones( tok )]
		[ resetGolpeActual(tok)]
	}]	
} ]

@@finAsalto
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=1 ; color=default ; playerEditable=false ; applyToSelected=false ; group=TOKENS ; tooltip= ; minWidth=120
[h: condSangrado = '{ "layer": ["TOKEN"], "setStates" : "Sangrando", "propertyType" : ["Npc","Jugador"]}']
[h: condquemado = '{ "layer": ["TOKEN"], "setStates" : "Se Quema", "propertyType" : ["Npc","Jugador"]}']

[h: sangrantes = json.union( getTokenNames("json", condSangrado), getTokenNames("json", condquemado))]

<!-- Calculo perdida de puntos de vida or sangre -->
[r, foreach(tkn, sangrantes, ""): PerderPV( tkn, getProperty( "Sangre", tkn )) ]

[h: tokenNames = getWithStateNames("Se Quema")]
[r, foreach(tkn, tokenNames, ""): PerderPV( tkn, getProperty( "Sangre", tkn )) ]

<!-- caidos se levantan tras un asalto-->
[h: tokenNames = getWithStateNames("Derribado")]
[h, foreach(tkn, tokenNames, ""): setState( "Derribado", 0, tkn) ]

[h, if(pausear()==1): pause("tokenNames","sangrantes")]

[h: condAturdidosSinParar = '{ "layer": ["TOKEN"], "unSetStates" : ["Muerto","Derrotado"], "setStates" : "Aturdido y Sin Poder parar", "propertyType" : ["Npc","Jugador"]}']
[h: condAturdidosoap = '{ "layer": ["TOKEN"], "unSetStates" : ["Muerto","Derrotado"], "setStates" : "Obligado a parar", "propertyType" : ["Npc","Jugador"]}']
[h: condAturdidos = '{ "layer": ["TOKEN"], "unSetStates" : ["Muerto","Derrotado"], "setStates" : "Aturdido", "propertyType" : ["Npc","Jugador"]}']

[h: aturdidos = json.union(getTokenNames("json", condAturdidos),  getTokenNames("json", condAturdidosoap), getTokenNames("json", condAturdidosSinParar))]

[h, if(pausear()==1): pause("aturdidos","sangrantes")]

[r, foreach(tkn, aturdidos, ""),code:{

	[h,token(tkn),if(!isNumber(Aturdimiento) ): Aturdimiento = 0 ]
	[h,token(tkn): Aturdimiento= Aturdimiento-1 ]
	
	[h,token(tkn), if( Aturdimiento == 0 ), code:{ 		
	  [h,token(tkn): setState("Aturdido", 0)]
	  [h,token(tkn): setState("Aturdido y Sin Poder parar", 0)]
	  [h,token(tkn): setState("Obligado a parar", 0)];
	  [r,token(tkn): token.name] ya se encuentra enfocado.
	}]	
}]

[h, if(pausear()==1): pause("aturdidos","sangrantes")]
<!-- Quito muertos y derrotados de la iniciativa -->
[h: ids5 = getWithState("Muerto","json")]
[h: ids6 = getWithState("Derrotado","json")]
[h: ids = json.union(ids5,ids6)]

[h, if(pausear()==1): pause("aturdidos","sangrantes")]
[r, foreach(id, ids, ""): removeFromInitiative(id) ]
[r, foreach(id, ids, ""): setLayer("OBJECT",id)]

@@fixCeros
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=default ; playerEditable=false ; applyToSelected=false ; group=TOKENS ; tooltip= ; minWidth=
[h: val = arg(0)]
[r: if( val == 0): "" ; val]

@@resetGolpeActual
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=default ; playerEditable=false ; applyToSelected=false ; group=TOKENS ; tooltip= ; minWidth=
[h: tok = arg(0)]
		[h,token(tok): GolpeActual = setStrProp(GolpeActual,"countAtaques",0)]
		[h,token(tok): GolpeActual = setStrProp(GolpeActual,"pasos",0)]
		[h,token(tok): GolpeActual = setStrProp(GolpeActual,"cambioArma",0)]
		[h,token(tok): GolpeActual = setStrProp(GolpeActual,"cambioAccion",0)]
		[h,token(tok): GolpeActual = setStrProp(GolpeActual,"boUsada",0)]
		[h,token(tok): GolpeActual = setStrProp(GolpeActual,"boTmp",0)]
		[h,token(tok): GolpeActual = setStrProp(GolpeActual,"bonoNegativo",0)]
		[h,token(tok): GolpeActual = setStrProp(GolpeActual,"agiUsada",0)]
		[h,token(tok): GolpeActual = setStrProp(GolpeActual,"escTmp",0)]
		[h,token(tok): GolpeActual = setStrProp(GolpeActual,"escudoUsado",0)]
		[h,token(tok): GolpeActual = setStrProp(GolpeActual,"cantMultiAtaques",0)]
		[h,token(tok): GolpeActual = setStrProp(GolpeActual,"danioRecibido",0)]	
		[h,token(tok): GolpeActual = setStrProp(GolpeActual,"enemigosAtacados","")]

@@DadoAbiertoArriba
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=default ; playerEditable=false ; applyToSelected=false ; group=Z_Extra ; tooltip= ; minWidth=120
[h: tmp=1d100]
[h:result=tmp]
[h,while (tmp>=96), CODE:{
  [tmp = 1d100]
  [result = result+tmp]
}]
[r:result]

@@DefinirGolpeActual
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=default ; playerEditable=false ; applyToSelected=true ; group=Z_Extra ; tooltip= ; minWidth=120
<!-- DefinirGolpeActual -->
[h: val =""]
[h: ind =0]
[h: listWeapons=""]
[h, while(table("Weapons",ind) != val),code:{
	[val=table("Weapons",ind)]
	[ind = ind +1]
	[listWeapons = listAppend(listWeapons,val)]

}]
[h: tablasCriticos=""]
[h, foreach(tabla,getTableNames()),code:{
	[tabla = stringToList(tabla,"_")]
	[tabla = listGet(tabla, 0)]
	[if ( startsWith(tabla, "critico") && !listContains(tablasCriticos, tabla)): tablasCriticos =listAppend(tablasCriticos,tabla)]

}]
[h: tablasDanio=""]
[h, foreach(tabla,getTableNames()),code:{	
	[if ( startsWith(tabla, "ataque") ): tablasDanio =listAppend(tablasDanio,replace(tabla,"ataque",""))]

}]

[h:seta = " BonoArmas="+1d5*5+"; BonoEscudo=0;BoActual="+1d20*5+";bdAgiActual="+1d8*5"+;BoFija=0;BdFija=0;tablaDanio=criticoCorte;"]	
[h: abort(input(
"tokenLbl|"+getName()+" "+getTokenImage()+"|Ficha|LABEL|ICON=TRUE",
"tablaDanio|"+tablasDanio+"|Tabla De Danio|LIST|SELECT="+listFind(tablasDanio, "EspadaAncha")+" VALUE=STRING",
"criticoTable|"+tablasCriticos+"|Tabla De Critos|LIST|SELECT="+listFind(tablasCriticos, "criticoCorte")+" VALUE=STRING",
"arma1|"+listWeapons+"|Arma Der|LIST|SELECT=0 VALUE=STRING",
"arma2|"+listWeapons+"|Arma Izq|LIST|SELECT=1 VALUE=STRING",
"resultVars|"+seta+"|Entrar valores|PROPS|SPAN=TRUE SETVARS=UNSUFFIXED"))]
[h,if (arma1 == arma2): abort(0)]
[h: resultVars=  setStrProp(resultVars,"armas",arma1+","+arma2)]
[h: resultVars=  setStrProp(resultVars,"tablaCritico",criticoTable)]
[h: resultVars=  setStrProp(resultVars,"tablaDanio",tablaDanio)]
[h: setProperty("GolpeActual",resultVars)]

@@SetearCritico
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=pink ; playerEditable=false ; applyToSelected=false ; group=Z_Extra ; tooltip= ; minWidth=120
[h: rango = arg(0)]
[h: tabla = arg(1)]
[h: gr = arg(2)]

[h: tabla = tabla+"_"+gr]
[if(rango==""): rango = 1d100]

[h: listTextField = "PunVida=;actividad=; oaparar=; aturd=; aturSinParar=; sangre=; quemadura=; congel=; iniciativa=;SumaAtaque=;"]

[h: crit_act = table(tabla,rango) ]      

[h: listaChckBox = "derribado,inconsiente,izqBrazoInutil,derBrazoInutil,izqPiernaInutil,derPiernaInutil,derrotado,muerto"]
      

[h, count(countStrProp(listTextField)),code:
{
  [key = indexKeyStrProp(listTextField, roll.count)]
  [value = indexValueStrProp(listTextField, roll.count)]
  [if(getStrProp(crit_act,key)!=""):listTextField = setStrprop(listTextField,key,getStrProp(crit_act,key))]  
}]

[h, count(countStrProp(listaChckBox)),code:
{
  [key = indexKeyStrProp(listaChckBox, roll.count)]
  [value = indexValueStrProp(listaChckBox, roll.count)]
  [if(getStrProp(crit_act,key)!=""):listaChckBox = setStrprop(listaChckBox,key,getStrProp(crit_act,key))]  
}]

[H: inputStr = "[]"]

[H: inputStr = json.append(inputStr,"Desc|"+rango+"|DADP|TEXT|SPAN=TRUE")]
[H: inputStr = json.append(inputStr,"Desc|<html><table border='1' width='250'><tr><td>"+getStrProp(crit_act,"Desc")+"</td></tr></table></html>|Descripcion|LABEL|SPAN=TRUE")]
[H: inputStr = json.append(inputStr,"resultVars|"+listTextField+"|Campos|PROPS|SPAN=TRUE SETVARS=UNSUFFIXED")]
[h, foreach(ch,listaChckBox,""): inputStr = json.append(inputStr,ch+"|0|"+ch+"|CHECK")]
[H: inputStr = json.append(inputStr,"muerteEnAsaltos||Asaltos hasta morir.|TEXT")]
[H: inputStr = json.append(inputStr,"recuperacion||Tiempo de recuperacion.|TEXT")]

[H: input = input(json.toList(inputStr,"##"))]
[h: abort(input)]

[h:listaCheckboxesSeteado=""]

[h: countResultVars = countStrProp(resultVars)]
[h: finalstrProps=crit_act]
[h, count(countResultVars),code:
{
  [key = indexKeyStrProp(resultVars, roll.count)]
  [value = indexValueStrProp(resultVars, roll.count)]
  [if(value!=""):finalstrProps = setStrprop(finalstrProps,key,value)]  
}]

[h: checkes = strPropFromVars(listaChckBox,"UNSUFFIXED")]
[h: countCheckes = countStrProp(checkes)]
[h, count(countCheckes),code:
{
  [key = indexKeyStrProp(checkes, roll.count)]
  [value = indexValueStrProp(checkes, roll.count)]
  [if(value!=0):finalstrProps = setStrprop(finalstrProps,replace(key,"_ch",""),value)]  
}]
[h, if(muerteEnAsaltos!="" && muerteEnAsaltos!=0):finalstrProps = setStrprop(finalstrProps,"muerteEnAsaltos",muerteEnAsaltos)]  
[h, if(recuperacion!="" && recuperacion!=0):finalstrProps = setStrprop(finalstrProps,"recuperacion",recuperacion)]  

[h: setTableEntry(tabla, rango, finalstrProps)]

@@SetearCriticoEnDanio
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=pink ; playerEditable=false ; applyToSelected=false ; group=Z_Extra ; tooltip= ; minWidth=120
[h: rango = arg(0)]
[h: tabla = arg(1)]
[h: gr = arg(2)]

[h: ErrorMsg(isNumber(rango),"Error en SetearCritico.("+rango+") Rango no es numero")] 
[h: ErrorMsg(length(gr),"Error en describirCriticoSeccion. ("+gr+") gr no es numero")] 
[h: ErrorMsg(listContains(getTableNames(),tabla+"_"+gr),"Error en describirCriticoSeccion. (" + tabla + "_" + gr +") Tabla de Critico no existe")] 

[h: tabla = tabla+"_"+gr]
[if(rango==""): rango = 1d100]
 
[h: listTextField = "PunVida=;actividad=; oaparar=; aturd=; aturSinParar=; sangre=; quemadura=; congel=; iniciativa=;SumaAtaque=;"]

[h: crit_act = table(tabla,rango) ]      

[h: listaChckBox = "derribado,inconsiente,izqBrazoInutil,derBrazoInutil,izqPiernaInutil,derPiernaInutil,derrotado,muerto"]
      

[h, count(countStrProp(listTextField)),code:
{
  [key = indexKeyStrProp(listTextField, roll.count)]
  [value = indexValueStrProp(listTextField, roll.count)]
  [if(getStrProp(crit_act,key)!=""):listTextField = setStrprop(listTextField,key,getStrProp(crit_act,key))]  
}]

[h, count(countStrProp(listaChckBox)),code:
{
  [key = indexKeyStrProp(listaChckBox, roll.count)]
  [value = indexValueStrProp(listaChckBox, roll.count)]
  [if(getStrProp(crit_act,key)!=""):listaChckBox = setStrprop(listaChckBox,key,getStrProp(crit_act,key))]  
}]

[H: inputStr = "[]"]

[H: inputStr = json.append(inputStr,"Desc|"+rango+"|DADP|TEXT|SPAN=TRUE")]
[H: inputStr = json.append(inputStr,"Desc|<html><table border='1' width='250'><tr><td>"+getStrProp(crit_act,"Desc")+"</td></tr></table></html>|Descripcion|LABEL|SPAN=TRUE")]
[H: inputStr = json.append(inputStr,"resultVars|"+listTextField+"|Campos|PROPS|SPAN=TRUE SETVARS=UNSUFFIXED")]
[h, foreach(ch,listaChckBox,""): inputStr = json.append(inputStr,ch+"|0|"+ch+"|CHECK")]
[H: inputStr = json.append(inputStr,"muerteEnAsaltos||Asaltos hasta morir.|TEXT")]
[H: inputStr = json.append(inputStr,"recuperacion||Tiempo de recuperacion.|TEXT")]

[H: input = input(json.toList(inputStr,"##"))]
[h: abort(input)]

[h:listaCheckboxesSeteado=""]

[h: countResultVars = countStrProp(resultVars)]
[h: finalstrProps=crit_act]
[h, count(countResultVars),code:
{
  [key = indexKeyStrProp(resultVars, roll.count)]
  [value = indexValueStrProp(resultVars, roll.count)]
  [if(value!=""):finalstrProps = setStrprop(finalstrProps,key,value)]  
}]

[h: checkes = strPropFromVars(listaChckBox,"UNSUFFIXED")]
[h: countCheckes = countStrProp(checkes)]
[h, count(countCheckes),code:
{
  [key = indexKeyStrProp(checkes, roll.count)]
  [value = indexValueStrProp(checkes, roll.count)]
  [if(value!=0):finalstrProps = setStrprop(finalstrProps,replace(key,"_ch",""),value)]  
}]
[h, if(muerteEnAsaltos!="" && muerteEnAsaltos!=0):finalstrProps = setStrprop(finalstrProps,"muerteEnAsaltos",muerteEnAsaltos)]  
[h, if(recuperacion!="" && recuperacion!=0):finalstrProps = setStrprop(finalstrProps,"recuperacion",recuperacion)]  

[h: setTableEntry(tabla, rango, finalstrProps)]

@@bonoKataArmas
@PROPS@ fontColor=white ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=black ; playerEditable=false ; applyToSelected=false ; group=Z_Extra ; tooltip= ; minWidth=120
[h: armaKata = arg(0)]
[h: arm = arg(1)]

[h: danios = table("ataqueKarate",150)]
[h: danioStrProp = decode(json.get(danios,arm))]
						[h, if(pausear()==1): pause("danioStrProp")]
[h: pvMaxKarate = getStrProp(danioStrProp,"pv")]

[h: tdanio = json.get(armaKata,"danio")]
[h: daniosKata = table(tdanio,150)]
[h: danioStrProp = decode(json.get(danios,arm))]
						[h, if(pausear()==1): pause("danioStrProp")]
[h: pvMaxKata = getStrPrp(danioStrProp,"pv")]

[h: pv = min(0,pvMaxKata-pvMaxKarate)]
[h: macro.return = pv]

@@dadoabierto
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=default ; playerEditable=false ; applyToSelected=false ; group=Z_Extra ; tooltip= ; minWidth=120
[h: tmp=1d100]
[h:result=tmp]
[h, if(tmp>=96): fac = 1 ]
[h, if(tmp<=5): fac = -1]
[h, if(tmp<=5): tmp=1d100]
[h, if(result<=5): result = result-tmp]

[h,while (tmp>=96), CODE:{
  [tmp = 1d100 * fac]
  [result = result+tmp]
}]
[r:result]

@@myCSS
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=5 ; color=fuchsia ; playerEditable=true ; applyToSelected=false ; group=Z_Extra ; tooltip= ; minWidth=120
.celdaSel {text-decoration:none; padding-top: 12px; padding-bottom: 12px; text-align: center; font-family: Arial, Helvetica, sans-serif; font-size: 18px;}
.celda { decoloration: none; padding-top: 12px; padding-bottom: 12px; text-align: center; background-color: #ff9933; font-size: 10px;}
.tabla { decoloration: none; text-align: center; background-color: [r: colorTema(1)]; font-size: 10px;  color: white;}
.row { decoloration: none;color: black; height: 30px;}
.evenRow { background-color: #EEEEAA }

a{
    color: red;
}
a:visited {
    color: green;
}
/* mouse over link */
a:hover {
    color: hotpink;
}
/* selected link */
a:active {
    color: blue;
}
#stats th { background-color: #113311; color: #FFFFFF }

@@myCSSMA
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=5 ; color=fuchsia ; playerEditable=true ; applyToSelected=false ; group=Z_Extra ; tooltip= ; minWidth=120
body{background-image: url( [r: tblImage("Iconos",17)]);}

h2,h3,h4{ color: yellow; }
a{
    color: white;
}

@@rearArmas
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=default ; playerEditable=false ; applyToSelected=false ; group=Z_Extra ; tooltip= ; minWidth=120
[h: armas = "[ {'ID':'1','nombre':'Espada Sagrada de Kyoros',bonoBO':50,pifia':4,alcance':'3=-30;9=-70;',clase':'S',danio':'ataqueEspadaAncha',tipoBO':'BO_FILO',criticos':'criticos=criticoCorte=0;criticoAplastamiento=-15;criticoPenetracion=-25;',usable':'2manos,1mano,2armas',tam':3,evt':''},
{'ID':'2','nombre':'Cimitarra',bonoBO':5,pifia':3,alcance':'',clase':'M',danio':'ataqueCimitarra',tipoBO':'BO_FILO',criticos':'criticos=criticoCorte=0;criticoAplastamiento=-20;',usable':'1mano,2armas',tam':3,evt':''},
{'ID':'3','nombre':'Katana Vulcan',bonoBO':30,pifia':4,alcance':'',clase':'M',danio':'ataqueCimitarra',tipoBO':'BO_FILO',criticos':'criticos=criticoCorte=0;criticoAplastamiento=-20;',usable':'1mano,2armas',tam':3,evt':'20% Porb. De Critico de Fuego'},
{'ID':'4','nombre':'Daga Maldita',bonoBO':0,pifia':1,alcance':'3=-10;7,5=-20;15=-30;',clase':'M',danio':'ataqueDaga',tipoBO':'BO_FILO',criticos':'criticos=criticoPenetracion=0;criticoCorte=-10;criticoAplastamiento=-10;',usable':'1mano,2armas',tam':1,evt':'50% prob. De lanzar danio al propietario. Critico<3'},
{'ID':'5','nombre':'Lanza Feroz',bonoBO':30,pifia':5,alcance':'3=-10;7,5=-20;15=-30;30=-70;',clase':'M',danio':'ataqueLanza',tipoBO':'BO_ASTA',criticos':'criticos=criticoPenetracion=0;criticoCorte=-15;criticoAplastamiento=-15;',usable':'1mano,2armas,2manos',tam':4,evt':''},
{'ID':'6','nombre':'Hacha de Oso',bonoBO':30,pifia':4,alcance':'3=-15;7,5=-30;15=-40;',clase':'MI',danio':'ataqueHacha',tipoBO':'BO_FILO',criticos':'criticos=criticoCorte=0;criticoAplastamiento=-10;',usable':'1mano,2armas,2manos',tam':3,evt':''},
{'ID':'7','nombre':'Espada Ext de Orcos',bonoBO':30,pifia':4,alcance':'3=-30;9=-70;',clase':'E',danio':'ataqueEspadaAncha',tipoBO':'BO_FILO',criticos':'criticos=criticoCorte=0;criticoAplastamiento=-15;criticoPenetracion=-25;',usable':'1mano,2armas',tam':3,evt':''},
{'ID':'8','nombre':'Espada Khal-El',bonoBO':30,pifia':4,alcance':'3=-30;9=-70;',clase':'M',danio':'ataqueEspadaAncha',tipoBO':'BO_FILO',criticos':'criticos=criticoCorte=0;criticoAplastamiento=-15;criticoPenetracion=-25;',usable':'1mano,2armas,2manos',tam':3,evt':''},
{'ID':'9','nombre':'Espada Dragon',bonoBO':30,pifia':4,alcance':'3=-30;9=-70;',clase':'M',danio':'ataqueEspadaAncha',tipoBO':'BO_FILO',criticos':'criticos=criticoCorte=0;criticoAplastamiento=-15;criticoPenetracion=-25;',usable':'1mano,2armas',tam':3,evt':''}]" ]
[r, foreach(a,armas,"agregue "+json.get(a,"nombre")+"<br>"): addTableEntry("Weapons",json.get(a,'ID'),json.get(a,'ID'),a)  ]

@@rearArmas
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=default ; playerEditable=false ; applyToSelected=false ; group=Z_Extra ; tooltip= ; minWidth=120
[h: armas = "[ {'ID':'1','nombre':'Espada Sagrada de Kyoros',bonoBO':50,pifia':4,alcance':'3=-30;9=-70;',clase':'S',danio':'ataqueEspadaAncha',tipoBO':'BO_FILO',criticos':'criticos=criticoCorte=0;criticoAplastamiento=-15;criticoPenetracion=-25;',usable':'2manos,1mano,2armas',tam':3,evt':''},
{'ID':'2','nombre':'Cimitarra',bonoBO':5,pifia':3,alcance':'',clase':'M',danio':'ataqueCimitarra',tipoBO':'BO_FILO',criticos':'criticos=criticoCorte=0;criticoAplastamiento=-20;',usable':'1mano,2armas',tam':3,evt':''},
{'ID':'3','nombre':'Katana Vulcan',bonoBO':30,pifia':4,alcance':'',clase':'M',danio':'ataqueCimitarra',tipoBO':'BO_FILO',criticos':'criticos=criticoCorte=0;criticoAplastamiento=-20;',usable':'1mano,2armas',tam':3,evt':'20% Porb. De Critico de Fuego'},
{'ID':'4','nombre':'Daga Maldita',bonoBO':0,pifia':1,alcance':'3=-10;7,5=-20;15=-30;',clase':'M',danio':'ataqueDaga',tipoBO':'BO_FILO',criticos':'criticos=criticoPenetracion=0;criticoCorte=-10;criticoAplastamiento=-10;',usable':'1mano,2armas',tam':1,evt':'50% prob. De lanzar danio al propietario. Critico<3'},
{'ID':'5','nombre':'Lanza Feroz',bonoBO':30,pifia':5,alcance':'3=-10;7,5=-20;15=-30;30=-70;',clase':'M',danio':'ataqueLanza',tipoBO':'BO_ASTA',criticos':'criticos=criticoPenetracion=0;criticoCorte=-15;criticoAplastamiento=-15;',usable':'1mano,2armas,2manos',tam':4,evt':''},
{'ID':'6','nombre':'Hacha de Oso',bonoBO':30,pifia':4,alcance':'3=-15;7,5=-30;15=-40;',clase':'MI',danio':'ataqueHacha',tipoBO':'BO_FILO',criticos':'criticos=criticoCorte=0;criticoAplastamiento=-10;',usable':'1mano,2armas,2manos',tam':3,evt':''},
{'ID':'7','nombre':'Espada Ext de Orcos',bonoBO':30,pifia':4,alcance':'3=-30;9=-70;',clase':'E',danio':'ataqueEspadaAncha',tipoBO':'BO_FILO',criticos':'criticos=criticoCorte=0;criticoAplastamiento=-15;criticoPenetracion=-25;',usable':'1mano,2armas',tam':3,evt':''},
{'ID':'8','nombre':'Espada Khal-El',bonoBO':30,pifia':4,alcance':'3=-30;9=-70;',clase':'M',danio':'ataqueEspadaAncha',tipoBO':'BO_FILO',criticos':'criticos=criticoCorte=0;criticoAplastamiento=-15;criticoPenetracion=-25;',usable':'1mano,2armas,2manos',tam':3,evt':''},
{'ID':'9','nombre':'Espada Dragon',bonoBO':30,pifia':4,alcance':'3=-30;9=-70;',clase':'M',danio':'ataqueEspadaAncha',tipoBO':'BO_FILO',criticos':'criticos=criticoCorte=0;criticoAplastamiento=-15;criticoPenetracion=-25;',usable':'1mano,2armas',tam':3,evt':''}]" ]
[r, foreach(a,armas,"agregue "+json.get(a,"nombre")+"<br>"): addTableEntry("Weapons",json.get(a,'ID'),json.get(a,'ID'),a)  ]

@@tokenRango
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=default ; playerEditable=false ; applyToSelected=false ; group=Z_Extra ; tooltip= ; minWidth=120
[h: tokenAtk = arg(0)]
[h: target = arg(1)]
[h: arma = arg(2)]
[h: alcances = json.get(arma,"alcance") ] 

[h: rangoToken =""]
[h: r_anterior = 0]
  	
[h, count(countStrProp(alcances)),code:
{
  [ rango = number(indexKeyStrProp(alcances, roll.count))]
  [ bonif = indexValueStrProp(alcances, roll.count)]
  [ if(bonif>0): simbolo = "+" ; simbolo = ""] 
  [ token(tokenAtk): dist= getDistance(target)]	
  [h, if(pausear()==1): pause("dist")]
  [ if(dist > r_anterior && dist <= rango ): rangoToken= strformat("Dist=%{dist}; bonif=%{bonif};")]	
  [r_anterior = rango]
  [h, if(pausear()==1): pause("rangoToken")]
}]  
[h: macro.return = rangoToken ]

@@DisparaProy
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=4 ; color=red ; playerEditable=false ; applyToSelected=false ; group=Actuar ; tooltip= ; minWidth=120


@@SelectorMasterAccion
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.15em ; sortBy= ; color=aqua ; playerEditable=false ; applyToSelected=false ; group=Actuar ; tooltip= ; minWidth=120
<!-- SelectorMasterAccion - Selector del master para decidir las acciones -->

<!-- Acciones posibles -->
[h: listaAcciones = "Cargar Sortilegio,Lanzar Sortilegio, Cargar Proyectil, Disparar Proyectil,Movimiento y maniobra,Combate CAC,Desplzamiento,Movimiento Estatico"]

[h: acciones = "cargar_sort,lanzar_sort,cargar_proy,disparar_proy,mov_manio,ataque_cac,desplazamiento,mov_estatico"]

[h: json = getInitiativeList() ]
[h:tokens = json.get(json, "tokens")]

[h:  pause("tokens")]
[H: inputStr = "[]"]

<!-- Recorro todos los personajes en la iniciativa -->
[h, foreach(item, tokens, "<br>"),code:{ 
	[h: listaAcciones_token = listaAcciones]
	[h: idTok = json.get(item,"tokenId")]
	[h: tok = getName(idTok)]
	[h, token(tok): isH = getInitiativeHold()]
	[h, if(isH == 1): listaAcciones_token =  listaAcciones + ",Esperar" ]
	[h, if(isH == 1): valueDefault = "8" ;  valueDefault = "4"]
	
	[H, if( tok !="ACCIONES" && tok !="AUTOMOVE" ),code:{
		[h: anteriorAccion = getAccion(tok)]
		[h, if(listContains(acciones,anteriorAccion)) : valueDefault = listFind(acciones,anteriorAccion)]
	
		[h, token(tok): ErrorMsg(length(brazo1),"Debe tener definifo Brazo 1")]
		[h, token(tok): ErrorMsg(length(brazo2),"Debe tener definifo Brazo 2")]

		[h, token(tok): name1=json.get(brazo1,"nombre")]
		[h, token(tok): name2=json.get(brazo2,"nombre")]
		[H: inputStr = json.append(inputStr,"lblNombre_"+tok+"|"+
		tok+"("+name1 +" - "+name2+")|-|LABEL|SPAN=TRUE")]	
		[h: inputStr = json.append(inputStr,"accion_"+tok+"|"+listaAcciones_token+"|Accion|LIST|SELECT="+valueDefault)]
	}; {
		[ json.remove(tokens, json.indexOf(tokens, item))]	
	}]
}]

<!-- ********** lanzo el input  **********-->
[H: input = input(json.toList(inputStr,"##"))]
[h: abort(input)]

<!-- ********** busco resultado para cada token  **********-->

[r, foreach(item, tokens, "<br>"),code:{ 

	[h: idTok = json.get(item,"tokenId")]
	[h: tok = getName(idTok)]	
	[r, if(tok !="ACCIONES" && tok !="AUTOMOVE"),code:{

		[h: varAccion = "accion_"+tok]	
		[h, if(pausear()==1): pause("varAccion")]
		[h: prp = strPropFromVars(varAccion,"UNSUFFIXED")]
		[h: acc =getStrProp(prp,varAccion)]
		[h, if(pausear()==1): pause("acc")]
		[h: anteriorAccion = getAccion(tok)]
		[h, if(acc == 7 ):   a = anteriorAccion ; a = listGet(acciones,acc) ]
		
		[h, if(pausear()==1): pause("acc")]
		[h, if(pausear()==1): pause("anteriorAccion")]
		
		[h, if(pausear()==1): pause("a")]
		[r: guardarAccion(a,tok)]
	}]
}]

@@SelectorMasterAccionPath
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.15em ; sortBy= ; color=aqua ; playerEditable=false ; applyToSelected=false ; group=Actuar ; tooltip= ; minWidth=120
<!-- SelectorMasterAccion - Selector del master para decidir las acciones -->

<!-- Acciones posibles -->

[h: json = getInitiativeList() ]
[h:tokens = json.get(json, "tokens")]

[H: inputStr = "[]"]

<!-- Recorro todos los personajes en la iniciativa -->
[h, foreach(item, tokens, "<br>"),code:{ 

	[h: idTok = json.get(item,"tokenId")]
	[h: tok = getName(idTok)]
	[h, token(tok): isH = getInitiativeHold()]
	
	[h, if(isH == 1): valueDefault = "8" ;  valueDefault = "4"]
	
	[H, if( tok !="ACCIONES" && tok !="AUTOMOVE" ),code:{

		[H: inputStr = json.append(inputStr,"lblNombre_"+tok+"|"+
		tok+"|-|LABEL|SPAN=TRUE")]	
		[h: inputStr = json.append(inputStr,"accion_"+tok+"||Valor|TEXT")]
		[h: inputStr = json.append(inputStr,"auto_"+tok+"|0|AUTO|CHECK ")]
	}; {
		[ json.remove(tokens, json.indexOf(tokens, item))]	
	}]
}]

<!-- ********** lanzo el input  **********-->
[H: input = input(json.toList(inputStr,"##"))]
[h: abort(input)]

<!-- ********** busco resultado para cada token  **********-->

[h, foreach(item, tokens, "<br>"),code:{ 

	[h: idTok = json.get(item,"tokenId")]
	[h: tok = getName(idTok)]	

	
	[h, if(tok !="ACCIONES" && tok !="AUTOMOVE"),code:{
		[ val = eval("accion_"+tok)]
		[ auto = eval("auto_"+tok)]
		[ dado = DadoAbierto()]		
		[ if(auto == "1"): valFinal = dado ; valFinal = val]
		[ token(tok): setInitiative(valFinal) ]
	}]
[ sortInitiative()]
[ Iniciativar()]
}]

@@ataqueCAC
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=6 ; color=green ; playerEditable=false ; applyToSelected=false ; group=Actuar ; tooltip= ; minWidth=120
<!-- ataqueCAC -->

@@cargarProy
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=3 ; color=orange ; playerEditable=false ; applyToSelected=false ; group=Actuar ; tooltip= ; minWidth=120


@@cargarSort
@PROPS@ fontColor=cyan ; autoExecute=true ; fontSize=1.00em ; sortBy=1.1 ; color=blue ; playerEditable=false ; applyToSelected=true ; group=Actuar ; tooltip= ; minWidth=120
<!-- cargaSortilegio  default cargas = cargas=0;-->
<!--  cargas=0; Sortilegio="Curar10";nv=5;-->
[h: tokName = arg(0)]
[h, if(tokName == ""): tokName = getSelected()]
[h: Cargas = 0 ]
[h: Sortilegio = ""]

<!-- Sortilegio que se carga en este asalto -->
[h,token(tokenName): a= getStrProp(GolpeActual,"SortCargado"]
[h: newSortilegio = json.get(a,"Sortilegio")]
[h: newNivel = json.get(a,"Sortilegio")]

<!-- Datos de la carga, si hay-->
[h, token(tokName): varsFromStrProp(CargaSortilegio)]

[h, if(newSortilegio==Sortilegio): Cargas = Cargas +1 ; Cargas = 0]

[h, if(Cargas>4):  Cargas = 4]

[h, token(tokName): CargaSortilegio = setStrProp(CargaSortilegio,"Nivel",newNivel)]
[h, token(tokName): CargaSortilegio = setStrProp(CargaSortilegio,"Cargas",Cargas)]
[h, token(tokName): CargaSortilegio = setStrProp(CargaSortilegio,"Nivel",newSortilegio)]

@@disparaSortilegio
@PROPS@ fontColor=cyan ; autoExecute=true ; fontSize=1.00em ; sortBy=2.2 ; color=navy ; playerEditable=false ; applyToSelected=false ; group=Actuar ; tooltip= ; minWidth=120
<!-- disparaSortilegio -->

[h: tokName = getInitiativeToken()]
[h: sort = getProperty('Cargas',tokName)]
[h: c = json.fields(cargaSortilegio)]
[h: isSortExtra = json.indexOf(c, "magiaExtra")]

[h, if(isSortExtra > -1),code{
	
};{
	gastarCargaSortExtra(json.get(sort,'id')) ;
}]

@@pre_ataqueCAC
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy=6 ; color=green ; playerEditable=false ; applyToSelected=false ; group=Actuar ; tooltip= ; minWidth=120
[h: bo= 150]
[h: bd= 15]
<!-- los tipos de bo son: dosArmas, unArma, pelea -->
[h: tipoBO= 'unArma']
[h: arma= 	"nombre=Espada Magica;tipo=magica;clase=espada ancha;bonoBO=20" ]
[h: escudo= "nombre=Escudo Rodana;tipo=magica;clase=escudo chico;bonoBD=25" ]
[h: arrBo = 'algo=2;']
[h: arrBo = setStrProp(escudo, bo, bd) ]
[h, for(i,bo,0,-10): arrBo = json.setStrProp(arrBo, bo-i, bd+bo-i) ]
[r: arrBo]

@@pre_cargarSort
@PROPS@ fontColor=cyan ; autoExecute=true ; fontSize=1.00em ; sortBy=1 ; color=blue ; playerEditable=false ; applyToSelected=true ; group=Actuar ; tooltip= ; minWidth=120
<!-- cargaSortilegio  default cargas = cargas=0;-->
<!--  cargas=0; Sortilegio="Curar10";nv=5;-->
[h: tokName = arg(0)]
[h, if(tokName == ""): tokName = getSelected()]
[h: lv = 0 ]
[h: Sortilegio = "" ]

[h, token(tokName): varsFromStrProp(CargaSortilegio)]

[h:cargasortInput = input(
"spanAct|"+Cargas+"|CARGA ACTUAL|LABEL",	
"Nivel|"+lv+"|Nivel del Sort.",
"sortileName|"+Sortilegio+"|Sortilegio.")]
[h:abort(cargasortInput)]

[h: a = json.set("{}","Nivel",lv)]
[h: a = json.set(a,"Sortilegio",sortileName)]
[h: macro.return = a]

@@pre_disparaSor
@PROPS@ fontColor=cyan ; autoExecute=true ; fontSize=1.00em ; sortBy=2 ; color=navy ; playerEditable=false ; applyToSelected=false ; group=Actuar ; tooltip= ; minWidth=120
<!-- pre_disparaSortilegio -->
[h: tokName = arg(0)]
[h,if(tokName == ""): tokName = getName(getSelected())]

[h: switchToken(tokName)]
[h, if(pausear()==1): pause("tokName","Armadura")]
[h: lv = 1]
[h: Cargas = 0 ]
[h: Sortilegio = "" ]
[h: listaLv = ""]
[h, count(Nivel): listaLv = listAppend(listaLv,roll.count+1) ]

[h: sortCargado = CargaSortilegio]
[h: varsFromStrProp(sortCargado)]

[h: bono = -30]
[h,if(Cargas == 1):bono = -15]
[h,if(Cargas == 2):bono = 0]
[h,if(Cargas == 3):bono = 10]
[h,if(Cargas > 3):bono = 20]
[h: ListasExtras = "" ]

[h, foreach(sort,SortDiario,""): ListasExtras = listAppend(ListasExtras,getStrProp(sort,"nameSort")+"("+getStrProp(sort,"cargasSort")+")")]

[h, if (length(ListasExtras) > 0),code:{
	[H: dispSort = input(
		"tab0 | Sortilegio propio || TAB", 
		"lblCargas|Tienes "+ Cargas + " Cargas. BONO = " + string(bono) +"|Cargas|LABEL",
		"txtSort|"+ Sortilegio + "|Sortilegio a Lanzar|TEXT",
		"lvSortilegio|"+ listaLv + "|Nivel del Sortilegio|LIST|SELECT="+(lv-1),
		
		"tab1 | Sortilegio Extra || TAB", 	
		"sortilegioChoice|"+ ListasExtras +"|Que Sortilegio?|RADIO|ORIENT=V SELECT=0"
	)]
};{
	[H: dispSort=  input(		
		"lvSortilegio|Nivel del Sortilegio | "+listaLv+ "|| LIST"
	]
	
	
}]

[h:abort(dispSort)]
[h, if (txtSort != Sortilegio): input("lblalert|Cómo el sortilegio lanzado será distinto al cargado, las cargas serán de 0||LABEL SPAN=TRUE")]
[h: Acc = json.set{"desc":1,"Sortilegio":"sas"} ]
[h: macro.return = Acc]

@@puntoMuertoFrame
@PROPS@ fontColor=cyan ; autoExecute=true ; fontSize=1.15em ; sortBy= ; color=black ; playerEditable=true ; applyToSelected=false ; group=Actuar ; tooltip= ; minWidth=120
[h: accionKyoros = json.get(getAccion("Kyoros"),"accion")]
[h: accionNeo = json.get(getAccion("Neo"),"accion")]

[dialog("Seleccion de Acciones","width=400; height=800;"): {
 <html>
<head>
  <link rel='stylesheet' type='text/css' href='myCSS@[r: getMacroLocation()]'></link>
  <title>Punto Muerto</title>
  <meta name="input" content="true">
</head>
<body>
<table width=100% border=1>
<tr><th colspan=2>
	<h1>Comienza Asalto : [r: getInitiativeRound()]</h1>
</th></tr>

<tr><th>Cargar Sortilegio</th><th>3 metros.</th></tr>
<tr><th>Realizar Sortilegio</th><th>6 metros.</th></tr>
<tr><th>Cargar Proyectil</th><th>3 metros.</th></tr>
<tr><th>Disparar Proyectil</th><th>3 metros.</th></tr>
<tr><th>Mov y Maniobra</th><th>1/2 Medio Mov.</th></tr>
<tr><th>Combate Cuerpo a Cuerpo</th><th>3 metros.</th></tr>
<tr><th>Desplazamiento</th><th>Caminar (x1)<br>Trotar (x1.5)<br>Correr(x2)<br>Esprintar(>x2)</th></tr>
<tr><th>Movimiento Estatico</th><th>Puede Variar.</th></tr>
<tr><th></th><th></th></tr>
<tr><th>Neo</th><th>Kyoros</th></tr>
<tr><th style='background-color:[r: AccionToString(accionNeo,1)]; height: 20px' >[r: AccionToString(accionNeo,0)] </th><th style='background-color:[r: AccionToString(accionKyoros,1)]; height: 20px' >[r: AccionToString(accionKyoros,0)]</th></tr>
</table>
    </body>
  </html>
}]

@@ProgressRoundFrame
@PROPS@ fontColor=cyan ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=black ; playerEditable=false ; applyToSelected=false ; group=AccionesV3 ; tooltip= ; minWidth=120
<!-- ProgressRoundFrame -->
[h: data = arg(0)]

<!-- ******************* Declarar ataque ******************-->
[h, if( getStrProp(data,"atacar")!="" ): DeclararAtaqueV3()]

[h: acciones = "cargar_sort,lanzar_sort,cargar_proy,disparar_proy,mov_manio,ataque_cac,desplazamiento,mov_estatico"]

[h: tokenAccion = getInitiativeToken()]
[h: tokenAccion = getName(tokenAccion)]

[h,token(tokenAccion): accionesToken = getStrProp("countAtaques",GolpeActual)]

[h, if(tokenAccion == "ACCIONES"): puntoMuerto = 1 ; puntoMuerto = 0]

[h, if(tokenAccion == "AUTOMOVE"): puntoMuerto = 2 ]

[h, if(tokenAccion == "AUTOARROW"): puntoMuerto = 4 ]

<!-- ******************* MOver Tokens con Auto MOve********-->
[h, if( getStrProp(data,"mover")!="" ): puntoMuerto = 3 ]
[h, if( getStrProp(data,"mover")!="" ): jsonAutoMove = getStrProp(data,"mover")]

<!-- ******************* Declarar ataque Proy. ************-->
[h, if( getStrProp(data,"atacarProy")!="" ): DeclararAtaqueProyectilV3(tokenAccion)]

<!-- ******************* Actuar la Accion ******************-->
[h, if( getStrProp(data,"Confirmar")!="" ): gastarAccion(tokenAccion)]

[h, if( getStrProp(data,"Confirmar") != "" && number(accionesToken) >= 3 ): SiguienteToken()]

[h: processorLink =macroLinkText('ProgressRoundFrame@lib:asaltos',"all")]
[h: bodyFrame = "puntoMuerto"]
[ frame("ActividadFrame"):{
 <html>
    <head>
     <link rel='stylesheet' type='text/css' href='myCSS@[r: getMacroLocation()]'></link>
    <title>Eleccion de Acciones</title>
      <title>Eleccion de Acciones</title>
    </head>
     <body class="[r: bodyFrame]">
     <form name="calculoDeDanio" action="[r:processorLink]">
	<table width='100%'  cellpadding='0' cellspacing='3' border="0" style="background-color:[r: temaColor(1)]">
		
		[r, if(puntoMuerto==0): treeAccionsProgressRoundFrame(tokenAccion)]
		[r, if(puntoMuerto==1):puntoMuertoProgressRoundFrame() ]
		[r, if(puntoMuerto==2):puntoAutoMoveFrame(0) ]
		[r, if(puntoMuerto==3):puntoAutoMoveFrame(jsonAutoMove) ]
		[r, if(puntoMuerto==4): "<h2>ATAQUE CON FLECHAS</h2>" ]
		
		
</table>
</form>
</body>
</html>

}]

@@accionesPosiblesProgressRoundFrame
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=default ; playerEditable=false ; applyToSelected=false ; group=AccionesV3 ; tooltip= ; minWidth=120
<!-- accionesPosiblesProgressRoundFrame -->

[h: tokenAccion = getInitiativeToken() ]
[h: tokenAccion = getName(tokenAccion)]
[h: switchToken(tokenAccion)]
[h, if( pausear() == 1 ): pause("tokenAccion") ]

[h, if(getState("Aturdido")): isAturdido = 1 ; isAturdido = 0]
[h, if( getState("Aturdido y Sin Poder parar")): isAturdidoSinParar = 1 ; isAturdidoSinParar = 0]
[h, if( getState("Obligado a parar")): isObligadoParar = 1 ; isObligadoParar = 0]
[h, if( getState("Postrado")): isPostrado = 1 ; isPostrado = 0]
[h, if( getState("Derribado")): isDerribado = 1 ; isDerribado = 0]
[h, if( getState("Derrotado") || getState("Muerto")): isDerrotado = 1 ; isDerrotado = 0]

[h: mov = CalcMovimiento(tokenAccion)]

[h: nameArma1 = json.get(brazo1,"nombre")]
[h: nameArma2 = json.get(brazo2,"nombre")]

[h: temafondo = 1]
[h: temaBotones = 4]
[h: temaInfo = 3]
[h: acc = getAccion(tokenAccion)]
<!-- Pausa -->[h: mac = getMacroName()][h: puntop = 1][h, if(pausear()==1): pause("puntop","mac","tokenAccion","acc")]<!-- Pausa -->
[h: acc_text = acc ]

<!-- ******************* Personaje ******************-->
[r: rowPerso("<h1>"+tokenAccion+"</h1>|th|1",temaInfo)]

[r: rowPerso('Pun Vida:  <b>'+PV+' / '+MaxPV+'</b><br/>Pun Poder:  </span><b>'+PP+' / '+MaxPP+'</b>|td|1',temaInfo)]

[r: rowPerso(nameArma1+"<br/>"+nameArma2+"|td|1",temaInfo)]

<!-- Pausa -->[h: mac = getMacroName()][h: puntop = 2][h, if(pausear()==1): pause("puntop","mac","tokenAccion","acc_text")]<!-- Pausa -->

[h: acc_text = lower(acc_text)]
[r, switch(acc_text),code:
case "cargar_sort": { 
	[r: rowPerso('<h2>Carga de Sortilegio</h2>|th|1',temafondo)]		
	
	[r: rowPerso('<span>Sortilegio</span>',temafondo)]	
	[h, if(isNumber(CargaSortilegio)): ErrorMsg(0,"El valor CargaSortilegio de " + tokenAccion +" no es correcto") ]	
	[h: sortilegioCargado=getStrProp(CargaSortilegio,"sortilegio")]
	[r: rowPerso('<b>'+sortilegioCargado+'</b>',temafondo)]		

	[h: costo=getStrProp(CargaSortilegio,"Nivel")]
	[r: rowPerso('<span>Costo: </span><b>'+costo+' PP</b>',temafondo)]		
			
	
	[r: showCargasSortilInRow(temafondo)]

	[r: rowPerso('<span>Movimiento </span><b>3 mts</b>',temafondo)]		
	[r, if( isGM() ): rowPerso('<input type="submit" name="Confirmar" value="Confirmar">|th|1',temaBotones) ]
	
};
case "lanzar_sort": { 
	[r: rowPerso('<h2>Lanzar Sortilegio</h2>|th|1',temafondo)]		
	
	[h: sortilegioCargado=getStrProp(CargaSortilegio,"sortilegio")]
	[r: rowPerso('<b>'+sortilegioCargado+'</b>',temafondo)]		
	
	[h: costo=getStrProp(CargaSortilegio,"Nivel")]
	[r: rowPerso('<span>Costo: </span><b>'+costo+' PP</b>',temafondo)]		
	
	[r: showCargasSortilInRow(temafondo)]	

	[r: rowPerso('<span>Movimiento</span><b> 6 mts</b>',temafondo)]		
		[h, if( pausear() == 1 ): pause("costo") ]
	[r, if( isGM() ): rowPerso('<input type="submit" name="Confirmar" value="Confirmar">|th|1',temaBotones) ]
};
case "cargar_proy": { 

	
	[r: rowPerso('<h2>Cargar Proyectil</h2>|th|1',temafondo)]		

	
	[r: rowPerso('<span>Cargas</span>',temafondo)]		
	[r: showCargasProyInRow(tokenAccion, temafondo)]	

	[r: rowPerso('<span>Alcance</span>',temafondo)]		
	[r: showAlcancesInRow(brazo1) ]  
	
	[r: rowPerso('<span>Movimiento </span><b>3 Mts</b>',temafondo)]	
	

	[r, if( isGM() ): rowPerso('<input type="submit" name="Confirmar" value="Confirmar">|th|1',temaBotones) ]
};
case "disparar_proy": { 

	
<!-- Pausa -->[h: mac = getMacroName()][h: puntop = 3][h, if(pausear()==1): pause("puntop","mac","tokenAccion")]<!-- Pausa -->

	[r: rowPerso('<h2>Disparar Proyectil</h2>|th|1',temafondo)]		
	
	[r: rowPerso('<span>Cargas</span>',temafondo)]		
	[h: cantidadDeCargas=getStrProp(CargaProyectil,"cargaProyectil")]
	<!-- Pausa -->[h: mac = getMacroName()][h: puntop = 4][h, if(pausear()==1): pause("puntop","mac","cantidadDeCargas")]<!-- Pausa -->
	[h, if(cantidadDeCargas==""): cantidadDeCargas = 0]
	[r: rowPerso('<b>'+cantidadDeCargas+'</b>',temafondo)]		

<!-- Pausa -->[h: mac = getMacroName()][h: puntop = 4][h, if(pausear()==1): pause("puntop","mac","tokenAccion")]<!-- Pausa -->

	[h, if(cantidadDeCargas < 1): bono = -25]
	[h, if(cantidadDeCargas > 0): bono = 0]	
	[r: rowPerso('<span>Bono: </span><b>'+bono+' BO</b>',temafondo)]			
	

	<!-- Pausa -->[h: mac = getMacroName()][h: puntop = 5][h, if(pausear()==1): pause("puntop","mac","brazo1")]<!-- Pausa -->
	
	[r: rowPerso('<span>Alcance</span>',temafondo)]		
	[r: showAlcancesInRow(brazo1) ] 

	[r: rowPerso('<span>Movimiento </span><b>3 Mts</b>',temafondo)]		
	
	[r, if( isGM() ): rowPerso('<input type="submit" name="Confirmar" value="Confirmar">|th|1',temaBotones) ]

	[r: rowPerso('<input type="submit" name="atacarProy" value="Seleccionar Obj.">|th|1',temaBotones) ]

	
};
case "mov_manio": { 
	[h: aca = "mm"]
	[r: rowPerso('<h2>Movimiento o Maniobra</h2>|th|1',temafondo)]
		[h, if( pausear() == 1 ): pause("aca") ]
	[r: rowPerso('<span>MM actual= '+getMovMan(tokenAccion)+'</span>',temafondo)]
		[h, if( pausear() == 1 ): pause("aca") ]
	[r: rowPerso('<span>Dificultad</span>|td',temafondo)]

	[r: rowPerso('<span>Movimiento </span><b>'+mov/2+' mts</b>',temafondo)]	

	[r, if( isGM() ): rowPerso('<input type="submit" name="Confirmar" value="Confirmar">|th|1',temaBotones) ]
};
case "ataque_cac": { 

	[r: rowPerso('<h2>Combate C. A C.</h2>|th|1',temafondo)]

	<!-- Alcance Arrojadizo -->
	[r: rowPerso('<span>Alcance</span>',temafondo)]		

	[r: showAlcancesInRow(brazo1) ] 
	[r, if(nameArma1!=nameArma2):showAlcancesInRow(brazo2))]
	

<!--	[r: rowPerso('<input type="submit" name="CombateCerrado" value="Combate Cerrado">|th|1',temafondo)]
	[r: rowPerso('<input type="submit" name="CombateAbierto" value="Combate Abierto">|th|1',temafondo)]
	[r: rowPerso('<input type="submit" name="TrucoPelea" value="Truco Pelea">|th|1',temafondo)]

-->

	[r: rowPerso('<span>Movimiento </span><b>3 Mts</b>',temafondo)]		
	
	
	
	[r: rowPerso('<input type="submit" name="atacar" value="atacar">|th|1',temafondo) ]
};
case "desplazamiento": { 

	[r: rowPerso('<h2>Desplazamiento</h2>|th|1',temafondo)]
	[r: rowPerso('<span>MM actual= '+getMovMan(tokenAccion)+'</span>',temafondo)]

	[r: rowPerso('<span>Movimiento </span>',temafondo)]

	[r: rowPerso('Caminando: <b>'+mov+' mts</b>',temafondo)]	
	[r: rowPerso('Trotando: <b>'+round(mov *1.5)+' mts</b>',temafondo)]	
	[r: rowPerso('Corriendo: <b>'+round(mov *2)+' mts</b>',temafondo)]	
	[r: rowPerso('Esprintando: <b>Mas de '+round(mov *2)+' mts</b>',temafondo)]	
	[r: rowPerso('<span>Esprintar requiere tirada MM</span>',temafondo)]

	[r, if( isGM() ): rowPerso('<input type="submit" name="Confirmar" value="Confirmar">|th|1',temaBotones) ]
};
case "mov_estatico": { 
	[r: rowPerso('<h2>Mov. Estatico</h2>|th|1',temafondo)]
	[r, if( isGM() ): rowPerso('<input type="submit" name="Confirmar" value="Confirmar">|th|1',temaBotones) ]
};
default: {
	[r: rowPerso('<h2>Mov. Estatico</h2>|th|1',temafondo)]
	[r, if( isGM() ): rowPerso('<input type="submit" name="Confirmar" value="Confirmar">|th|1',temaBotones) ]
	}]

<!-- ******************* Botones Fijos ******************-->

<!--
[r: rowPerso('<input type="submit" name="cambioAccion" value="Cambio de Accion"><br/><input type="submit" name="accionOportunidad" value="Esperar Oportunidad">|th|1',temaBotones)]

-->

@@multipleAttakDialog
@PROPS@ fontColor=navy ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=white ; playerEditable=false ; applyToSelected=false ; group=AccionesV3 ; tooltip= ; minWidth=120
<!-- ProgressRoundFrame -->
[h: tokenAtk = arg(0)]
[h: tokenTgts = arg(1)]

              
[gm, dialog5("calculoMultiAtk","width=350; height=500;"): {
    <html>
    <head>
	 <link rel='stylesheet' type='text/css' href='myCSSMA@[r: getMacroLocation()]'></link>
      <title>Calculo de calculoMultiAtk</title>
      <meta name="input" content="true">
     
   
      <script type='text/javascript'>
    	[r: '
	
    function updateDefensa(name){document.getElementById(name + "_chk").checked = true;}
    function updateCalculo(name){document.getElementById(name + "_chk_cd").checked = true;}
	function updateGA(name){document.getElementById(name + "_chk_cd").checked = true;}
	
    function addRow(link,name) {
			
			var tr1 = document.createElement("tr");  
				var td1 = document.createElement("td"); 
				var td2 = document.createElement("td"); 
				var chk1 = document.createElement("input"); 
				
				chk1.setAttribute("type", "checkbox")  ;
				chk1.setAttribute("id", name+"_chk_cd")  ;
				
				td1.innerHTML = link;
				td2.appendChild(chk1); 
				tr1.appendChild(td1); 
				tr1.appendChild(td2); 
				if(!document.getElementById(name+"_chk_cd")){
					var cur = document.getElementById("tableCalculos"); 
  					cur.appendChild(tr1); 
				}
		}
	 	']
    
    </script>
    </head>
    
    <body style='background-image: url([r: tblImage("Iconos",17) ] );background-size: contain;'>
    
<h2>Ataque de {tokenAtk}</h2>
    <form name='MultiAttack'>

    
          <table id="tableCalculos" align="left" width="100%" class="tabla" "background-color:[r: temaColor(1)];">

				[r, foreach(tgt,tokenTgts,""),code:{
					[h, token(tgt ): jugadoresDef = getOwners() ]
					[h, if (isPC(tgt) ): obj = jugadoresDef ; obj = "gm"]
					[h: argu = json.append("", tokenAtk, tgt)]
					[h: link = macroLink("DEFENSA DE "+tgt,"DeclaroDefensaV3@lib:asaltos", jugadoresDef, argu) ]
					[h: linkText = macroLinkText("DeclaroDefensaV3@lib:asaltos", "none", argu) ]
				
							  <tr>
						        	<td onclick='updateDefensa("[r: tgt])"'> [r: link]</td>
									<td><input  type='checkbox' 	id='[r: tgt]_chk' /></td>
						        
						      </tr>
				
				      
				}]
		      <tr>
			      <td>
			      	<hr/>
		    	  </td>
		      </tr>
           </table>
      </form>
      
    </body>
  </html>
}]

@@puntoAutoMoveFrame
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=default ; playerEditable=false ; applyToSelected=false ; group=AccionesV3 ; tooltip= ; minWidth=120
<!-- puntoAutoMove -->

[h,code:{
	
	[ queHacer = arg(0)]
	[ tknMoveNow = "" ]
	[ jsonDataMove = "" ]
	[ jsonlista = "" ]

	[ if(queHacer == 0):  tokensAuto = getTokensAuto() ; jsonDataMove = arg(0) ]
	[ tokensAuto = getTokensAuto()]
	
<!-- ******************* MOver Tokens con Auto MOve********-->
[ if( json.contains(jsonDataMove,"moveNow") ): tknMoveNow =  json.path.read(jsonDataMove,"moveNow")]

[ if( json.contains(jsonDataMove,"moveNow") ): jsonlista = json.get(jsonDataMove,"lista")]

[ if( tknMoveNow != "ALL_TOKENS" && tknMoveNow != ""): jsonDataMove = json.path.set(jsonDataMove,"lista."+tknMoveNow+".done",AutoMove(tknMoveNow))]	

<!-- ******************* MOver todos los Tokens con Auto MOve********-->
[ if( tknMoveNow == "ALL_TOKENS" ),code:{	

	[ foreach(tknAuto,json.fields(jsonlista),""): jsonDataMove = json.path.set(jsonDataMove,"lista."+tknAuto+".done",AutoMove(tknAuto))  ]
	[ jsonlista = json.get(jsonDataMove,"lista") ]
	
}] 

	

	
	<!--  Crea Lista -->
	[ if(queHacer == 0),foreach(tknAuto,tokensAuto,""),code:{  	
			
		[ token(tknAuto): setState("AutoMove",1) ]  
		
		[ dataBasica = json.set("","done",0)]
		
		[ jsonLista = json.set(jsonlista,tknAuto,dataBasica)) ]
		
	}]
	
	[ if(queHacer == 0): jsonDataMove = json.set(jsonDataMove,"lista",jsonLista)  ]
}]

<table>

<tr colspan="3"><td>[r: macroLink("Mover a Todos", "ProgressRoundFrame@Lib:asaltos", "gm", setStrProp("","mover", json.set(jsonDataMove,"moveNow","ALL_TOKENS") ))]</td></tr>

[r, foreach(tknAuto,json.fields(jsonlista),""),code:{

	[h: done = json.path.read(jsonlista,tknAuto+".done")]
	[h,token(tknAuto): rutaSize = json.length(autoAction)]
	[h,if(done == 0 && rutaSize != 0): link = macroLink("Mover", "ProgressRoundFrame@Lib:asaltos", "gm", setStrProp("","mover",json.set(jsonDataMove,"moveNow",tknAuto)) ) ; link = "DONE"]
	[h,if(done == "-1"): link = "Combate" ]
	
	<tr>
		<td> {tknAuto} </td>
		<td> [r: link] </td>

		<td>[r, if(done != "-1"): done + " mts" ]</td>
	
	</tr>
}]
</table>

@@puntoMuertoProgressRoundFrame
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=default ; playerEditable=false ; applyToSelected=false ; group=AccionesV3 ; tooltip= ; minWidth=120
<!-- puntoMuertoProgressRoundFrame -->

[h: tokens = JsonObtenerMuertosYDerrotados()]

[h, if(pausear()==1): pause("tokens")]
[h: contadorGondor = 0 ]
[h: contadorNaga = 0 ]

[h, foreach(tok, tokens),code:{
	[ token(tok), if(grupo == "grupoGondor"): contadorGondor = contadorGondor + 1 ]
	[ token(tok), if(grupo == "grupoNaga"): contadorNaga = contadorNaga + 1 ]
}]

<tr><th colspan=2>
	<h3>Comienza Asalto : [r: getInitiativeRound()]</h3>
</th></tr>
<tr><th colspan="2"><hr/></th></tr>
<tr><th>Bajas Gondor</th><th>[r: contadorGondor ]</th></tr>
<tr><th>Bajas Naga</th><th> [r: contadorNaga ]</th></tr>
<tr><th colspan="2"><hr/></th></tr>

<tr><th>Cargar Sortilegio</th><th>3 metros.</th></tr>
<tr><th>Realizar Sortilegio</th><th>6 metros.</th></tr>
<tr><th>Cargar Proyectil</th><th>3 metros.</th></tr>
<tr><th>Disparar Proyectil</th><th>3 metros.</th></tr>
<tr><th>Mov y Maniobra</th><th>1/2 Medio Mov.</th></tr>
<tr><th>Combate Cuerpo a Cuerpo</th><th>3 metros.</th></tr>
<tr><th>Movimiento Estatico</th><th>Puede Variar.</th></tr>

@@showAlcancesInRow
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=teal ; playerEditable=false ; applyToSelected=false ; group=AccionesV3 ; tooltip= ; minWidth=120
<!-- showAlcancesInRow-->
[h: arma = arg(0)]
[h, if(json.contains(arma,"alcance")): alcances = json.get(arma,"alcance") ; alcances = "" ]
		
[r, count(countStrProp(alcances),""),code:	{
	  [h: rango = number(indexKeyStrProp(alcances, roll.count))]
	  [h: bonif = indexValueStrProp(alcances, roll.count)]
	  [h, if(bonif>0): simbolo = "+" ; simbolo = ""] 
	  [r: rowPerso('<span>'+rango+' Mts   -> '+simbolo+bonif+' bo</span>',3)]		
}]

@@showCargasProyInRow
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=teal ; playerEditable=false ; applyToSelected=false ; group=AccionesV3 ; tooltip= ; minWidth=120
<!-- showCargasProyInRow-->
[h: tok = arg(0) ] 
[h: temafondo = arg(1) ] 

[h,token(tok): cantidadDeCargas=getStrProp(CargaProyectil,"cargaProyectil")]
[h, if(cantidadDeCargas==""): cantidadDeCargas = 0]
[r: rowPerso('<b>'+cantidadDeCargas+'</b>',temafondo)]		

[h, if(cantidadDeCargas < 1): bono = -25]
[h, if(cantidadDeCargas > 0): bono = 0]	
[r: rowPerso('<span>Bono: </span><b>'+bono+' BO</b>',temafondo)]

@@showCargasSortilInRow
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=teal ; playerEditable=false ; applyToSelected=false ; group=AccionesV3 ; tooltip= ; minWidth=120
<!-- showCargasSortilInRow-->
[h: temafondo = arg(0)]
[h: cantidadDeCargas=getStrProp(CargaSortilegio,"cargaSortilegio")]
	
	[h, if(cantidadDeCargas==""): cantidadDeCargas = 0]
	[r: rowPerso('Cargas: <b>'+cantidadDeCargas+'</b>',temafondo)]		

	[h, if(cantidadDeCargas < 1): bono = -30]
	[h, if(cantidadDeCargas == 1): bono = -15]
	[h, if(cantidadDeCargas == 2): bono = -0]
	[h, if(cantidadDeCargas == 3): bono = +10]
	[h, if(cantidadDeCargas > 3): bono = +20]
	[r: rowPerso('<span>Bono: </span><b>'+bono+'</b>',temafondo)]

@@treeAccionsProgressRoundFrame
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=default ; playerEditable=false ; applyToSelected=false ; group=AccionesV3 ; tooltip= ; minWidth=120
<!-- accionesPosiblesProgressRoundFrame -->

[h: tokenAccion = getInitiativeToken() ]
[h: tokenAccion = getName(tokenAccion)]
[h: switchToken(tokenAccion)]
[h, if( pausear() == 1 ): pause("tokenAccion") ]

[h, if(getState("Aturdido")): isAturdido = 1 ; isAturdido = 0]
[h, if( getState("Aturdido y Sin Poder parar")): isAturdidoSinParar = 1 ; isAturdidoSinParar = 0]
[h, if( getState("Obligado a parar")): isObligadoParar = 1 ; isObligadoParar = 0]
[h, if( getState("Postrado")): isPostrado = 1 ; isPostrado = 0]
[h, if( getState("Derribado")): isDerribado = 1 ; isDerribado = 0]
[h, if( getState("Derrotado") || getState("Muerto")): isDerrotado = 1 ; isDerrotado = 0]

[h: mov = CalcMovimiento(tokenAccion)]

[h: nameArma1 = json.get(brazo1,"nombre")]
[h: nameArma2 = json.get(brazo2,"nombre")]

[h: temafondo = 1]
[h: temaBotones = 4]
[h: temaInfo = 3]
[h: acc = getAccion(tokenAccion)]

[h: acc_text = acc ]

<!-- ******************* Personaje ******************-->
[r: rowPerso("<h1>"+tokenAccion+"</h1>|th|1",temaInfo)]

[r: rowPerso('Pun Vida:  <b>'+PV+' / '+MaxPV+'</b><br/>Pun Poder:  </span><b>'+PP+' / '+MaxPP+'</b>|td|1',temaInfo)]

[r: rowPerso(nameArma1+"<br/>"+nameArma2+"|td|1",temaInfo)]

[h: cantAcciones = json.get(accionPath,"accionesPosibles") ]
[h: accionesPos = json.get(accionPath,"countAcciones") ]
[h, if(pausear()==1): pause("accionPath")]
[r: rowPerso("<h2>ACCIONES " + accionesPos + "/" + cantAcciones + "<h2>|th|1",temafondo)]	

[r, if( isGM() ): rowPerso('<input type="submit" name="Confirmar" value="OTRA">|th|1',temaBotones) ]

	
[h: acc_text = lower(acc_text)]

	[r: rowPerso('<h2>Sortilegio</h2>|th|1',temafondo)]		
	
	[r: rowPerso('<span>Sortilegio</span>',temafondo)]	
	[h, if(isNumber(CargaSortilegio)): ErrorMsg(0,"El valor CargaSortilegio de " + tokenAccion +" no es correcto") ]	
	[h: sortilegioCargado=getStrProp(CargaSortilegio,"sortilegio")]
	[r: rowPerso('<b>'+sortilegioCargado+'</b>',temafondo)]		

	[h: costo=getStrProp(CargaSortilegio,"Nivel")]
	[r: rowPerso('<span>Costo: </span><b>'+costo+' PP</b>',temafondo)]		
			
	
	[r: showCargasSortilInRow(temafondo)]

		
	[r, if( isGM() ): rowPerso('<input type="submit" name="Confirmar" value="Cargar">|th|1',temaBotones) ]
	

	[h, if( pausear() == 1 ): pause("costo") ]
	[r, if( isGM() ): rowPerso('<input type="submit" name="Confirmar" value="Lanzar">|th|1',temaBotones) ]

	
	[r: rowPerso('<h2>Proyectil</h2>|th|1',temafondo)]		

		

	
<!-- Pausa -->[h: mac = getMacroName()][h: puntop = 3][h, if(pausear()==1): pause("puntop","mac","tokenAccion")]<!-- Pausa -->

	
	
	[r: rowPerso('<span>Cargas</span>',temafondo)]		
	[h: cantidadDeCargas=getStrProp(CargaProyectil,"cargaProyectil")]
	<!-- Pausa -->[h: mac = getMacroName()][h: puntop = 4][h, if(pausear()==1): pause("puntop","mac","cantidadDeCargas")]<!-- Pausa -->
	[h, if(cantidadDeCargas==""): cantidadDeCargas = 0]
	[r: rowPerso('<b>'+cantidadDeCargas+'</b>',temafondo)]		

<!-- Pausa -->[h: mac = getMacroName()][h: puntop = 4][h, if(pausear()==1): pause("puntop","mac","tokenAccion")]<!-- Pausa -->

	[h, if(cantidadDeCargas < 1): bono = -25]
	[h, if(cantidadDeCargas > 0): bono = 0]	
	[r: rowPerso('<span>Bono: </span><b>'+bono+' BO</b>',temafondo)]			
	

	<!-- Pausa -->[h: mac = getMacroName()][h: puntop = 5][h, if(pausear()==1): pause("puntop","mac","brazo1")]<!-- Pausa -->
	
	[r: rowPerso('<span>Alcance</span>',temafondo)]		
	[r: showAlcancesInRow(brazo1) ] 

	
	[r, if( isGM() ): rowPerso('<input type="submit" name="Confirmar" value="Cargar Pro">|th|1',temaBotones) ]

	[r: rowPerso('<input type="submit" name="atacarProy" value="Seleccionar Obj.">|th|1',temaBotones) ]

	

	[h: aca = "mm"]
	[r: rowPerso('<h2>Movimiento o Maniobra</h2>|th|1',temafondo)]
		[h, if( pausear() == 1 ): pause("aca") ]
	[r: rowPerso('<span>MM actual= '+getMovMan(tokenAccion)+'</span>',temafondo)]
		[h, if( pausear() == 1 ): pause("aca") ]
	[r: rowPerso('<span>Dificultad</span>|td',temafondo)]

	[r: rowPerso('<span>Movimiento </span><b>'+mov/2+' mts</b>',temafondo)]	

	[r, if( isGM() ): rowPerso('<input type="submit" name="Confirmar" value="Mov Maniobra">|th|1',temaBotones) ]

 

	[r: rowPerso('<h2>Combate C. A C.</h2>|th|1',temafondo)]

	<!-- Alcance Arrojadizo -->
	[r: rowPerso('<span>Alcance</span>',temafondo)]		

	[r: showAlcancesInRow(brazo1) ] 
	[r, if(nameArma1!=nameArma2):showAlcancesInRow(brazo2))]
	

<!--	[r: rowPerso('<input type="submit" name="CombateCerrado" value="Combate Cerrado">|th|1',temafondo)]
	[r: rowPerso('<input type="submit" name="CombateAbierto" value="Combate Abierto">|th|1',temafondo)]
	[r: rowPerso('<input type="submit" name="TrucoPelea" value="Truco Pelea">|th|1',temafondo)]

-->

	
	

	[r: rowPerso('<input type="submit" name="atacar" value="atacar">|th|1',temafondo) ]

	[r: rowPerso('<h2>Desplazamiento</h2>|th|1',temafondo)]
	[r: rowPerso('<span>MM actual= '+getMovMan(tokenAccion)+'</span>',temafondo)]

	[r: rowPerso('<span>Movimiento </span>',temafondo)]

	[r: rowPerso('Caminando: <b>'+mov+' mts</b>',temafondo)]	
	[r: rowPerso('Trotando: <b>'+round(mov *1.5)+' mts</b>',temafondo)]	
	[r: rowPerso('Corriendo: <b>'+round(mov *2)+' mts</b>',temafondo)]	
	[r: rowPerso('Esprintando: <b>Mas de '+round(mov *2)+' mts</b>',temafondo)]	
	[r: rowPerso('<span>Esprintar requiere tirada MM</span>',temafondo)]

	[r, if( isGM() ): rowPerso('<input type="submit" name="Confirmar" value="Desplazar">|th|1',temaBotones) ]

	[r: rowPerso('<h2>Mov. Estatico</h2>|th|1',temafondo)]
	[r, if( isGM() ): rowPerso('<input type="submit" name="Confirmar" value="Estatico">|th|1',temaBotones) ]

<!-- ******************* Botones Fijos ******************-->

<!--
[r: rowPerso('<input type="submit" name="cambioAccion" value="Cambio de Accion"><br/><input type="submit" name="accionOportunidad" value="Esperar Oportunidad">|th|1',temaBotones)]

-->

@@getValIniciativeToken
@PROPS@ fontColor=black ; autoExecute=true ; fontSize=1.00em ; sortBy= ; color=darkgray ; playerEditable=false ; applyToSelected=false ; group=Iniciativa ; tooltip= ; minWidth=120
<!-- getValIniciativeToken -->
[h: tokTarget = arg(0)]

[h: re= -1]
[h: json = getInitiativeList() ]
[h:tokens = json.get(json, "tokens")]

[h,foreach(item, tokens, "<br>"),code:{ 
	[h: idTok = json.get(item,"tokenId")]
	[h: tok = getName(idTok)]	
	
	[if (tokTarget == tok): re = json.get(item,"initiative")]
} ]
[h: macro.return = re]